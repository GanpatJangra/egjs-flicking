{"version":3,"file":"flicking.min.js","sources":["../src/consts.ts","../src/utils.ts","../src/components/Panel.ts","../src/components/PanelManager.ts","../src/states/State.ts","../src/states/IdleState.ts","../src/states/HoldingState.ts","../src/states/DraggingState.ts","../src/states/AnimatingState.ts","../src/states/DisabledState.ts","../src/components/StateMachine.ts","../src/moves/Snap.ts","../src/moves/MoveType.ts","../src/moves/FreeScroll.ts","../src/components/Viewport.ts","../src/Flicking.ts","../src/index.umd.ts"],"sourcesContent":["/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { FlickingOptions, EventType, Direction, AxesEventType, StateType, MoveTypeSnapOption, MoveTypeFreeScrollOption, FlickingMethodsKeys } from \"./types\";\n\nexport const MOVE_TYPE: {\n  SNAP: \"snap\";\n  FREE_SCROLL: \"freeScroll\";\n} = {\n  SNAP: \"snap\",\n  FREE_SCROLL: \"freeScroll\",\n};\n\nexport const DEFAULT_MOVE_TYPE_OPTIONS: {\n  snap: MoveTypeSnapOption,\n  freeScroll: MoveTypeFreeScrollOption,\n} = {\n  snap: {\n    type: \"snap\",\n    count: 1,\n  },\n  freeScroll: {\n    type: \"freeScroll\",\n  },\n};\nexport const isBrowser = typeof document !== \"undefined\";\n\n/**\n * Default options for creating Flicking.\n * @ko 플리킹을 만들 때 사용하는 기본 옵션들\n * @private\n * @memberof eg.Flicking\n */\nexport const DEFAULT_OPTIONS: Readonly<FlickingOptions> = {\n  classPrefix: \"eg-flick\",\n  deceleration: 0.0075,\n  horizontal: true,\n  circular: false,\n  infinite: false,\n  infiniteThreshold: 0,\n  lastIndex: Infinity,\n  threshold: 40,\n  duration: 100,\n  panelEffect: x => 1 - Math.pow(1 - x, 3),\n  defaultIndex: 0,\n  inputType: [\"touch\", \"mouse\"],\n  thresholdAngle: 45,\n  bounce: 10,\n  autoResize: false,\n  adaptive: false,\n  zIndex: 2000,\n  bound: false,\n  overflow: false,\n  hanger: \"50%\",\n  anchor: \"50%\",\n  gap: 0,\n  moveType: DEFAULT_MOVE_TYPE_OPTIONS.snap,\n  useOffset: false,\n  isEqualSize: false,\n  isConstantSize: false,\n  renderOnlyVisible: false,\n  renderExternal: false,\n  iOSEdgeSwipeThreshold: 30,\n  collectStatistics: true,\n};\n\nexport const DEFAULT_VIEWPORT_CSS = {\n  position: \"relative\",\n  zIndex: DEFAULT_OPTIONS.zIndex,\n  overflow: \"hidden\",\n};\n\nexport const DEFAULT_CAMERA_CSS = {\n  width: \"100%\",\n  height: \"100%\",\n  willChange: \"transform\",\n};\n\nexport const DEFAULT_PANEL_CSS = {\n  position: \"absolute\",\n};\n\nexport const EVENTS: EventType = {\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  CHANGE: \"change\",\n  RESTORE: \"restore\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n  VISIBLE_CHANGE: \"visibleChange\",\n};\n\nexport const AXES_EVENTS: AxesEventType = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\",\n};\n\nexport const STATE_TYPE: StateType = {\n  IDLE: 0,\n  HOLDING: 1,\n  DRAGGING: 2,\n  ANIMATING: 3,\n  DISABLED: 4,\n};\n\nexport const DIRECTION: Direction = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n};\nexport const FLICKING_METHODS: {[key in FlickingMethodsKeys]: true} = {\n  prev: true,\n  next: true,\n  moveTo: true,\n  getIndex: true,\n  getAllPanels: true,\n  getCurrentPanel: true,\n  getElement: true,\n  getPanel: true,\n  getPanelCount: true,\n  getStatus: true,\n  getVisiblePanels: true,\n  enableInput: true,\n  disableInput: true,\n  destroy: true,\n  resize: true,\n  setStatus: true,\n  isPlaying: true,\n};\n\n// Check whether browser supports transform: translate3d\n// https://stackoverflow.com/questions/5661671/detecting-transform-translate3d-support\nexport let checkTranslateSupport = () => {\n  const transforms = {\n    webkitTransform: \"-webkit-transform\",\n    msTransform: \"-ms-transform\",\n    MozTransform: \"-moz-transform\",\n    OTransform: \"-o-transform\",\n    transform: \"transform\",\n  };\n\n  if (!isBrowser) {\n    return {\n      name: transforms.transform,\n      has3d: true,\n    };\n  }\n  const supportedStyle = document.documentElement.style;\n  let transformName = \"\";\n  for (const prefixedTransform in transforms) {\n    if (prefixedTransform in supportedStyle) {\n      transformName = prefixedTransform;\n    }\n  }\n\n  if (!transformName) {\n    throw new Error(\"Browser doesn't support CSS3 2D Transforms.\");\n  }\n\n  const el = document.createElement(\"div\");\n\n  document.documentElement.insertBefore(el, null);\n\n  el.style[transformName] = \"translate3d(1px, 1px, 1px)\";\n  const styleVal = window.getComputedStyle(el).getPropertyValue(transforms[transformName]);\n\n  el.parentElement!.removeChild(el);\n\n  const transformInfo = {\n    name: transformName,\n    has3d: styleVal.length > 0 && styleVal !== \"none\",\n  };\n\n  checkTranslateSupport = () => transformInfo;\n\n  return transformInfo;\n};\n\nexport const TRANSFORM = checkTranslateSupport();\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { ElementLike, OriginalStyle, BoundingBox } from \"./types\";\nimport Flicking from \"./Flicking\";\nimport { FLICKING_METHODS } from \"./consts\";\n\nexport function merge(target: object, ...srcs: object[]): object {\n  srcs.forEach(source => {\n    Object.keys(source).forEach(key => {\n      const value = source[key];\n      target[key] = value;\n    });\n  });\n\n  return target;\n}\n\nexport function parseElement(element: ElementLike | ElementLike[]): HTMLElement[] {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n      while (tempDiv.firstChild) {\n        tempDiv.removeChild(tempDiv.firstChild);\n      }\n    } else {\n      elements.push(el as HTMLElement);\n    }\n  });\n\n  return elements;\n}\n\nexport function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n\n// Get class list of element as string array\nexport function classList(element: HTMLElement): string[] {\n  return element.classList\n    ? toArray(element.classList)\n    : element.className.split(\" \");\n}\n\n// Add class to specified element\nexport function addClass(element: HTMLElement, className: string): void {\n  if (element.classList) {\n    element.classList.add(className);\n  } else {\n    if (!hasClass(element, className)) {\n      element.className = (`${element.className} ${className}`).replace(/\\s{2,}/g, \" \");\n    }\n  }\n}\n\nexport function hasClass(element: HTMLElement, className: string): boolean {\n  if (element.classList) {\n    return element.classList.contains(className);\n  } else {\n    return (element.className.split(\" \").indexOf(className) >= 0);\n  }\n}\n\nexport function applyCSS(element: HTMLElement, cssObj: object): void {\n  Object.keys(cssObj).forEach(property => {\n    element.style[property] = cssObj[property];\n  });\n}\n\nexport function clamp(val: number, min: number, max: number) {\n  return Math.max(Math.min(val, max), min);\n}\n\n// Min: inclusive, Max: exclusive\nexport function isBetween(val: number, min: number, max: number) {\n  return val >= min && val <= max;\n}\n\nexport interface ArrayLike<T> {\n  length: number;\n  [index: number]: T;\n}\n\nexport function toArray<T>(iterable: ArrayLike<T>): T[] {\n  return [].slice.call(iterable);\n}\n\nexport function isArray(arr: any): boolean {\n  return arr && arr.constructor === Array;\n}\n\nexport function parseArithmeticExpression(cssValue: number | string, base: number, defaultVal?: number): number {\n  // Set base / 2 to default value, if it's undefined\n  const defaultValue = defaultVal != null ? defaultVal : base / 2;\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return clamp(cssValue, 0, base);\n  }\n\n  let idx = 0;\n  let calculatedValue = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n\n    let parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return defaultValue;\n    }\n\n    if (unit === \"%\") {\n      parsedValue = (parsedValue / 100) * base;\n    }\n\n    calculatedValue += sign === \"+\"\n      ? parsedValue\n      : -parsedValue;\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return defaultValue;\n  }\n\n  // Clamp between 0 ~ base\n  return clamp(calculatedValue, 0, base);\n}\n\nexport function getProgress(pos: number, range: number[]) {\n  // start, anchor, end\n  // -1 , 0 , 1\n  const [min, center, max] = range;\n\n  if (pos > center && (max - center)) {\n    // 0 ~ 1\n    return (pos - center) / (max - center);\n  } else if (pos < center && (center - min)) {\n    // -1 ~ 0\n    return (pos - center) / (center - min);\n  } else if (pos !== center && max - min) {\n    return (pos - min) / (max - min);\n  }\n  return 0;\n}\n\nexport function findIndex<T>(iterable: T[], callback: (el: T) => boolean): number {\n  for (let i = 0; i < iterable.length; i += 1) {\n    const element = iterable[i];\n    if (element && callback(element)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\n// return [0, 1, ...., max - 1]\nexport function counter(max: number): number[] {\n  const counterArray: number[] = [];\n  for (let i = 0; i < max; i += 1) {\n    counterArray[i] = i;\n  }\n  return counterArray;\n}\n\n// Circulate number between range [min, max]\n/*\n * \"indexed\" means min and max is not same, so if it's true \"min - 1\" should be max\n * While if it's false, \"min - 1\" should be \"max - 1\"\n * use `indexed: true` when it should be used for circulating integers like index\n * or `indexed: false` when it should be used for something like positions.\n */\nexport function circulate(value: number, min: number, max: number, indexed: boolean): number {\n  const size = indexed\n    ? max - min + 1\n    : max - min;\n  if (value < min) {\n    const offset = indexed\n      ? (min - value - 1) % size\n      : (min - value) % size;\n    value = max - offset;\n  } else if (value > max) {\n    const offset = indexed\n      ? (value - max - 1) % size\n      : (value - max) % size;\n    value = min + offset;\n  }\n\n  return value;\n}\n\nexport function restoreStyle(element: HTMLElement, originalStyle: OriginalStyle): void {\n  originalStyle.className\n    ? element.setAttribute(\"class\", originalStyle.className)\n    : element.removeAttribute(\"class\");\n  originalStyle.style\n    ? element.setAttribute(\"style\", originalStyle.style)\n    : element.removeAttribute(\"style\");\n}\n\n/**\n * Decorator that makes the method of flicking available in the framework.\n * @ko 프레임워크에서 플리킹의 메소드를 사용할 수 있게 하는 데코레이터.\n * @memberof eg.Flicking\n * @private\n * @example\n * ```js\n * import Flicking, { withFlickingMethods } from \"@egjs/flicking\";\n *\n * class Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>> {\n *   &#64;withFlickingMethods\n *   private flicking: Flicking;\n * }\n * ```\n */\nexport function withFlickingMethods(prototype: any, flickingName: string) {\n  Object.keys(FLICKING_METHODS).forEach((name: keyof Flicking) => {\n    if (prototype[name]) {\n      return;\n    }\n    prototype[name] = function(...args) {\n      const result = this[flickingName][name](...args);\n\n      // fix `this` type to return your own `flicking` instance to the instance using the decorator.\n      if (result === this[flickingName]) {\n        return this;\n      } else {\n        return result;\n      }\n    };\n  });\n}\n\nexport function getBbox(element: HTMLElement, useOffset: boolean) {\n  let bbox: BoundingBox;\n  if (useOffset) {\n    bbox = {\n      x: 0,\n      y: 0,\n      width: element.offsetWidth,\n      height: element.offsetHeight,\n    };\n  } else {\n    const clientRect = element.getBoundingClientRect();\n    bbox = {\n      x: clientRect.left,\n      y: clientRect.top,\n      width: clientRect.width,\n      height: clientRect.height,\n    };\n  }\n  return bbox;\n}\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Viewport from \"./Viewport\";\nimport { OriginalStyle, FlickingPanel, ElementLike, DestroyOption, BoundingBox } from \"../types\";\nimport { DEFAULT_PANEL_CSS, EVENTS } from \"../consts\";\nimport { addClass, applyCSS, parseArithmeticExpression, parseElement, getProgress, restoreStyle, hasClass, getBbox } from \"../utils\";\n\nclass Panel implements FlickingPanel {\n  public viewport: Viewport;\n  public prevSibling: Panel | null;\n  public nextSibling: Panel | null;\n\n  protected state: {\n    index: number;\n    position: number;\n    relativeAnchorPosition: number;\n    size: number;\n    isClone: boolean;\n    isVirtual: boolean;\n    // Index of cloned panel, zero-based integer(original: -1, cloned: [0, 1, 2, ...])\n    // if cloneIndex is 0, that means it's first cloned panel of original panel\n    cloneIndex: number;\n    originalStyle: OriginalStyle;\n    cachedBbox: BoundingBox | null;\n  };\n  private element: HTMLElement;\n  private original?: Panel;\n  private clonedPanels: Panel[];\n\n  public constructor(\n    element?: HTMLElement | null,\n    index?: number,\n    viewport?: Viewport,\n  ) {\n    this.viewport = viewport!;\n    this.prevSibling = null;\n    this.nextSibling = null;\n    this.clonedPanels = [];\n\n    this.state = {\n      index: index!,\n      position: 0,\n      relativeAnchorPosition: 0,\n      size: 0,\n      isClone: false,\n      isVirtual: false,\n      cloneIndex: -1,\n      originalStyle: {\n        className: \"\",\n        style: \"\",\n      },\n      cachedBbox: null,\n    };\n    this.setElement(element);\n  }\n\n  public resize(givenBbox?: BoundingBox): void {\n    const state = this.state;\n    const options = this.viewport.options;\n    const bbox = givenBbox\n      ? givenBbox\n      : this.getBbox();\n    this.state.cachedBbox = bbox;\n    const prevSize = state.size;\n\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n\n    if (prevSize !== state.size) {\n      state.relativeAnchorPosition = parseArithmeticExpression(options.anchor, state.size);\n    }\n\n    if (!state.isClone) {\n      this.clonedPanels.forEach(panel => {\n        const cloneState = panel.state;\n\n        cloneState.size = state.size;\n        cloneState.cachedBbox = state.cachedBbox;\n        cloneState.relativeAnchorPosition = state.relativeAnchorPosition;\n      });\n    }\n  }\n\n  public unCacheBbox(): void {\n    this.state.cachedBbox = null;\n  }\n\n  public getProgress() {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const panelCount = viewport.panelManager.getPanelCount();\n    const scrollAreaSize = viewport.getScrollAreaSize();\n\n    const relativeIndex = (options.circular ? Math.floor(this.getPosition() / scrollAreaSize) * panelCount : 0) + this.getIndex();\n    const progress = relativeIndex - viewport.getCurrentProgress();\n\n    return progress;\n  }\n\n  public getOutsetProgress() {\n    const viewport = this.viewport;\n    const outsetRange = [\n      -this.getSize(),\n      viewport.getRelativeHangerPosition() - this.getRelativeAnchorPosition(),\n      viewport.getSize(),\n    ];\n    const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    const outsetProgress = getProgress(relativePanelPosition, outsetRange);\n\n    return outsetProgress;\n  }\n\n  public getVisibleRatio() {\n    const viewport = this.viewport;\n    const panelSize = this.getSize();\n    const relativePanelPosition = this.getPosition() - viewport.getCameraPosition();\n    const rightRelativePanelPosition = relativePanelPosition + panelSize;\n\n    const visibleSize = Math.min(viewport.getSize(), rightRelativePanelPosition) - Math.max(relativePanelPosition, 0);\n    const visibleRatio = visibleSize >= 0\n      ? visibleSize / panelSize\n      : 0;\n\n    return visibleRatio;\n  }\n\n  public focus(duration?: number): void {\n    const viewport = this.viewport;\n    const currentPanel = viewport.getCurrentPanel();\n    const hangerPosition = viewport.getHangerPosition();\n    const anchorPosition = this.getAnchorPosition();\n    if (hangerPosition === anchorPosition || !currentPanel) {\n      return;\n    }\n\n    const currentPosition = currentPanel.getPosition();\n    const eventType = currentPosition === this.getPosition()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(this, viewport.findEstimatedPosition(this), eventType, null, duration);\n  }\n\n  public update(updateFunction: ((element: HTMLElement) => any) | null = null, shouldResize: boolean = true): void {\n    const identicalPanels = this.getIdenticalPanels();\n\n    if (updateFunction) {\n      identicalPanels.forEach(eachPanel => {\n        updateFunction(eachPanel.getElement());\n      });\n    }\n\n    if (shouldResize) {\n      identicalPanels.forEach(eachPanel => {\n        eachPanel.unCacheBbox();\n      });\n      this.viewport.addVisiblePanel(this);\n      this.viewport.resize();\n    }\n  }\n\n  public prev(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const prevSibling = this.prevSibling;\n\n    if (!prevSibling) {\n      return null;\n    }\n\n    const currentIndex = this.getIndex();\n    const currentPosition = this.getPosition();\n    const prevPanelIndex = prevSibling.getIndex();\n    const prevPanelPosition = prevSibling.getPosition();\n    const prevPanelSize = prevSibling.getSize();\n\n    const hasEmptyPanelBetween = currentIndex - prevPanelIndex > 1;\n    const notYetMinPanel = options.infinite\n      && currentIndex > 0\n      && prevPanelIndex > currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMinPanel) {\n      // Empty panel exists between\n      return null;\n    }\n\n    const newPosition = currentPosition - prevPanelSize - options.gap;\n\n    let prevPanel = prevSibling;\n    if (prevPanelPosition !== newPosition) {\n      prevPanel = prevSibling.clone(prevSibling.getCloneIndex(), true);\n      prevPanel.setPosition(newPosition);\n    }\n\n    return prevPanel;\n  }\n\n  public next(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const options = viewport.options;\n    const nextSibling = this.nextSibling;\n    const lastIndex = viewport.panelManager.getLastIndex();\n\n    if (!nextSibling) {\n      return null;\n    }\n\n    const currentIndex = this.getIndex();\n    const currentPosition = this.getPosition();\n    const nextPanelIndex = nextSibling.getIndex();\n    const nextPanelPosition = nextSibling.getPosition();\n\n    const hasEmptyPanelBetween = nextPanelIndex - currentIndex > 1;\n    const notYetMaxPanel = options.infinite\n      && currentIndex < lastIndex\n      && nextPanelIndex < currentIndex;\n\n    if (hasEmptyPanelBetween || notYetMaxPanel) {\n      return null;\n    }\n\n    const newPosition = currentPosition + this.getSize() + options.gap;\n\n    let nextPanel = nextSibling;\n    if (nextPanelPosition !== newPosition) {\n      nextPanel = nextSibling.clone(nextSibling.getCloneIndex(), true);\n      nextPanel.setPosition(newPosition);\n    }\n\n    return nextPanel;\n  }\n\n  public insertBefore(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n    const firstPanel = viewport.panelManager.firstPanel()!;\n    const prevSibling = this.prevSibling;\n    // Finding correct inserting index\n    // While it should insert removing empty spaces,\n    // It also should have to be bigger than prevSibling' s index\n    const targetIndex = prevSibling && firstPanel.getIndex() !== this.getIndex()\n      ? Math.max(prevSibling.getIndex() + 1, this.getIndex() - parsedElements.length)\n      : Math.max(this.getIndex() - parsedElements.length, 0);\n\n    return viewport.insert(targetIndex, parsedElements);\n  }\n\n  public insertAfter(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.insert(this.getIndex() + 1, element);\n  }\n\n  public remove(): FlickingPanel {\n    this.viewport.remove(this.getIndex());\n\n    return this;\n  }\n\n  public destroy(option: Partial<DestroyOption>): void {\n    if (!option.preserveUI) {\n      const originalStyle = this.state.originalStyle;\n\n      restoreStyle(this.element, originalStyle);\n    }\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public getElement(): HTMLElement {\n    return this.element;\n  }\n\n  public getAnchorPosition(): number {\n    return this.state.position + this.state.relativeAnchorPosition;\n  }\n\n  public getRelativeAnchorPosition(): number {\n    return this.state.relativeAnchorPosition;\n  }\n\n  public getIndex(): number {\n    return this.state.index;\n  }\n\n  public getPosition(): number {\n    return this.state.position;\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getBbox(): BoundingBox {\n    const state = this.state;\n    const viewport = this.viewport;\n    const element = this.element;\n    const options = viewport.options;\n\n    if (!element) {\n      state.cachedBbox = {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n      };\n    } else if (!state.cachedBbox) {\n      const wasVisible = Boolean(element.parentNode);\n      const cameraElement = viewport.getCameraElement();\n      if (!wasVisible) {\n        cameraElement.appendChild(element);\n        viewport.addVisiblePanel(this);\n      }\n      state.cachedBbox = getBbox(element, options.useOffset);\n\n      if (!wasVisible && viewport.options.renderExternal) {\n        cameraElement.removeChild(element);\n      }\n    }\n    return state.cachedBbox!;\n  }\n\n  public isClone(): boolean {\n    return this.state.isClone;\n  }\n\n  public getOverlappedClass(classes: string[]): string | undefined {\n    const element = this.element;\n\n    for (const className of classes) {\n      if (hasClass(element, className)) {\n        return className;\n      }\n    }\n  }\n\n  public getCloneIndex(): number {\n    return this.state.cloneIndex;\n  }\n\n  public getClonedPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getClonedPanels()\n      : this.clonedPanels;\n  }\n\n  public getIdenticalPanels(): Panel[] {\n    const state = this.state;\n\n    return state.isClone\n      ? this.original!.getIdenticalPanels()\n      : [this, ...this.clonedPanels];\n  }\n\n  public getOriginalPanel(): Panel {\n    return this.state.isClone\n      ? this.original!\n      : this;\n  }\n\n  public setIndex(index: number): void {\n    const state = this.state;\n\n    state.index = index;\n    this.clonedPanels.forEach(panel => panel.state.index = index);\n  }\n\n  public setPosition(pos: number): this {\n    this.state.position = pos;\n\n    return this;\n  }\n\n  public setPositionCSS(offset: number = 0): void {\n    if (!this.element) {\n      return;\n    }\n    const state = this.state;\n    const pos = state.position;\n    const options = this.viewport.options;\n    const elementStyle = this.element.style;\n    const currentElementStyle = options.horizontal\n      ? elementStyle.left\n      : elementStyle.top;\n    const styleToApply = `${pos - offset}px`;\n\n    if (!state.isVirtual && currentElementStyle !== styleToApply) {\n      options.horizontal\n        ? elementStyle.left = styleToApply\n        : elementStyle.top = styleToApply;\n    }\n  }\n\n  public clone(cloneIndex: number, isVirtual: boolean = false, element?: HTMLElement | null): Panel {\n    const state = this.state;\n    const viewport = this.viewport;\n    let cloneElement = element;\n\n    if (!cloneElement && this.element) {\n      cloneElement = isVirtual ? this.element : this.element.cloneNode(true) as HTMLElement;\n    }\n    const clonedPanel = new Panel(cloneElement, state.index, viewport);\n    const clonedState = clonedPanel.state;\n\n    clonedPanel.original = state.isClone\n      ? this.original\n      : this;\n    clonedState.isClone = true;\n    clonedState.isVirtual = isVirtual;\n    clonedState.cloneIndex = cloneIndex;\n    // Inherit some state values\n    clonedState.size = state.size;\n    clonedState.relativeAnchorPosition = state.relativeAnchorPosition;\n    clonedState.originalStyle = state.originalStyle;\n    clonedState.cachedBbox = state.cachedBbox;\n\n    if (!isVirtual) {\n      this.clonedPanels.push(clonedPanel);\n    } else {\n      clonedPanel.prevSibling = this.prevSibling;\n      clonedPanel.nextSibling = this.nextSibling;\n    }\n\n    return clonedPanel;\n  }\n\n  public removeElement(): void {\n    if (!this.viewport.options.renderExternal) {\n      const element = this.element;\n      element.parentNode && element.parentNode.removeChild(element);\n    }\n\n    // Do the same thing for clones\n    if (!this.state.isClone) {\n      this.removeClonedPanelsAfter(0);\n    }\n  }\n\n  public removeClonedPanelsAfter(start: number): void {\n    const options = this.viewport.options;\n    const removingPanels = this.clonedPanels.splice(start);\n\n    if (!options.renderExternal) {\n      removingPanels.forEach(panel => {\n        panel.removeElement();\n      });\n    }\n  }\n\n  public setElement(element?: HTMLElement | null): void {\n    if (!element) {\n      return;\n    }\n    const currentElement = this.element;\n    if (element !== currentElement) {\n      const options = this.viewport.options;\n\n      if (currentElement) {\n        if (options.horizontal) {\n          element.style.left = currentElement.style.left;\n        } else {\n          element.style.top = currentElement.style.top;\n        }\n      } else {\n        const originalStyle = this.state.originalStyle;\n\n        originalStyle.className = element.getAttribute(\"class\");\n        originalStyle.style = element.getAttribute(\"style\");\n      }\n\n      this.element = element;\n\n      if (options.classPrefix) {\n        addClass(element, `${options.classPrefix}-panel`);\n      }\n\n      // Update size info after applying panel css\n      applyCSS(this.element, DEFAULT_PANEL_CSS);\n    }\n  }\n}\n\nexport default Panel;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Panel from \"./Panel\";\nimport { FlickingOptions } from \"../types\";\nimport { findIndex, counter } from \"../utils\";\n\nclass PanelManager {\n  private cameraElement: HTMLElement;\n  private options: FlickingOptions;\n  private panels: Panel[];\n  private clones: Panel[][];\n  // index range of existing panels\n  private range: {\n    min: number;\n    max: number;\n  };\n  private length: number;\n  private lastIndex: number;\n  private cloneCount: number;\n\n  constructor(\n    cameraElement: HTMLElement,\n    options: FlickingOptions,\n  ) {\n    this.cameraElement = cameraElement;\n    this.panels = [];\n    this.clones = [];\n    this.range = {\n      min: -1,\n      max: -1,\n    };\n    this.length = 0;\n    this.cloneCount = 0;\n    this.options = options;\n    this.lastIndex = options.lastIndex;\n  }\n\n  public firstPanel(): Panel | undefined {\n    return this.panels[this.range.min];\n  }\n\n  public lastPanel(): Panel | undefined {\n    return this.panels[this.range.max];\n  }\n\n  public allPanels(): ReadonlyArray<Panel> {\n    return [\n      ...this.panels,\n      ...this.clones.reduce((allClones, clones) => [...allClones, ...clones], []),\n    ];\n  }\n\n  public originalPanels(): ReadonlyArray<Panel> {\n    return this.panels;\n  }\n\n  public clonedPanels(): ReadonlyArray<Panel[]> {\n    return this.clones;\n  }\n\n  public replacePanels(newPanels: Panel[], newClones: Panel[][]): void {\n    this.panels = newPanels;\n    this.clones = newClones;\n\n    this.range = {\n      min: findIndex(newPanels, panel => Boolean(panel)),\n      max: newPanels.length - 1,\n    };\n    this.length = newPanels.filter(panel => Boolean(panel)).length;\n  }\n\n  public has(index: number): boolean {\n    return !!this.panels[index];\n  }\n\n  public get(index: number): Panel | undefined {\n    return this.panels[index];\n  }\n\n  public getPanelCount(): number {\n    return this.length;\n  }\n\n  public getLastIndex(): number {\n    return this.lastIndex;\n  }\n\n  public getRange(): Readonly<{ min: number, max: number }> {\n    return this.range;\n  }\n\n  public getCloneCount(): number {\n    return this.cloneCount;\n  }\n\n  public setLastIndex(lastIndex: number): void {\n    this.lastIndex = lastIndex;\n\n    const firstPanel = this.firstPanel();\n    const lastPanel = this.lastPanel();\n\n    if (!firstPanel || !lastPanel) {\n      return; // no meaning of updating range & length\n    }\n\n    // Remove panels above new last index\n    const range = this.range;\n    if (lastPanel.getIndex() > lastIndex) {\n      const removingPanels = this.panels.splice(lastIndex + 1);\n      this.length -= removingPanels.length;\n\n      const firstRemovedPanel = removingPanels.filter(panel => !!panel)[0];\n      const possibleLastPanel = firstRemovedPanel.prevSibling;\n      if (possibleLastPanel) {\n        range.max = possibleLastPanel.getIndex();\n      } else {\n        range.min = -1;\n        range.max = -1;\n      }\n\n      if (this.shouldRender()) {\n        removingPanels.forEach(panel => panel.removeElement());\n      }\n    }\n  }\n\n  public setCloneCount(cloneCount: number): void {\n    this.cloneCount = cloneCount;\n  }\n\n  // Insert at index\n  // Returns pushed elements from index, inserting at 'empty' position doesn't push elements behind it\n  public insert(index: number, newPanels: Panel[]): number {\n    const panels = this.panels;\n    const range = this.range;\n    const isCircular = this.options.circular;\n    const lastIndex = this.lastIndex;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    this.insertNewPanels(newPanels, siblingElement);\n\n    let pushedIndex = newPanels.length;\n    // Like when setting index 50 while visible panels are 0, 1, 2\n    if (index > range.max) {\n      newPanels.forEach((panel, offset) => {\n        panels[index + offset] = panel;\n      });\n    } else {\n      const panelsAfterIndex = panels.slice(index, index + newPanels.length);\n      // Find empty from beginning\n      let emptyPanelCount = findIndex(panelsAfterIndex, panel => !!panel);\n      if (emptyPanelCount < 0) {\n        // All empty\n        emptyPanelCount = panelsAfterIndex.length;\n      }\n      pushedIndex = newPanels.length - emptyPanelCount;\n\n      // Insert removing empty panels\n      panels.splice(index, emptyPanelCount, ...newPanels);\n\n      // Remove panels after last index\n      if (panels.length > lastIndex + 1) {\n        const removedPanels = panels.splice(lastIndex + 1)\n          .filter(panel => Boolean(panel));\n        this.length -= removedPanels.length;\n\n        // Find first\n        const newLastIndex = lastIndex - findIndex(this.panels.concat().reverse(), panel => !!panel);\n\n        // Can be filled with empty after newLastIndex\n        this.panels.splice(newLastIndex + 1);\n        this.range.max = newLastIndex;\n\n        if (this.shouldRender()) {\n          removedPanels.forEach(panel => panel.removeElement());\n        }\n      }\n    }\n\n    // Update index of previous panels\n    if (pushedIndex > 0) {\n      panels.slice(index + newPanels.length).forEach(panel => {\n        panel.setIndex(panel.getIndex() + pushedIndex);\n      });\n    }\n\n    // Update state\n    this.length += newPanels.length;\n    this.updateIndex(index);\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length - pushedIndex, nextSibling);\n      const clones = this.clones;\n      const panelCount = this.panels.length;\n      if (clones[0] && clones[0].length > lastIndex + 1) {\n        clones.forEach(cloneSet => {\n          cloneSet.splice(panelCount);\n        });\n      }\n    }\n\n    return pushedIndex;\n  }\n\n  public replace(index: number, newPanels: Panel[]): Panel[] {\n    const panels = this.panels;\n    const range = this.range;\n    const options = this.options;\n    const isCircular = options.circular;\n\n    // Find first panel that index is greater than inserting index\n    const nextSibling = this.findFirstPanelFrom(index + newPanels.length);\n\n    // if it's null, element will be inserted at last position\n    // https://developer.mozilla.org/ko/docs/Web/API/Node/insertBefore#Syntax\n    const firstPanel = this.firstPanel();\n    const siblingElement = nextSibling\n      ? nextSibling.getElement()\n      : isCircular && firstPanel\n        ? firstPanel.getClonedPanels()[0].getElement()\n        : null;\n\n    // Insert panels before sibling element\n    this.insertNewPanels(newPanels, siblingElement);\n\n    if (index > range.max) {\n      // Temporarily insert null at index to use splice()\n      (panels[index] as any) = null;\n    }\n\n    const replacedPanels = panels.splice(index, newPanels.length, ...newPanels);\n    const wasNonEmptyCount = replacedPanels.filter(panel => Boolean(panel)).length;\n\n    // Suppose inserting [1, 2, 3] at 0 position when there were [empty, 1]\n    // So length should be increased by 3(inserting panels) - 1(non-empty panels)\n    this.length += newPanels.length - wasNonEmptyCount;\n    this.updateIndex(index);\n\n    if (isCircular) {\n      this.addNewClones(index, newPanels, newPanels.length, nextSibling);\n    }\n\n    if (this.shouldRender()) {\n      replacedPanels.forEach(panel => panel && panel.removeElement());\n    }\n\n    return replacedPanels;\n  }\n\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    const isCircular = this.options.circular;\n    const panels = this.panels;\n    const clones = this.clones;\n    // Delete count should be equal or larger than 0\n    deleteCount = Math.max(deleteCount, 0);\n\n    const deletedPanels = panels\n      .splice(index, deleteCount)\n      .filter(panel => !!panel);\n\n    if (this.shouldRender()) {\n      deletedPanels.forEach(panel => panel.removeElement());\n    }\n\n    if (isCircular) {\n      clones.forEach(cloneSet => {\n        cloneSet.splice(index, deleteCount);\n      });\n    }\n\n    // Update indexes\n    panels\n      .slice(index)\n      .forEach(panel => {\n        panel.setIndex(panel.getIndex() - deleteCount);\n      });\n\n    // Check last panel is empty\n    let lastIndex = panels.length - 1;\n    if (!panels[lastIndex]) {\n      const reversedPanels = panels.concat().reverse();\n      const nonEmptyIndexFromLast = findIndex(reversedPanels, panel => !!panel);\n      lastIndex = nonEmptyIndexFromLast < 0\n        ? -1 // All empty\n        : lastIndex - nonEmptyIndexFromLast;\n\n      // Remove all empty panels from last\n      panels.splice(lastIndex + 1);\n      if (isCircular) {\n        clones.forEach(cloneSet => {\n          cloneSet.splice(lastIndex + 1);\n        });\n      }\n    }\n\n    // Update range & length\n    this.range = {\n      min: findIndex(panels, panel => !!panel),\n      max: lastIndex,\n    };\n    this.length -= deletedPanels.length;\n\n    if (this.length <= 0) {\n      // Reset clones\n      this.clones = [];\n      this.cloneCount = 0;\n    }\n\n    return deletedPanels;\n  }\n\n  public chainAllPanels() {\n    const allPanels = this.allPanels().filter(panel => !!panel);\n    const allPanelsCount = allPanels.length;\n\n    if (allPanelsCount <= 1) {\n      return;\n    }\n\n    allPanels.slice(1, allPanels.length - 1).forEach((panel, idx) => {\n      const prevPanel = allPanels[idx];\n      const nextPanel = allPanels[idx + 2];\n\n      panel.prevSibling = prevPanel;\n      panel.nextSibling = nextPanel;\n    });\n\n    const firstPanel = allPanels[0];\n    const lastPanel = allPanels[allPanelsCount - 1];\n\n    firstPanel.prevSibling = null;\n    firstPanel.nextSibling = allPanels[1];\n    lastPanel.prevSibling = allPanels[allPanelsCount - 2];\n    lastPanel.nextSibling = null;\n\n    if (this.options.circular) {\n      firstPanel.prevSibling = lastPanel;\n      lastPanel.nextSibling = firstPanel;\n    }\n  }\n\n  public insertClones(cloneIndex: number, index: number, clonedPanels: Panel[], deleteCount: number = 0): void {\n    const clones = this.clones;\n    const lastIndex = this.lastIndex;\n\n    if (!clones[cloneIndex]) {\n      const newClones: Panel[] = [];\n      clonedPanels.forEach((panel, offset) => {\n        newClones[index + offset] = panel;\n      });\n\n      clones[cloneIndex] = newClones;\n    } else {\n      const insertTarget = clones[cloneIndex];\n\n      if (index >= insertTarget.length) {\n        clonedPanels.forEach((panel, offset) => {\n          insertTarget[index + offset] = panel;\n        });\n      } else {\n        insertTarget.splice(index, deleteCount, ...clonedPanels);\n        // Remove panels after last index\n        if (clonedPanels.length > lastIndex + 1) {\n          clonedPanels.splice(lastIndex + 1);\n        }\n      }\n    }\n  }\n\n  // clones are operating in set\n  public removeClonesAfter(cloneIndex: number): void {\n    const panels = this.panels;\n\n    panels.forEach(panel => {\n      panel.removeClonedPanelsAfter(cloneIndex);\n    });\n    this.clones.splice(cloneIndex);\n  }\n\n  public findPanelOf(element: HTMLElement): Panel | undefined {\n    const allPanels = this.allPanels();\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const panelElement = panel.getElement();\n      if (panelElement.contains(element)) {\n        return panel;\n      }\n    }\n  }\n\n  public findFirstPanelFrom(index: number): Panel | undefined {\n    for (const panel of this.panels.slice(index)) {\n      if (panel && panel.getIndex() >= index && panel.getElement().parentNode) {\n        return panel;\n      }\n    }\n  }\n\n  private addNewClones(index: number, originalPanels: Panel[], deleteCount: number, nextSibling: Panel | undefined) {\n    const cameraElement = this.cameraElement;\n    const cloneCount = this.getCloneCount();\n    const lastPanel = this.lastPanel();\n    const lastPanelClones: Panel[] = lastPanel\n      ? lastPanel.getClonedPanels()\n      : [];\n    const nextSiblingClones: Panel[] = nextSibling\n      ? nextSibling.getClonedPanels()\n      : [];\n\n    for (const cloneIndex of counter(cloneCount)) {\n      const cloneNextSibling = nextSiblingClones[cloneIndex];\n      const lastPanelSibling = lastPanelClones[cloneIndex];\n\n      const cloneSiblingElement = cloneNextSibling\n        ? cloneNextSibling.getElement()\n        : lastPanelSibling\n          ? lastPanelSibling.getElement().nextElementSibling\n          : null;\n\n      const newClones = originalPanels.map(panel => {\n        const clone = panel.clone(cloneIndex);\n\n        if (this.shouldRender()) {\n          cameraElement.insertBefore(clone.getElement(), cloneSiblingElement);\n        }\n\n        return clone;\n      });\n\n      this.insertClones(cloneIndex, index, newClones, deleteCount);\n    }\n  }\n\n  private updateIndex(insertingIndex: number) {\n    const panels = this.panels;\n    const range = this.range;\n\n    const newLastIndex = panels.length - 1;\n    if (newLastIndex > range.max) {\n      range.max = newLastIndex;\n    }\n    if (insertingIndex < range.min || range.min < 0) {\n      range.min = insertingIndex;\n    }\n  }\n\n  private insertNewPanels(newPanels: Panel[], siblingElement: HTMLElement | null) {\n    if (this.shouldRender()) {\n      const fragment = document.createDocumentFragment();\n      newPanels.forEach(panel => fragment.appendChild(panel.getElement()));\n      this.cameraElement.insertBefore(fragment, siblingElement);\n    }\n  }\n\n  private shouldRender(): boolean {\n    const options = this.options;\n\n    return !options.renderExternal && !options.renderOnlyVisible;\n  }\n}\n\nexport default PanelManager;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Panel from \"../components/Panel\";\nimport { ValueOf, Direction, StateType, FlickingContext } from \"../types\";\n\nabstract class State {\n  public delta: number = 0;\n  public direction: ValueOf<Direction> | null = null;\n  public targetPanel: Panel | null = null;\n  public lastPosition: number = 0;\n  public abstract readonly type: ValueOf<StateType>;\n  public abstract readonly holding: boolean;\n  public abstract readonly playing: boolean;\n\n  public onEnter(prevState: State): void {\n    this.delta = prevState.delta;\n    this.direction = prevState.direction;\n    this.targetPanel = prevState.targetPanel;\n    this.lastPosition = prevState.lastPosition;\n  }\n\n  public onExit(nextState: State): void {\n    // DO NOTHING\n  }\n\n  public onHold(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onChange(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onAnimationEnd(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n\n  public onFinish(e: any, context: FlickingContext): void {\n    // DO NOTHING\n  }\n}\n\nexport default State;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { EVENTS, STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass IdleState extends State {\n  public readonly type = STATE_TYPE.IDLE;\n  public readonly holding = false;\n  public readonly playing = false;\n\n  public onEnter() {\n    this.direction = null;\n    this.targetPanel = null;\n    this.delta = 0;\n    this.lastPosition = 0;\n  }\n\n  public onHold(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Shouldn't do any action until any panels on flicking area\n    if (flicking.getPanelCount() <= 0) {\n      if (viewport.options.infinite) {\n        viewport.moveCamera(viewport.getCameraPosition(), e);\n      }\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    this.lastPosition = viewport.getCameraPosition();\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.HOLDING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  // By methods call\n  public onChange(e: any, context: FlickingContext): void {\n    const { triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.MOVE_START, e, false)\n      .onSuccess(() => {\n        // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.ANIMATING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n}\n\nexport default IdleState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS, DIRECTION } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass HoldingState extends State {\n  public readonly type = STATE_TYPE.HOLDING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  private releaseEvent: any = null;\n\n  public onChange(e: any, context: FlickingContext): void {\n    const { flicking, triggerEvent, transitTo } = context;\n\n    const offset = flicking.options.horizontal\n      ? e.inputEvent.offsetX\n      : e.inputEvent.offsetY;\n    this.direction = offset < 0\n      ? DIRECTION.NEXT\n      : DIRECTION.PREV;\n\n    triggerEvent(EVENTS.MOVE_START, e, true)\n      .onSuccess(() => {\n        // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n        transitTo(STATE_TYPE.DRAGGING)\n          .onChange(e, context);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { viewport, triggerEvent, transitTo } = context;\n\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    if (e.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      e.setTo({ flick: viewport.getCameraPosition() }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't handle select event here,\n    // As \"finish\" axes event happens\n    this.releaseEvent = e;\n  }\n\n  public onFinish(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this.releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this.releaseEvent;\n\n    // Static click\n    const srcEvent = releaseEvent.inputEvent.srcEvent;\n\n    let clickedElement: HTMLElement;\n    if (srcEvent.type === \"touchend\") {\n      const touchEvent = srcEvent as TouchEvent;\n      const touch = touchEvent.changedTouches[0];\n      clickedElement = document.elementFromPoint(touch.clientX, touch.clientY) as HTMLElement;\n    } else {\n      clickedElement = srcEvent.target;\n    }\n    const clickedPanel = viewport.panelManager.findPanelOf(clickedElement);\n    const cameraPosition = viewport.getCameraPosition();\n\n    if (clickedPanel) {\n      const clickedPanelPosition = clickedPanel.getPosition();\n      const direction = clickedPanelPosition > cameraPosition\n        ? DIRECTION.NEXT\n        : clickedPanelPosition < cameraPosition\n          ? DIRECTION.PREV\n          : null;\n\n      // Don't provide axes event, to use axes instance instead\n      triggerEvent(EVENTS.SELECT, null, true, {\n        direction, // Direction to the clicked panel\n        index: clickedPanel.getIndex(),\n        panel: clickedPanel,\n      });\n    }\n  }\n}\n\nexport default HoldingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DraggingState extends State {\n  public readonly type = STATE_TYPE.DRAGGING;\n  public readonly holding = true;\n  public readonly playing = true;\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onRelease(e: any, context: FlickingContext): void {\n    const { flicking, viewport, triggerEvent, transitTo, stopCamera } = context;\n\n    const delta = this.delta;\n    const absDelta = Math.abs(delta);\n    const options = flicking.options;\n    const horizontal = options.horizontal;\n    const moveType = viewport.moveType;\n    const inputEvent = e.inputEvent;\n\n    const velocity = horizontal\n      ? inputEvent.velocityX\n      : inputEvent.velocityY;\n    const inputDelta = horizontal\n      ? inputEvent.deltaX\n      : inputEvent.deltaY;\n    const isNextDirection = Math.abs(velocity) > 1\n      ? velocity < 0\n      : absDelta > 0\n        ? delta > 0\n        : inputDelta < 0;\n\n    const swipeDistance = viewport.options.bound\n      ? Math.max(absDelta, Math.abs(inputDelta))\n      : absDelta;\n    const swipeAngle = inputEvent.deltaX\n      ? Math.abs(180 * Math.atan(inputEvent.deltaY / inputEvent.deltaX) / Math.PI)\n      : 90;\n    const belowAngleThreshold = horizontal\n      ? swipeAngle <= options.thresholdAngle\n      : swipeAngle > options.thresholdAngle;\n    const overThreshold = swipeDistance >= options.threshold\n      && belowAngleThreshold;\n\n    const moveTypeContext = {\n      viewport,\n      axesEvent: e,\n      state: this,\n      swipeDistance,\n      isNextDirection,\n    };\n\n    // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n    triggerEvent(EVENTS.HOLD_END, e, true);\n\n    const targetPanel = this.targetPanel;\n    if (!overThreshold && targetPanel) {\n      // Interrupted while animating\n      const interruptDestInfo = moveType.findPanelWhenInterrupted(moveTypeContext);\n\n      viewport.moveTo(\n        interruptDestInfo.panel,\n        interruptDestInfo.destPos,\n        interruptDestInfo.eventType,\n        e,\n        interruptDestInfo.duration,\n      );\n      transitTo(STATE_TYPE.ANIMATING);\n      return;\n    }\n\n    const currentPanel = viewport.getCurrentPanel();\n    const nearestPanel = viewport.getNearestPanel();\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      e.stop();\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    const destInfo = overThreshold\n      ? moveType.findTargetPanel(moveTypeContext)\n      : moveType.findRestorePanel(moveTypeContext);\n\n    viewport.moveTo(\n      destInfo.panel,\n      destInfo.destPos,\n      destInfo.eventType,\n      e,\n      destInfo.duration,\n    ).onSuccess(() => {\n      transitTo(STATE_TYPE.ANIMATING);\n    }).onStopped(() => {\n      transitTo(STATE_TYPE.DISABLED);\n      stopCamera(e);\n    });\n  }\n}\n\nexport default DraggingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE, EVENTS } from \"../consts\";\nimport { FlickingContext } from \"../types\";\nimport { circulate } from \"../utils\";\n\nclass AnimatingState extends State {\n  public readonly type = STATE_TYPE.ANIMATING;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onHold(e: any, { viewport, triggerEvent, transitTo }: FlickingContext): void {\n    const options = viewport.options;\n    const scrollArea = viewport.getScrollArea();\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const loopCount = Math.floor((this.lastPosition + this.delta - scrollArea.prev) / scrollAreaSize);\n\n    const targetPanel = this.targetPanel;\n    if (options.circular && loopCount !== 0 && targetPanel) {\n      const cloneCount = viewport.panelManager.getCloneCount();\n      const originalTargetPosition = targetPanel.getPosition();\n\n      // cloneIndex is from -1 to cloneCount - 1\n      const newCloneIndex = circulate(targetPanel.getCloneIndex() - loopCount, -1, cloneCount - 1, true);\n      const newTargetPosition = originalTargetPosition - loopCount * scrollAreaSize;\n      const newTargetPanel = targetPanel.getIdenticalPanels()[newCloneIndex + 1].clone(newCloneIndex, true);\n\n      // Set new target panel considering looped count\n      newTargetPanel.setPosition(newTargetPosition);\n      this.targetPanel = newTargetPanel;\n    }\n\n    // Reset last position and delta\n    this.delta = 0;\n    this.lastPosition = viewport.getCameraPosition();\n\n    // Update current panel as current nearest panel\n    viewport.setCurrentPanel(viewport.getNearestPanel()!);\n    triggerEvent(EVENTS.HOLD_START, e, true)\n      .onSuccess(() => {\n        transitTo(STATE_TYPE.DRAGGING);\n      })\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onChange(e: any, { moveCamera, transitTo }: FlickingContext): void {\n    if (!e.delta.flick) {\n      return;\n    }\n\n    moveCamera(e)\n      .onStopped(() => {\n        transitTo(STATE_TYPE.DISABLED);\n      });\n  }\n\n  public onFinish(e: any, { flicking, viewport, triggerEvent, transitTo }: FlickingContext) {\n    const isTrusted = e && e.isTrusted;\n\n    viewport.options.bound\n      ? viewport.setCurrentPanel(this.targetPanel!)\n      : viewport.setCurrentPanel(viewport.getNearestPanel()!);\n\n    if (flicking.options.adaptive) {\n      viewport.updateAdaptiveSize();\n    }\n\n    transitTo(STATE_TYPE.IDLE);\n    viewport.updateCameraPosition();\n    triggerEvent(EVENTS.MOVE_END, e, isTrusted, {\n      direction: this.direction,\n    });\n  }\n}\n\nexport default AnimatingState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"./State\";\nimport { STATE_TYPE } from \"../consts\";\nimport { FlickingContext } from \"../types\";\n\nclass DisabledState extends State {\n  public readonly type = STATE_TYPE.DISABLED;\n  public readonly holding = false;\n  public readonly playing = true;\n\n  public onAnimationEnd(e: any, { transitTo }: FlickingContext): void {\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onChange(e: any, { viewport, transitTo }: FlickingContext): void {\n    // Can stop Axes's change event\n    e.stop();\n\n    // Should update axes position as it's already changed at this moment\n    viewport.updateAxesPosition(viewport.getCameraPosition());\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(e: any, { transitTo }: FlickingContext): void {\n    // This is needed when stopped hold start event\n    if (e.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport State from \"../states/State\";\nimport { AxesEventType, ValueOf, FlickingContext, StateType } from \"../types\";\nimport { AXES_EVENTS, STATE_TYPE } from \"../consts\";\nimport IdleState from \"../states/IdleState\";\nimport HoldingState from \"../states/HoldingState\";\nimport DraggingState from \"../states/DraggingState\";\nimport AnimatingState from \"../states/AnimatingState\";\nimport DisabledState from \"../states/DisabledState\";\n\nclass StateMachine {\n  private state: State = new IdleState();\n\n  public fire(eventType: ValueOf<AxesEventType>, e: any, context: FlickingContext) {\n    const currentState = this.state;\n    switch (eventType) {\n      case AXES_EVENTS.HOLD:\n        currentState.onHold(e, context);\n        break;\n      case AXES_EVENTS.CHANGE:\n        currentState.onChange(e, context);\n        break;\n      case AXES_EVENTS.RELEASE:\n        currentState.onRelease(e, context);\n        break;\n      case AXES_EVENTS.ANIMATION_END:\n        currentState.onAnimationEnd(e, context);\n        break;\n      case AXES_EVENTS.FINISH:\n        currentState.onFinish(e, context);\n        break;\n    }\n  }\n\n  public getState(): State {\n    return this.state;\n  }\n\n  public transitTo = (nextStateType: ValueOf<StateType>): State => {\n    const currentState = this.state;\n\n    if (currentState.type !== nextStateType) {\n      let nextState: State;\n\n      switch (nextStateType) {\n        case STATE_TYPE.IDLE:\n          nextState = new IdleState();\n          break;\n        case STATE_TYPE.HOLDING:\n          nextState = new HoldingState();\n          break;\n        case STATE_TYPE.DRAGGING:\n          nextState = new DraggingState();\n          break;\n        case STATE_TYPE.ANIMATING:\n          nextState = new AnimatingState();\n          break;\n        case STATE_TYPE.DISABLED:\n          nextState = new DisabledState();\n          break;\n      }\n\n      currentState.onExit(nextState!);\n      nextState!.onEnter(currentState);\n\n      this.state = nextState!;\n    }\n    return this.state;\n  }\n}\n\nexport default StateMachine;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport MoveType from \"./MoveType\";\nimport { MOVE_TYPE, EVENTS } from \"../consts\";\nimport { MoveTypeContext, DestinationInfo } from \"../types\";\nimport { clamp } from \"../utils\";\n\nclass Snap extends MoveType {\n  protected readonly type: string = MOVE_TYPE.SNAP;\n  protected count: number;\n\n  constructor(count: number) {\n    super();\n    this.count = count;\n  }\n\n  public findTargetPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport, axesEvent, swipeDistance } = ctx;\n    const snapCount = this.count;\n    const eventDelta = Math.abs(axesEvent.delta.flick);\n    const currentPanel = viewport.getCurrentPanel()!;\n    const nearestPanel = viewport.getNearestPanel()!;\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    const nearestIsCurrent = nearestPanel.getIndex() === currentPanel.getIndex();\n\n    // This can happen when bounce is 0\n    const shouldMoveWhenBounceIs0 = viewport.canSetBoundMode() && nearestIsCurrent;\n    const shouldMoveToAdjacent = !viewport.isOutOfBound()\n      && (swipeDistance <= minimumDistanceToChange || shouldMoveWhenBounceIs0);\n\n    if (snapCount > 1 && eventDelta > minimumDistanceToChange) {\n      return this.findSnappedPanel(ctx);\n    } else if (shouldMoveToAdjacent) {\n      return this.findAdjacentPanel(ctx);\n    } else {\n      return {\n        panel: nearestPanel,\n        duration: viewport.options.duration,\n        destPos: viewport.findEstimatedPosition(nearestPanel),\n        // As swipeDistance holds mouse/touch position change regardless of bounce option value\n        // swipDistance > minimumDistanceToChange can happen in bounce area\n        // Second condition is for handling that.\n        eventType: (swipeDistance <= minimumDistanceToChange)\n          || (viewport.isOutOfBound() && nearestIsCurrent)\n          ? EVENTS.RESTORE\n          : EVENTS.CHANGE,\n      };\n    }\n  }\n\n  protected findSnappedPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { axesEvent, viewport, state, isNextDirection } = ctx;\n\n    const eventDelta = Math.abs(axesEvent.delta.flick);\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    const snapCount = this.count;\n    const options = viewport.options;\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    const halfGap = options.gap / 2;\n    const estimatedHangerPos = axesEvent.destPos.flick + viewport.getRelativeHangerPosition();\n\n    let panelToMove = viewport.getNearestPanel()!;\n    let cycleIndex = panelToMove.getCloneIndex() + 1; // 0(original) or 1(clone)\n    let passedPanelCount = 0;\n\n    while (passedPanelCount < snapCount) {\n      // Since panelToMove holds also cloned panels, we should use original panel's position\n      const originalPanel = panelToMove.getOriginalPanel();\n      const panelPosition = originalPanel.getPosition() + cycleIndex * scrollAreaSize;\n      const panelSize = originalPanel.getSize();\n\n      const panelNextPosition = panelPosition + panelSize + halfGap;\n      const panelPrevPosition = panelPosition - halfGap;\n\n      // Current panelToMove contains destPos\n      if (\n        (isNextDirection && panelNextPosition > estimatedHangerPos)\n        || (!isNextDirection && panelPrevPosition < estimatedHangerPos)\n      ) {\n        break;\n      }\n\n      const siblingPanel = isNextDirection\n        ? panelToMove.nextSibling\n        : panelToMove.prevSibling;\n      if (!siblingPanel) {\n        break;\n      }\n\n      const panelIndex = panelToMove.getIndex();\n      const siblingIndex = siblingPanel.getIndex();\n      if ((isNextDirection && siblingIndex <= panelIndex)\n        || (!isNextDirection && siblingIndex >= panelIndex)\n      ) {\n        cycleIndex = isNextDirection\n          ? cycleIndex + 1\n          : cycleIndex - 1;\n      }\n      panelToMove = siblingPanel;\n      passedPanelCount += 1;\n    }\n\n    const originalPosition = panelToMove.getOriginalPanel().getPosition();\n\n    if (cycleIndex !== 0) {\n      panelToMove = panelToMove.clone(panelToMove.getCloneIndex(), true);\n      panelToMove.setPosition(originalPosition + cycleIndex * scrollAreaSize);\n    }\n\n    const defaultDuration = viewport.options.duration;\n    const duration = clamp(axesEvent.duration, defaultDuration, defaultDuration * passedPanelCount);\n\n    return {\n      panel: panelToMove,\n      destPos: viewport.findEstimatedPosition(panelToMove),\n      duration,\n      eventType: Math.max(eventDelta, state.delta) > minimumDistanceToChange\n        ? EVENTS.CHANGE\n        : EVENTS.RESTORE,\n    };\n  }\n\n  private findAdjacentPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentIndex = viewport.getCurrentIndex();\n    const currentPanel = viewport.panelManager.get(currentIndex)!;\n    const hangerPosition = viewport.getHangerPosition();\n    const scrollArea = viewport.getScrollArea();\n\n    const firstClonedPanel = currentPanel.getIdenticalPanels()[1];\n    const lapped = options.circular\n      && (Math.abs(currentPanel.getAnchorPosition() - hangerPosition)\n        > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition));\n\n    // If lapped in circular mode, use first cloned panel as base panel\n    const basePanel = lapped\n      ? firstClonedPanel\n      : currentPanel;\n    const basePosition = basePanel.getPosition();\n\n    const adjacentPanel = isNextDirection\n      ? basePanel.nextSibling\n      : basePanel.prevSibling;\n\n    const eventType = adjacentPanel\n      ? EVENTS.CHANGE\n      : EVENTS.RESTORE;\n    const panelToMove = adjacentPanel\n      ? adjacentPanel\n      : basePanel;\n    const targetRelativeAnchorPosition = panelToMove.getRelativeAnchorPosition();\n\n    const estimatedPanelPosition = options.circular\n      ? isNextDirection\n        ? basePosition + basePanel.getSize() + targetRelativeAnchorPosition + options.gap\n        : basePosition - (panelToMove.getSize() - targetRelativeAnchorPosition) - options.gap\n      : panelToMove.getAnchorPosition();\n    const estimatedPosition = estimatedPanelPosition - viewport.getRelativeHangerPosition();\n    const destPos = viewport.canSetBoundMode()\n      ? clamp(estimatedPosition, scrollArea.prev, scrollArea.next)\n      : estimatedPosition;\n\n    return {\n      panel: panelToMove,\n      destPos,\n      duration: options.duration,\n      eventType,\n    };\n  }\n}\n\nexport default Snap;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport { MoveTypeStringOption, MoveTypeContext, DestinationInfo } from \"../types\";\nimport Panel from \"../components/Panel\";\nimport { EVENTS } from \"../consts\";\n\nabstract class MoveType {\n  protected readonly abstract type: string;\n\n  public abstract findTargetPanel(ctx: MoveTypeContext): DestinationInfo;\n\n  public is(type: MoveTypeStringOption): boolean {\n    return type === this.type;\n  }\n\n  public findRestorePanel(ctx: MoveTypeContext): DestinationInfo {\n    const viewport = ctx.viewport;\n    const options = viewport.options;\n\n    const panel = options.circular\n      ? this.findRestorePanelInCircularMode(ctx)\n      : viewport.getCurrentPanel()!;\n\n    return {\n      panel,\n      destPos: viewport.findEstimatedPosition(panel),\n      duration: options.duration,\n      eventType: EVENTS.RESTORE,\n    };\n  }\n\n  public findPanelWhenInterrupted(ctx: MoveTypeContext): DestinationInfo {\n    const { state, viewport } = ctx;\n    const targetPanel = state.targetPanel!;\n\n    return {\n      panel: targetPanel,\n      destPos: viewport.findEstimatedPosition(targetPanel),\n      duration: viewport.options.duration,\n      eventType: \"\",\n    };\n  }\n\n  // Calculate minimum distance to \"change\" panel\n  protected calcBrinkOfChange(ctx: MoveTypeContext): number {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentPanel = viewport.getCurrentPanel()!;\n    const halfGap = options.gap / 2;\n\n    const relativeAnchorPosition = currentPanel.getRelativeAnchorPosition();\n\n    // Minimum distance needed to decide prev/next panel as nearest\n    /*\n     * |  Prev  |     Next     |\n     * |--------|--------------|\n     * [][      |<-Anchor    ][] <- Panel + Half-Gap\n     */\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanel.getSize() - relativeAnchorPosition + halfGap\n      : relativeAnchorPosition + halfGap;\n\n    minimumDistanceToChange = Math.max(minimumDistanceToChange, options.threshold);\n\n    return minimumDistanceToChange;\n  }\n\n  private findRestorePanelInCircularMode(ctx: MoveTypeContext): Panel {\n    const viewport = ctx.viewport;\n    const originalPanel = viewport.getCurrentPanel()!.getOriginalPanel();\n    const hangerPosition = viewport.getHangerPosition();\n\n    const firstClonedPanel = originalPanel.getIdenticalPanels()[1];\n    const lapped = Math.abs(originalPanel.getAnchorPosition() - hangerPosition)\n      > Math.abs(firstClonedPanel.getAnchorPosition() - hangerPosition);\n\n    return (!ctx.isNextDirection && lapped)\n      ? firstClonedPanel\n      : originalPanel;\n  }\n}\n\nexport default MoveType;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Snap from \"./Snap\";\nimport { MOVE_TYPE, EVENTS } from \"../consts\";\nimport { MoveTypeContext, DestinationInfo } from \"../types\";\nimport { circulate, clamp } from \"../utils\";\n\nclass FreeScroll extends Snap {\n  protected readonly type: string = MOVE_TYPE.FREE_SCROLL;\n\n  constructor() {\n    // Set snap count to Infinity\n    super(Infinity);\n  }\n\n  public findTargetPanel(ctx: MoveTypeContext): DestinationInfo {\n    const { axesEvent, state, viewport } = ctx;\n    const destPos = axesEvent.destPos.flick;\n    const minimumDistanceToChange = this.calcBrinkOfChange(ctx);\n    const scrollArea = viewport.getScrollArea();\n    const currentPanel = viewport.getCurrentPanel()!;\n    const options = viewport.options;\n\n    const delta = Math.abs(axesEvent.delta.flick + state.delta);\n    if (delta > minimumDistanceToChange) {\n      const destInfo = super.findSnappedPanel(ctx);\n\n      destInfo.duration = axesEvent.duration;\n      destInfo.destPos = destPos;\n      destInfo.eventType = !options.circular && destInfo.panel === currentPanel\n        ? \"\"\n        : EVENTS.CHANGE;\n\n      return destInfo;\n    } else {\n      let estimatedPosition = options.circular\n        ? circulate(destPos, scrollArea.prev, scrollArea.next, false)\n        : destPos;\n      estimatedPosition = clamp(estimatedPosition, scrollArea.prev, scrollArea.next);\n      estimatedPosition += viewport.getRelativeHangerPosition();\n\n      const estimatedPanel = viewport.findNearestPanelAt(estimatedPosition)!;\n\n      return {\n        panel: estimatedPanel,\n        destPos,\n        duration: axesEvent.duration,\n        eventType: \"\",\n      };\n    }\n  }\n\n  public findRestorePanel(ctx: MoveTypeContext): DestinationInfo {\n    return this.findTargetPanel(ctx);\n  }\n\n  public findPanelWhenInterrupted(ctx: MoveTypeContext): DestinationInfo {\n    const { viewport } = ctx;\n\n    return {\n      panel: viewport.getNearestPanel()!,\n      destPos: viewport.getCameraPosition(),\n      duration: 0,\n      eventType: \"\",\n    };\n  }\n\n  protected calcBrinkOfChange(ctx: MoveTypeContext): number {\n    const { viewport, isNextDirection } = ctx;\n\n    const options = viewport.options;\n    const currentPanel = viewport.getCurrentPanel()!;\n    const halfGap = options.gap / 2;\n\n    const lastPosition = viewport.stateMachine.getState().lastPosition;\n    const currentPanelPosition = currentPanel.getPosition();\n\n    // As camera can stop anywhere in free scroll mode,\n    // minimumDistanceToChange should be calculated differently.\n    // Ref #191(https://github.com/naver/egjs-flicking/issues/191)\n    const lastHangerPosition = lastPosition + viewport.getRelativeHangerPosition();\n\n    const scrollAreaSize = viewport.getScrollAreaSize();\n    let minimumDistanceToChange = isNextDirection\n      ? currentPanelPosition + currentPanel.getSize() - lastHangerPosition + halfGap\n      : lastHangerPosition - currentPanelPosition + halfGap;\n    minimumDistanceToChange = Math.abs(minimumDistanceToChange % scrollAreaSize);\n\n    return Math.min(minimumDistanceToChange, scrollAreaSize - minimumDistanceToChange);\n  }\n}\n\nexport default FreeScroll;\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Axes, { PanInput } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport Panel from \"./Panel\";\nimport PanelManager from \"./PanelManager\";\nimport StateMachine from \"./StateMachine\";\nimport MoveType from \"../moves/MoveType\";\nimport { FlickingOptions, FlickingPanel, FlickingStatus, ElementLike, EventType, TriggerCallback, NeedPanelEvent, FlickingEvent, MoveTypeObjectOption, OriginalStyle, Plugin, DestroyOption, BoundingBox } from \"../types\";\nimport { DEFAULT_VIEWPORT_CSS, DEFAULT_CAMERA_CSS, TRANSFORM, DEFAULT_OPTIONS, EVENTS, DIRECTION, STATE_TYPE, MOVE_TYPE } from \"../consts\";\nimport { clamp, applyCSS, toArray, parseArithmeticExpression, isBetween, isArray, parseElement, hasClass, restoreStyle, circulate, findIndex, getBbox } from \"../utils\";\nimport Snap from \"../moves/Snap\";\nimport FreeScroll from \"../moves/FreeScroll\";\n\nexport default class Viewport {\n  public options: FlickingOptions;\n  public stateMachine: StateMachine;\n  public panelManager: PanelManager;\n  public moveType: MoveType;\n\n  private flicking: Flicking;\n  private axes: Axes;\n  private panInput: PanInput;\n\n  private viewportElement: HTMLElement;\n  private cameraElement: HTMLElement;\n\n  private triggerEvent: Flicking[\"triggerEvent\"];\n  private axesHandlers: { [key: string]: any };\n\n  private currentPanel: Panel | undefined;\n  private nearestPanel: Panel | undefined;\n  private visiblePanels: Panel[];\n\n  private plugins: Plugin[] = [];\n  private panelBboxes: { [className: string]: BoundingBox };\n  private state: {\n    size: number;\n    position: number;\n    panelMaintainRatio: number;\n    relativeHangerPosition: number;\n    positionOffset: number;\n    scrollArea: {\n      prev: number;\n      next: number;\n    };\n    translate: {\n      name: string,\n      has3d: boolean,\n    };\n    infiniteThreshold: number;\n    checkedIndexes: Array<[number, number]>;\n    isAdaptiveCached: boolean;\n    isViewportGiven: boolean;\n    isCameraGiven: boolean;\n    originalViewportStyle: OriginalStyle;\n    originalCameraStyle: OriginalStyle;\n    cachedBbox: BoundingBox | null;\n  };\n\n  constructor(\n    flicking: Flicking,\n    options: FlickingOptions,\n    triggerEvent: Flicking[\"triggerEvent\"],\n  ) {\n    this.flicking = flicking;\n    this.triggerEvent = triggerEvent;\n\n    this.state = {\n      size: 0,\n      position: 0,\n      panelMaintainRatio: 0,\n      relativeHangerPosition: 0,\n      positionOffset: 0,\n      scrollArea: {\n        prev: 0,\n        next: 0,\n      },\n      translate: TRANSFORM,\n      infiniteThreshold: 0,\n      checkedIndexes: [],\n      isAdaptiveCached: false,\n      isViewportGiven: false,\n      isCameraGiven: false,\n      originalViewportStyle: {\n        className: null,\n        style: null,\n      },\n      originalCameraStyle: {\n        className: null,\n        style: null,\n      },\n      cachedBbox: null,\n    };\n    this.options = options;\n    this.stateMachine = new StateMachine();\n    this.visiblePanels = [];\n    this.panelBboxes = {};\n\n    this.build();\n  }\n\n  public moveTo(\n    panel: Panel,\n    destPos: number,\n    eventType: EventType[\"CHANGE\"] | EventType[\"RESTORE\"] | \"\",\n    axesEvent: any,\n    duration: number = this.options.duration,\n  ): TriggerCallback {\n    const state = this.state;\n    const currentState = this.stateMachine.getState();\n    const currentPosition = state.position;\n\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n    const direction = destPos === currentPosition\n      ? null\n      : destPos > currentPosition\n        ? DIRECTION.NEXT\n        : DIRECTION.PREV;\n\n    let eventResult: TriggerCallback;\n    if (eventType === EVENTS.CHANGE) {\n      eventResult = this.triggerEvent(EVENTS.CHANGE, axesEvent, isTrusted, {\n        index: panel.getIndex(),\n        panel,\n        direction,\n      });\n    } else if (eventType === EVENTS.RESTORE) {\n      eventResult = this.triggerEvent(EVENTS.RESTORE, axesEvent, isTrusted);\n    } else {\n      eventResult = {\n        onSuccess(callback: () => void): TriggerCallback {\n          callback();\n          return this;\n        },\n        onStopped(): TriggerCallback {\n          return this;\n        },\n      };\n    }\n\n    eventResult.onSuccess(() => {\n      currentState.delta = 0;\n      currentState.lastPosition = this.getCameraPosition();\n      currentState.targetPanel = panel;\n      currentState.direction = destPos === currentPosition\n        ? null\n        : destPos > currentPosition\n          ? DIRECTION.NEXT\n          : DIRECTION.PREV;\n\n      if (destPos === currentPosition) {\n        // no move\n        this.nearestPanel = panel;\n        this.currentPanel = panel;\n      }\n\n      if (axesEvent && axesEvent.setTo) {\n        // freeScroll only occurs in release events\n        axesEvent.setTo({ flick: destPos }, duration);\n      } else {\n        this.axes.setTo({ flick: destPos }, duration);\n      }\n    });\n\n    return eventResult;\n  }\n\n  public moveCamera(pos: number, axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const transform = state.translate.name;\n    const scrollArea = state.scrollArea;\n\n    // Update position & nearestPanel\n    if (options.circular && !isBetween(pos, scrollArea.prev, scrollArea.next)) {\n      pos = circulate(pos, scrollArea.prev, scrollArea.next, false);\n    }\n    state.position = pos;\n    this.nearestPanel = this.findNearestPanel();\n    const nearestPanel = this.nearestPanel;\n    const originalNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    // From 0(panel position) to 1(panel position + panel size)\n    // When it's on gap area value will be (val > 1 || val < 0)\n    if (nearestPanel) {\n      const hangerPosition = this.getHangerPosition();\n      const panelPosition = nearestPanel.getPosition();\n      const panelSize = nearestPanel.getSize();\n      const halfGap = options.gap / 2;\n\n      // As panel's range is from panel position - half gap ~ panel pos + panel size + half gap\n      state.panelMaintainRatio = (hangerPosition - panelPosition + halfGap) / (panelSize + 2 * halfGap);\n    } else {\n      state.panelMaintainRatio = 0;\n    }\n\n    this.checkNeedPanel(axesEvent);\n\n    // Possibly modified after need panel, if it's looped\n    const modifiedNearestPosition = nearestPanel\n      ? nearestPanel.getPosition()\n      : 0;\n\n    pos += (modifiedNearestPosition - originalNearestPosition);\n    state.position = pos;\n\n    this.updateVisiblePanels();\n\n    // Offset is needed to fix camera layer size in visible-only rendering mode\n    const posOffset = options.renderOnlyVisible\n      ? state.positionOffset\n      : 0;\n    const moveVector = options.horizontal\n      ? [-(pos - posOffset), 0] : [0, -(pos - posOffset)];\n    const moveCoord = moveVector.map(coord => `${Math.round(coord)}px`).join(\", \");\n\n    this.cameraElement.style[transform] = state.translate.has3d\n      ? `translate3d(${moveCoord}, 0px)`\n      : `translate(${moveCoord})`;\n  }\n\n  public stopCamera = (axesEvent: any): void => {\n    if (axesEvent && axesEvent.setTo) {\n      axesEvent.setTo({ flick: this.state.position }, 0);\n    }\n\n    this.stateMachine.transitTo(STATE_TYPE.IDLE);\n  }\n\n  public unCacheBbox(): void {\n    const state = this.state;\n    const options = this.options;\n\n    state.cachedBbox = null;\n    this.visiblePanels = [];\n\n    const viewportElement = this.viewportElement;\n    if (!options.horizontal) {\n      // Don't preserve previous width for adaptive resizing\n      viewportElement.style.width = \"\";\n    } else {\n      viewportElement.style.height = \"\";\n    }\n    state.isAdaptiveCached = false;\n    this.panelBboxes = {};\n  }\n\n  public resize(): void {\n    this.updateSize();\n    this.updateOriginalPanelPositions();\n    this.updateAdaptiveSize();\n    this.updateScrollArea();\n    this.updateClonePanels();\n    this.updateCameraPosition();\n    this.updatePlugins();\n  }\n\n  // Find nearest anchor from current hanger position\n  public findNearestPanel(): Panel | undefined {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const hangerPosition = this.getHangerPosition();\n\n    if (this.isOutOfBound()) {\n      const position = state.position;\n\n      return position <= state.scrollArea.prev\n        ? panelManager.firstPanel()\n        : panelManager.lastPanel();\n    }\n\n    return this.findNearestPanelAt(hangerPosition);\n  }\n\n  public findNearestPanelAt(position: number): Panel | undefined {\n    const panelManager = this.panelManager;\n\n    const allPanels = panelManager.allPanels();\n    let minimumDistance = Infinity;\n    let nearestPanel: Panel | undefined;\n\n    for (const panel of allPanels) {\n      if (!panel) {\n        continue;\n      }\n      const prevPosition = panel.getPosition();\n      const nextPosition = prevPosition + panel.getSize();\n\n      // Use shortest distance from panel's range\n      const distance = isBetween(position, prevPosition, nextPosition)\n        ? 0\n        : Math.min(\n          Math.abs(prevPosition - position),\n          Math.abs(nextPosition - position),\n        );\n\n      if (distance > minimumDistance) {\n        break;\n      } else if (distance === minimumDistance) {\n        const minimumAnchorDistance = Math.abs(position - nearestPanel!.getAnchorPosition());\n        const anchorDistance = Math.abs(position - panel.getAnchorPosition());\n\n        if (anchorDistance > minimumAnchorDistance) {\n          break;\n        }\n      }\n\n      minimumDistance = distance;\n      nearestPanel = panel;\n    }\n\n    return nearestPanel;\n  }\n\n  public findNearestIdenticalPanel(panel: Panel): Panel {\n    let nearest = panel;\n    let shortestDistance = Infinity;\n    const hangerPosition = this.getHangerPosition();\n\n    const identicals = panel.getIdenticalPanels();\n    identicals.forEach(identical => {\n      const anchorPosition = identical.getAnchorPosition();\n      const distance = Math.abs(anchorPosition - hangerPosition);\n\n      if (distance < shortestDistance) {\n        nearest = identical;\n        shortestDistance = distance;\n      }\n    });\n\n    return nearest;\n  }\n\n  // Find shortest camera position that distance is minimum\n  public findShortestPositionToPanel(panel: Panel): number {\n    const state = this.state;\n    const options = this.options;\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = this.getHangerPosition();\n    const distance = Math.abs(hangerPosition - anchorPosition);\n    const scrollAreaSize = state.scrollArea.next - state.scrollArea.prev;\n\n    if (!options.circular) {\n      const position = anchorPosition - state.relativeHangerPosition;\n      return this.canSetBoundMode()\n        ? clamp(position, state.scrollArea.prev, state.scrollArea.next)\n        : position;\n    } else {\n      // If going out of viewport border is more efficient way of moving, choose that position\n      return distance <= scrollAreaSize - distance\n        ? anchorPosition - state.relativeHangerPosition\n        : anchorPosition > hangerPosition\n          // PREV TO NEXT\n          ? anchorPosition - state.relativeHangerPosition - scrollAreaSize\n          // NEXT TO PREV\n          : anchorPosition - state.relativeHangerPosition + scrollAreaSize;\n    }\n  }\n\n  public findEstimatedPosition(panel: Panel): number {\n    const scrollArea = this.getScrollArea();\n\n    let estimatedPosition = panel.getAnchorPosition() - this.getRelativeHangerPosition();\n    estimatedPosition = this.canSetBoundMode()\n      ? clamp(estimatedPosition, scrollArea.prev, scrollArea.next)\n      : estimatedPosition;\n\n    return estimatedPosition;\n  }\n\n  public addVisiblePanel(panel: Panel): void {\n    if (this.getVisibleIndexOf(panel) < 0) {\n      this.visiblePanels.push(panel);\n    }\n  }\n\n  public enable(): void {\n    this.panInput.enable();\n  }\n\n  public disable(): void {\n    this.panInput.disable();\n  }\n\n  public insert(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const lastIndex = this.panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const state = this.state;\n    const options = this.options;\n    const parsedElements = parseElement(element);\n\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    const pushedIndex = this.panelManager.insert(index, panels);\n\n    // ...then calc bbox for all panels\n    this.resizePanels(panels);\n\n    if (!this.currentPanel) {\n      this.currentPanel = panels[0];\n      this.nearestPanel = panels[0];\n\n      const newCenterPanel = panels[0];\n      const newPanelPosition = this.findEstimatedPosition(newCenterPanel);\n      state.position = newPanelPosition;\n      this.updateAxesPosition(newPanelPosition);\n      state.panelMaintainRatio = (newCenterPanel.getRelativeAnchorPosition() + options.gap / 2) / (newCenterPanel.getSize() + options.gap);\n    }\n\n    // Update checked indexes in infinite mode\n    this.updateCheckedIndexes({ min: index, max: index });\n    state.checkedIndexes.forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      if (index < min) {\n        // Push checked index\n        state.checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n      }\n    });\n\n    this.resize();\n\n    return panels;\n  }\n\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const lastIndex = panelManager.getLastIndex();\n\n    // Index should not below 0\n    if (index < 0 || index > lastIndex) {\n      return [];\n    }\n\n    const parsedElements = parseElement(element);\n    const panels = parsedElements\n      .map((el, idx) => new Panel(el, index + idx, this))\n      .slice(0, lastIndex - index + 1);\n\n    if (panels.length <= 0) {\n      return [];\n    }\n\n    const replacedPanels = panelManager.replace(index, panels);\n\n    replacedPanels.forEach(panel => {\n      const visibleIndex = this.getVisibleIndexOf(panel);\n      if (visibleIndex > -1) {\n        this.visiblePanels.splice(visibleIndex, 1);\n      }\n    });\n\n    // ...then calc bbox for all panels\n    this.resizePanels(panels);\n\n    const currentPanel = this.currentPanel;\n    const wasEmpty = !currentPanel;\n    if (wasEmpty) {\n      this.currentPanel = panels[0];\n      this.nearestPanel = panels[0];\n\n      const newCenterPanel = panels[0];\n      const newPanelPosition = this.findEstimatedPosition(newCenterPanel);\n      state.position = newPanelPosition;\n      this.updateAxesPosition(newPanelPosition);\n      state.panelMaintainRatio = (newCenterPanel.getRelativeAnchorPosition() + options.gap / 2) / (newCenterPanel.getSize() + options.gap);\n    } else if (isBetween(currentPanel!.getIndex(), index, index + panels.length - 1)) {\n      // Current panel is replaced\n      this.currentPanel = panelManager.get(currentPanel!.getIndex());\n    }\n\n    // Update checked indexes in infinite mode\n    this.updateCheckedIndexes({ min: index, max: index + panels.length - 1 });\n\n    this.resize();\n\n    return panels;\n  }\n\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    const state = this.state;\n    // Index should not below 0\n    index = Math.max(index, 0);\n\n    const panelManager = this.panelManager;\n    const currentIndex = this.getCurrentIndex();\n\n    const removedPanels = panelManager.remove(index, deleteCount);\n    if (isBetween(currentIndex, index, index + deleteCount - 1)) {\n      // Current panel is removed\n      // Use panel at removing index - 1 as new current panel if it exists\n      const newCurrentIndex = Math.max(index - 1, panelManager.getRange().min);\n      this.currentPanel = panelManager.get(newCurrentIndex);\n    }\n\n    // Update checked indexes in infinite mode\n    if (deleteCount > 0) {\n      // Check whether removing index will affect checked indexes\n      // Suppose index 0 is empty and removed index 1, then checked index 0 should be deleted and vice versa.\n      this.updateCheckedIndexes({ min: index - 1, max: index + deleteCount });\n      // Uncache visible panels to refresh panels\n      this.visiblePanels = [];\n    }\n\n    if (panelManager.getPanelCount() <= 0) {\n      this.currentPanel = undefined;\n      this.nearestPanel = undefined;\n    }\n\n    this.resize();\n\n    const scrollArea = state.scrollArea;\n    if (state.position < scrollArea.prev || state.position > scrollArea.next) {\n      const newPosition = circulate(state.position, scrollArea.prev, scrollArea.next, false);\n      this.moveCamera(newPosition);\n      this.updateAxesPosition(newPosition);\n    }\n\n    return removedPanels;\n  }\n\n  public updateAdaptiveSize(): void {\n    const state = this.state;\n    const options = this.options;\n    const horizontal = options.horizontal;\n    const currentPanel = this.getCurrentPanel();\n\n    if (!currentPanel) {\n      return;\n    }\n\n    const shouldApplyAdaptive = options.adaptive || !state.isAdaptiveCached;\n    const viewportStyle = this.viewportElement.style;\n    if (shouldApplyAdaptive) {\n      let sizeToApply: number;\n      if (options.adaptive) {\n        const panelBbox = currentPanel.getBbox();\n\n        sizeToApply = horizontal ? panelBbox.height : panelBbox.width;\n      } else {\n        // Find minimum height of panels to maximum panel size\n        const maximumPanelSize = this.panelManager.originalPanels().reduce((maximum, panel) => {\n          const panelBbox = panel.getBbox();\n          return Math.max(maximum, horizontal ? panelBbox.height : panelBbox.width);\n        }, 0);\n\n        sizeToApply = maximumPanelSize;\n      }\n\n      if (!state.isAdaptiveCached) {\n        const viewportBbox = this.updateBbox();\n        sizeToApply = Math.max(sizeToApply, horizontal ? viewportBbox.height : viewportBbox.width);\n        state.isAdaptiveCached = true;\n      }\n\n      const viewportSize = `${sizeToApply}px`;\n      if (horizontal) {\n        viewportStyle.height = viewportSize;\n        state.cachedBbox!.height = sizeToApply;\n      } else {\n        viewportStyle.width = viewportSize;\n        state.cachedBbox!.width = sizeToApply;\n      }\n    }\n  }\n\n  // Update camera position after resizing\n  public updateCameraPosition(): void {\n    const state = this.state;\n    const currentPanel = this.getCurrentPanel();\n    const cameraPosition = this.getCameraPosition();\n    const currentState = this.stateMachine.getState();\n    const isFreeScroll = this.moveType.is(MOVE_TYPE.FREE_SCROLL);\n    const relativeHangerPosition = this.getRelativeHangerPosition();\n    const halfGap = this.options.gap / 2;\n\n    if (currentState.holding || currentState.playing) {\n      this.updateVisiblePanels();\n      return;\n    }\n\n    let newPosition: number;\n    if (isFreeScroll) {\n      const positionBounded = this.canSetBoundMode() && (cameraPosition === state.scrollArea.prev || cameraPosition === state.scrollArea.next);\n      const nearestPanel = this.getNearestPanel();\n\n      // Preserve camera position if it is bound to scroll area limit\n      newPosition = positionBounded || !nearestPanel\n        ? cameraPosition\n        : nearestPanel.getPosition() - halfGap + (nearestPanel.getSize() + 2 * halfGap) * state.panelMaintainRatio - relativeHangerPosition;\n    } else {\n      newPosition = currentPanel\n        ? currentPanel.getAnchorPosition() - relativeHangerPosition\n        : cameraPosition;\n    }\n\n    if (this.canSetBoundMode()) {\n      newPosition = clamp(newPosition, state.scrollArea.prev, state.scrollArea.next);\n    }\n\n    // Pause & resume axes to prevent axes's \"change\" event triggered\n    // This should be done before moveCamera, as moveCamera can trigger needPanel\n    this.updateAxesPosition(newPosition);\n\n    this.moveCamera(newPosition);\n  }\n\n  public updateBbox(): BoundingBox {\n    const state = this.state;\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n\n    if (!state.cachedBbox) {\n      state.cachedBbox = getBbox(viewportElement, options.useOffset);\n    }\n\n    return state.cachedBbox!;\n  }\n\n  public updatePlugins(): void {\n    // update for resize\n    this.plugins.forEach(plugin => {\n      plugin.update && plugin.update(this.flicking);\n    });\n  }\n\n  public destroy(option: Partial<DestroyOption>): void {\n    const state = this.state;\n    const wrapper = this.flicking.getElement();\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n    const originalPanels = this.panelManager.originalPanels();\n\n    this.removePlugins(this.plugins);\n    if (!option.preserveUI) {\n      restoreStyle(viewportElement, state.originalViewportStyle);\n      restoreStyle(cameraElement, state.originalCameraStyle);\n\n      if (!state.isCameraGiven && !this.options.renderExternal) {\n        const topmostElement = state.isViewportGiven\n          ? viewportElement\n          : wrapper;\n        const deletingElement = state.isViewportGiven\n          ? cameraElement\n          : viewportElement;\n\n        originalPanels.forEach(panel => {\n          topmostElement.appendChild(panel.getElement());\n        });\n\n        topmostElement.removeChild(deletingElement);\n      }\n    }\n\n    this.axes.destroy();\n    this.panInput.destroy();\n\n    originalPanels.forEach(panel => { panel.destroy(option); });\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  public restore(status: FlickingStatus): void {\n    const panels = status.panels;\n    const defaultIndex = this.options.defaultIndex;\n    const cameraElement = this.cameraElement;\n    const panelManager = this.panelManager;\n\n    // Restore index\n    cameraElement.innerHTML = panels.map(panel => panel.html).join(\"\");\n\n    // Create panels first\n    this.refreshPanels();\n    const createdPanels = panelManager.originalPanels();\n\n    // ...then order it by its index\n    const orderedPanels: Panel[] = [];\n    panels.forEach((panel, idx) => {\n      const createdPanel = createdPanels[idx];\n      createdPanel.setIndex(panel.index);\n      orderedPanels[panel.index] = createdPanel;\n    });\n    panelManager.replacePanels(orderedPanels, []);\n    panelManager.setCloneCount(0); // No clones at this point\n\n    const panelCount = panelManager.getPanelCount();\n    if (panelCount > 0) {\n      this.currentPanel = panelManager.get(status.index)\n        || panelManager.get(defaultIndex)\n        || panelManager.firstPanel();\n      this.nearestPanel = this.currentPanel;\n    } else {\n      this.currentPanel = undefined;\n      this.nearestPanel = undefined;\n    }\n    this.visiblePanels = orderedPanels.filter(panel => Boolean(panel));\n\n    this.resize();\n\n    this.axes.setTo({ flick: status.position }, 0);\n    this.moveCamera(status.position);\n  }\n\n  public calcVisiblePanels(): Panel[] {\n    const allPanels = this.panelManager.allPanels();\n    if (this.options.renderOnlyVisible) {\n      const cameraPos = this.getCameraPosition();\n      const viewportSize = this.getSize();\n      const basePanel = this.nearestPanel!;\n\n      const getNextPanel = (panel: Panel) => {\n        const nextPanel = panel.nextSibling;\n\n        if (nextPanel && nextPanel.getPosition() >= panel.getPosition()) {\n          return nextPanel;\n        } else {\n          return null;\n        }\n      };\n\n      const getPrevPanel = (panel: Panel) => {\n        const prevPanel = panel.prevSibling;\n\n        if (prevPanel && prevPanel.getPosition() <= panel.getPosition()) {\n          return prevPanel;\n        } else {\n          return null;\n        }\n      };\n\n      const isOutOfBoundNext = (panel: Panel) => panel.getPosition() >= cameraPos + viewportSize;\n      const isOutOfBoundPrev = (panel: Panel) => panel.getPosition() + panel.getSize() <= cameraPos;\n\n      const getVisiblePanels = (\n        panel: Panel,\n        getNext: (panel: Panel) => Panel | null,\n        isOutOfViewport: (panel: Panel) => boolean,\n      ): Panel[] => {\n        const visiblePanels: Panel[] = [];\n\n        let lastPanel = panel;\n        while (true) {\n          const nextPanel = getNext(lastPanel);\n          if (!nextPanel || isOutOfViewport(nextPanel)) {\n            break;\n          }\n          visiblePanels.push(nextPanel);\n          lastPanel = nextPanel;\n        }\n        return visiblePanels;\n      };\n\n      const panelCount = this.panelManager.getPanelCount();\n      const getAbsIndex = (panel: Panel) => panel.getIndex() + (panel.getCloneIndex() + 1) * panelCount;\n      const nextPanels = getVisiblePanels(basePanel, getNextPanel, isOutOfBoundNext);\n      const prevPanels = getVisiblePanels(basePanel, getPrevPanel, isOutOfBoundPrev);\n\n      return [basePanel, ...nextPanels, ...prevPanels].sort((panel1, panel2) => getAbsIndex(panel1) - getAbsIndex(panel2));\n    } else {\n      return allPanels.filter(panel => {\n        const outsetProgress = panel.getOutsetProgress();\n\n        return outsetProgress > -1 && outsetProgress < 1;\n      });\n    }\n  }\n\n  public getCurrentPanel(): Panel | undefined {\n    return this.currentPanel;\n  }\n\n  public getCurrentIndex(): number {\n    const currentPanel = this.currentPanel;\n\n    return currentPanel\n      ? currentPanel.getIndex()\n      : -1;\n  }\n\n  public getNearestPanel(): Panel | undefined {\n    return this.nearestPanel;\n  }\n\n  // Get progress from nearest panel\n  public getCurrentProgress(): number {\n    const currentState = this.stateMachine.getState();\n    let nearestPanel = currentState.playing || currentState.holding\n      ? this.nearestPanel\n      : this.currentPanel;\n\n    const panelManager = this.panelManager;\n    if (!nearestPanel) {\n      // There're no panels\n      return NaN;\n    }\n    const { prev: prevRange, next: nextRange } = this.getScrollArea();\n    const cameraPosition = this.getCameraPosition();\n    const isOutOfBound = this.isOutOfBound();\n    let prevPanel = nearestPanel.prevSibling;\n    let nextPanel = nearestPanel.nextSibling;\n    let hangerPosition = this.getHangerPosition();\n    let nearestAnchorPos = nearestPanel.getAnchorPosition();\n\n    if (\n      isOutOfBound\n      && prevPanel\n      && nextPanel\n      && cameraPosition < nextRange\n      // On the basis of anchor, prevPanel is nearestPanel.\n      && (hangerPosition - prevPanel.getAnchorPosition() < nearestAnchorPos - hangerPosition)\n    ) {\n      nearestPanel = prevPanel;\n      nextPanel = nearestPanel.nextSibling;\n      prevPanel = nearestPanel.prevSibling;\n      nearestAnchorPos = nearestPanel.getAnchorPosition();\n    }\n    const nearestIndex = nearestPanel.getIndex() + (nearestPanel.getCloneIndex() + 1) * panelManager.getPanelCount();\n    const nearestSize = nearestPanel.getSize();\n\n    if (isOutOfBound) {\n      const relativeHangerPosition = this.getRelativeHangerPosition();\n\n      if (nearestAnchorPos > nextRange + relativeHangerPosition) {\n        // next bounce area: hangerPosition - relativeHangerPosition - nextRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - nextRange;\n      } else if (nearestAnchorPos < prevRange + relativeHangerPosition) {\n        // prev bounce area: hangerPosition - relativeHangerPosition - prevRange\n        hangerPosition = nearestAnchorPos + hangerPosition - relativeHangerPosition - prevRange;\n      }\n    }\n    const hangerIsNextToNearestPanel = hangerPosition >= nearestAnchorPos;\n    const gap = this.options.gap;\n\n    let basePosition = nearestAnchorPos;\n    let targetPosition = nearestAnchorPos;\n    if (hangerIsNextToNearestPanel) {\n      targetPosition = nextPanel\n        ? nextPanel.getAnchorPosition()\n        : nearestAnchorPos + nearestSize + gap;\n    } else {\n      basePosition = prevPanel\n        ? prevPanel.getAnchorPosition()\n        : nearestAnchorPos - nearestSize - gap;\n    }\n\n    const progressBetween = (hangerPosition - basePosition) / (targetPosition - basePosition);\n    const startIndex = hangerIsNextToNearestPanel\n      ? nearestIndex\n      : prevPanel\n        ? prevPanel.getIndex()\n        : nearestIndex - 1;\n\n    return startIndex + progressBetween;\n  }\n\n  // Update axes flick position without triggering event\n  public updateAxesPosition(position: number) {\n    const axes = this.axes;\n    axes.off();\n    axes.setTo({\n      flick: position,\n    }, 0);\n    axes.on(this.axesHandlers);\n  }\n\n  public getSize(): number {\n    return this.state.size;\n  }\n\n  public getScrollArea(): { prev: number, next: number } {\n    return this.state.scrollArea;\n  }\n\n  public isOutOfBound(): boolean {\n    const state = this.state;\n    const options = this.options;\n    const scrollArea = state.scrollArea;\n\n    return !options.circular\n      && options.bound\n      && (state.position <= scrollArea.prev || state.position >= scrollArea.next);\n  }\n\n  public canSetBoundMode(): boolean {\n    const options = this.options;\n\n    return options.bound && !options.circular;\n  }\n\n  public getViewportElement(): HTMLElement {\n    return this.viewportElement;\n  }\n\n  public getCameraElement(): HTMLElement {\n    return this.cameraElement;\n  }\n\n  public getScrollAreaSize(): number {\n    const scrollArea = this.state.scrollArea;\n\n    return scrollArea.next - scrollArea.prev;\n  }\n\n  public getRelativeHangerPosition(): number {\n    return this.state.relativeHangerPosition;\n  }\n\n  public getHangerPosition(): number {\n    return this.state.position + this.state.relativeHangerPosition;\n  }\n\n  public getCameraPosition(): number {\n    return this.state.position;\n  }\n\n  public getPositionOffset(): number {\n    return this.state.positionOffset;\n  }\n\n  public getCheckedIndexes(): Array<[number, number]> {\n    return this.state.checkedIndexes;\n  }\n\n  public getVisiblePanels(): Panel[] {\n    return this.visiblePanels;\n  }\n\n  public setCurrentPanel(panel: Panel): void {\n    this.currentPanel = panel;\n  }\n\n  public setLastIndex(index: number): void {\n    const currentPanel = this.currentPanel;\n    const panelManager = this.panelManager;\n\n    panelManager.setLastIndex(index);\n    if (currentPanel && currentPanel.getIndex() > index) {\n      this.currentPanel = panelManager.lastPanel();\n    }\n\n    this.resize();\n  }\n\n  public setVisiblePanels(panels: Panel[]): void {\n    this.visiblePanels = panels;\n  }\n\n  public connectAxesHandler(handlers: { [key: string]: (event: { [key: string]: any; }) => any }): void {\n    const axes = this.axes;\n\n    this.axesHandlers = handlers;\n    axes.on(handlers);\n  }\n\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    const newPlugins = ([] as Plugin[]).concat(plugins);\n\n    newPlugins.forEach(plugin => {\n      plugin.init(this.flicking);\n    });\n\n    this.plugins = this.plugins.concat(newPlugins);\n    return this;\n  }\n\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    const currentPlugins = this.plugins;\n    const removedPlugins = ([] as Plugin[]).concat(plugins);\n\n    removedPlugins.forEach(plugin => {\n      const index = currentPlugins.indexOf(plugin);\n\n      if (index > -1) {\n        currentPlugins.splice(index, 1);\n      }\n\n      plugin.destroy(this.flicking);\n    });\n    return this;\n  }\n\n  public updateCheckedIndexes(changedRange: { min: number, max: number }): void {\n    const state = this.state;\n\n    let removed = 0;\n    state.checkedIndexes.concat().forEach((indexes, idx) => {\n      const [min, max] = indexes;\n      // Can fill part of indexes in range\n      if (changedRange.min <= max && changedRange.max >= min) {\n        // Remove checked index from list\n        state.checkedIndexes.splice(idx - removed, 1);\n        removed++;\n      }\n    });\n  }\n\n  public appendUncachedPanelElements(panels: Panel[]): void {\n    const options = this.options;\n    const fragment = document.createDocumentFragment();\n\n    if (options.isEqualSize) {\n      const prevVisiblePanels = this.visiblePanels;\n      const equalSizeClasses = options.isEqualSize as string[]; // for readability\n      const cached: { [className: string]: boolean } = {};\n\n      this.visiblePanels = [];\n\n      Object.keys(this.panelBboxes).forEach(className => {\n        cached[className] = true;\n      });\n\n      panels.forEach(panel => {\n        const overlappedClass = panel.getOverlappedClass(equalSizeClasses);\n        if (overlappedClass && !cached[overlappedClass]) {\n          if (!options.renderExternal) {\n            fragment.appendChild(panel.getElement());\n          }\n          this.visiblePanels.push(panel);\n          cached[overlappedClass] = true;\n        } else if (!overlappedClass) {\n          if (!options.renderExternal) {\n            fragment.appendChild(panel.getElement());\n          }\n          this.visiblePanels.push(panel);\n        }\n      });\n      prevVisiblePanels.forEach(panel => {\n        this.addVisiblePanel(panel);\n      });\n    } else {\n      if (!options.renderExternal) {\n        panels.forEach(panel => fragment.appendChild(panel.getElement()));\n      }\n      this.visiblePanels = panels.filter(panel => Boolean(panel));\n    }\n\n    if (!options.renderExternal) {\n      this.cameraElement.appendChild(fragment);\n    }\n  }\n\n  private updateClonePanels() {\n    const panelManager = this.panelManager;\n\n    // Clone panels in circular mode\n    if (this.options.circular && panelManager.getPanelCount() > 0) {\n      this.clonePanels();\n      this.updateClonedPanelPositions();\n    }\n    panelManager.chainAllPanels();\n  }\n\n  private getVisibleIndexOf(panel: Panel): number {\n    return findIndex(this.visiblePanels, visiblePanel => visiblePanel === panel);\n  }\n\n  private build(): void {\n    this.setElements();\n    this.applyCSSValue();\n    this.setMoveType();\n    this.setAxesInstance();\n    this.refreshPanels();\n    this.setDefaultPanel();\n    this.resize();\n    this.moveToDefaultPanel();\n  }\n\n  private setElements(): void {\n    const state = this.state;\n    const options = this.options;\n    const wrapper = this.flicking.getElement();\n    const classPrefix = options.classPrefix;\n\n    const viewportCandidate = wrapper.children[0] as HTMLElement;\n    const hasViewportElement = viewportCandidate && hasClass(viewportCandidate, `${classPrefix}-viewport`);\n\n    const viewportElement = hasViewportElement\n      ? viewportCandidate\n      : document.createElement(\"div\");\n\n    const cameraCandidate = hasViewportElement\n      ? viewportElement.children[0] as HTMLElement\n      : wrapper.children[0] as HTMLElement;\n    const hasCameraElement = cameraCandidate && hasClass(cameraCandidate, `${classPrefix}-camera`);\n\n    const cameraElement = hasCameraElement\n      ? cameraCandidate\n      : document.createElement(\"div\");\n\n    if (!hasCameraElement) {\n      cameraElement.className = `${classPrefix}-camera`;\n\n      const panelElements = hasViewportElement\n        ? viewportElement.children\n        : wrapper.children;\n\n      // Make all panels to be a child of camera element\n      // wrapper <- viewport <- camera <- panels[1...n]\n      toArray(panelElements).forEach(child => {\n        cameraElement.appendChild(child);\n      });\n    } else {\n      state.originalCameraStyle = {\n        className: cameraElement.getAttribute(\"class\"),\n        style: cameraElement.getAttribute(\"style\"),\n      };\n    }\n\n    if (!hasViewportElement) {\n      viewportElement.className = `${classPrefix}-viewport`;\n\n      // Add viewport element to wrapper\n      wrapper.appendChild(viewportElement);\n    } else {\n      state.originalViewportStyle = {\n        className: viewportElement.getAttribute(\"class\"),\n        style: viewportElement.getAttribute(\"style\"),\n      };\n    }\n\n    if (!hasCameraElement || !hasViewportElement) {\n      viewportElement.appendChild(cameraElement);\n    }\n\n    this.viewportElement = viewportElement;\n    this.cameraElement = cameraElement;\n    state.isViewportGiven = hasViewportElement;\n    state.isCameraGiven = hasCameraElement;\n  }\n\n  private applyCSSValue(): void {\n    const options = this.options;\n    const viewportElement = this.viewportElement;\n    const cameraElement = this.cameraElement;\n    const viewportStyle = this.viewportElement.style;\n\n    // Set default css values for each element\n    applyCSS(viewportElement, DEFAULT_VIEWPORT_CSS);\n    applyCSS(cameraElement, DEFAULT_CAMERA_CSS);\n\n    viewportElement.style.zIndex = `${options.zIndex}`;\n    if (options.horizontal) {\n      viewportStyle.minHeight = \"100%\";\n      viewportStyle.width = \"100%\";\n    } else {\n      viewportStyle.minWidth = \"100%\";\n      viewportStyle.height = \"100%\";\n    }\n    if (options.overflow) {\n      viewportStyle.overflow = \"visible\";\n    }\n\n    this.panelManager = new PanelManager(this.cameraElement, options);\n  }\n\n  private setMoveType(): void {\n    const moveType = this.options.moveType as MoveTypeObjectOption;\n\n    switch (moveType.type) {\n      case MOVE_TYPE.SNAP:\n        this.moveType = new Snap(moveType.count);\n        break;\n      case MOVE_TYPE.FREE_SCROLL:\n        this.moveType = new FreeScroll();\n        break;\n      default:\n        throw new Error(\"moveType is not correct!\");\n    }\n  }\n\n  private setAxesInstance(): void {\n    const state = this.state;\n    const options = this.options;\n\n    const scrollArea = state.scrollArea;\n    const horizontal = options.horizontal;\n\n    this.axes = new Axes({\n      flick: {\n        range: [scrollArea.prev, scrollArea.next],\n        circular: options.circular,\n        bounce: [0, 0], // will be updated in resize()\n      },\n    }, {\n      easing: options.panelEffect,\n      deceleration: options.deceleration,\n      interruptable: true,\n    });\n\n    this.panInput = new PanInput(this.viewportElement, {\n      inputType: options.inputType,\n      thresholdAngle: options.thresholdAngle,\n      iOSEdgeSwipeThreshold: options.iOSEdgeSwipeThreshold,\n      scale: options.horizontal ? [-1, 0] : [0, -1],\n    });\n\n    this.axes.connect(horizontal ? [\"flick\", \"\"] : [\"\", \"flick\"], this.panInput);\n  }\n\n  private refreshPanels(): void {\n    const panelManager = this.panelManager;\n    // Panel elements were attached to camera element by Flicking class\n    const panelElements = this.cameraElement.children;\n\n    // Initialize panels\n    const panels = toArray(panelElements).map(\n      (el: HTMLElement, idx: number) => new Panel(el, idx, this),\n    );\n\n    panelManager.replacePanels(panels, []);\n    this.visiblePanels = panels.filter(panel => Boolean(panel));\n  }\n\n  private setDefaultPanel(): void {\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const indexRange = this.panelManager.getRange();\n    const index = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n\n    this.currentPanel = panelManager.get(index);\n  }\n\n  private clonePanels() {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n\n    const gap = options.gap;\n    const viewportSize = state.size;\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel()!;\n\n    // There're no panels exist\n    if (!firstPanel) {\n      return;\n    }\n\n    // For each panels, clone itself while last panel's position + size is below viewport size\n    const panels = panelManager.originalPanels();\n    const reversedPanels = panels.concat().reverse();\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + gap;\n    const relativeAnchorPosition = firstPanel.getRelativeAnchorPosition();\n    const relativeHangerPosition = this.getRelativeHangerPosition();\n\n    const areaPrev = (relativeHangerPosition - relativeAnchorPosition) % sumOriginalPanelSize;\n    let sizeSum = 0;\n    let panelAtLeftBoundary!: Panel;\n    for (const panel of reversedPanels) {\n      if (!panel) {\n        continue;\n      }\n      sizeSum += panel.getSize() + gap;\n      if (sizeSum >= areaPrev) {\n        panelAtLeftBoundary = panel;\n        break;\n      }\n    }\n\n    const areaNext = (viewportSize - relativeHangerPosition + relativeAnchorPosition) % sumOriginalPanelSize;\n    sizeSum = 0;\n    let panelAtRightBoundary!: Panel;\n    for (const panel of panels) {\n      if (!panel) {\n        continue;\n      }\n      sizeSum += panel.getSize() + gap;\n      if (sizeSum >= areaNext) {\n        panelAtRightBoundary = panel;\n        break;\n      }\n    }\n\n    // Need one more set of clones on prev area of original panel 0\n    const needCloneOnPrev = panelAtLeftBoundary.getIndex() !== 0\n      && panelAtLeftBoundary.getIndex() <= panelAtRightBoundary.getIndex();\n\n    // Visible count of panel 0 on first screen\n    const panel0OnFirstscreen = Math.ceil((relativeHangerPosition + firstPanel.getSize() - relativeAnchorPosition) / sumOriginalPanelSize)\n      + Math.ceil((viewportSize - relativeHangerPosition + relativeAnchorPosition) / sumOriginalPanelSize)\n      - 1; // duplication\n\n    const cloneCount = panel0OnFirstscreen\n      + (needCloneOnPrev ? 1 : 0);\n    const prevCloneCount = panelManager.getCloneCount();\n\n    panelManager.setCloneCount(cloneCount);\n    if (options.renderExternal) {\n      return;\n    }\n\n    if (cloneCount > prevCloneCount) {\n      // should clone more\n      for (let cloneIndex = prevCloneCount; cloneIndex < cloneCount; cloneIndex++) {\n        const clones = panels.map(origPanel => origPanel.clone(cloneIndex));\n        const fragment = document.createDocumentFragment();\n        clones.forEach(panel => fragment.appendChild(panel.getElement()));\n\n        this.cameraElement.appendChild(fragment);\n        this.visiblePanels.push(...clones.filter(clone => Boolean(clone)));\n        panelManager.insertClones(cloneIndex, 0, clones);\n      }\n    } else if (cloneCount < prevCloneCount) {\n      // should remove some\n      panelManager.removeClonesAfter(cloneCount);\n    }\n  }\n\n  private moveToDefaultPanel(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const indexRange = this.panelManager.getRange();\n\n    const defaultIndex = clamp(options.defaultIndex, indexRange.min, indexRange.max);\n    const defaultPanel = panelManager.get(defaultIndex);\n\n    let defaultPosition = 0;\n    if (defaultPanel) {\n      defaultPosition = defaultPanel.getAnchorPosition() - state.relativeHangerPosition;\n      defaultPosition = this.canSetBoundMode()\n        ? clamp(defaultPosition, state.scrollArea.prev, state.scrollArea.next)\n        : defaultPosition;\n    }\n\n    this.moveCamera(defaultPosition);\n    this.axes.setTo({ flick: defaultPosition }, 0);\n  }\n\n  private updateSize(): void {\n    const state = this.state;\n    const options = this.options;\n    const panels = this.panelManager.originalPanels()\n      .filter(panel => Boolean(panel));\n    const bbox = this.updateBbox();\n\n    const prevSize = state.size;\n    // Update size & hanger position\n    state.size = options.horizontal\n      ? bbox.width\n      : bbox.height;\n\n    if (prevSize !== state.size) {\n      state.relativeHangerPosition = parseArithmeticExpression(options.hanger, state.size);\n      state.infiniteThreshold = parseArithmeticExpression(options.infiniteThreshold, state.size);\n    }\n\n    if (panels.length <= 0) {\n      return;\n    }\n\n    this.resizePanels(panels);\n  }\n\n  private updateOriginalPanelPositions(): void {\n    const gap = this.options.gap;\n    const panelManager = this.panelManager;\n\n    const firstPanel = panelManager.firstPanel();\n    const panels = panelManager.originalPanels();\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const currentPanel = this.currentPanel!;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n    const scrollArea = this.state.scrollArea;\n\n    // Update panel position && fit to wrapper\n    let nextPanelPos = firstPanel.getPosition();\n    let maintainingPanel: Panel = firstPanel;\n    if (nearestPanel) {\n      // We should maintain nearestPanel's position\n      const looped = !isBetween(currentState.lastPosition + currentState.delta, scrollArea.prev, scrollArea.next);\n\n      maintainingPanel = looped\n        ? currentPanel\n        : nearestPanel;\n    } else if (firstPanel.getIndex() > 0) {\n      maintainingPanel = currentPanel;\n    }\n\n    const panelsBeforeMaintainPanel = panels.slice(0, maintainingPanel.getIndex() + (maintainingPanel.getCloneIndex() + 1) * panels.length);\n    const accumulatedSize = panelsBeforeMaintainPanel.reduce((total, panel) => {\n      return total + panel.getSize() + gap;\n    }, 0);\n\n    nextPanelPos = maintainingPanel.getPosition() - accumulatedSize;\n\n    panels.forEach(panel => {\n      const newPosition = nextPanelPos;\n      const panelSize = panel.getSize();\n\n      panel.setPosition(newPosition);\n      nextPanelPos += panelSize + gap;\n    });\n\n    if (!this.options.renderOnlyVisible) {\n      panels.forEach(panel => panel.setPositionCSS());\n    }\n  }\n\n  private updateClonedPanelPositions(): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const clonedPanels = panelManager.clonedPanels()\n      .reduce((allClones, clones) => [...allClones, ...clones], [])\n      .filter(panel => Boolean(panel));\n\n    const scrollArea = state.scrollArea;\n\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel()!;\n\n    if (!firstPanel) {\n      return;\n    }\n\n    const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n    // Locate all cloned panels linearly first\n    for (const panel of clonedPanels) {\n      const origPanel = panel.getOriginalPanel();\n      const cloneIndex = panel.getCloneIndex();\n      const cloneBasePos = sumOriginalPanelSize * (cloneIndex + 1);\n      const clonedPanelPos = cloneBasePos + origPanel.getPosition();\n\n      panel.setPosition(clonedPanelPos);\n    }\n\n    let lastReplacePosition = firstPanel.getPosition();\n    // reverse() pollutes original array, so copy it with concat()\n    for (const panel of clonedPanels.concat().reverse()) {\n      const panelSize = panel.getSize();\n      const replacePosition = lastReplacePosition - panelSize - options.gap;\n\n      if (replacePosition + panelSize <= scrollArea.prev) {\n        // Replace is not meaningful, as it won't be seen in current scroll area\n        break;\n      }\n\n      panel.setPosition(replacePosition);\n      lastReplacePosition = replacePosition;\n    }\n\n    if (!this.options.renderOnlyVisible) {\n      clonedPanels.forEach(panel => {\n        panel.setPositionCSS();\n      });\n    }\n  }\n\n  private updateScrollArea(): void {\n    const state = this.state;\n    const panelManager = this.panelManager;\n    const options = this.options;\n    const axes = this.axes;\n\n    // Set viewport scrollable area\n    const firstPanel = panelManager.firstPanel();\n    const lastPanel = panelManager.lastPanel() as Panel;\n    const relativeHangerPosition = state.relativeHangerPosition;\n\n    if (!firstPanel) {\n      state.scrollArea = {\n        prev: 0,\n        next: 0,\n      };\n    } else if (this.canSetBoundMode()) {\n      const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition();\n\n      if (sumOriginalPanelSize >= state.size) {\n        state.scrollArea = {\n          prev: firstPanel.getPosition(),\n          next: lastPanel.getPosition() + lastPanel.getSize() - state.size,\n        };\n      } else {\n        // Find anchor position of set of the combined panels\n        const relAnchorPosOfCombined = parseArithmeticExpression(options.anchor, sumOriginalPanelSize);\n        const anchorPos = firstPanel.getPosition() + clamp(\n          relAnchorPosOfCombined,\n          sumOriginalPanelSize - (state.size - relativeHangerPosition),\n          relativeHangerPosition,\n        );\n\n        state.scrollArea = {\n          prev: anchorPos - relativeHangerPosition,\n          next: anchorPos - relativeHangerPosition,\n        };\n      }\n    } else if (options.circular) {\n      const sumOriginalPanelSize = lastPanel.getPosition() + lastPanel.getSize() - firstPanel.getPosition() + options.gap;\n\n      // Maximum scroll extends to first clone sequence's first panel\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: sumOriginalPanelSize + firstPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    } else {\n      state.scrollArea = {\n        prev: firstPanel.getAnchorPosition() - relativeHangerPosition,\n        next: lastPanel.getAnchorPosition() - relativeHangerPosition,\n      };\n    }\n\n    const viewportSize = state.size;\n    const bounce = options.bounce;\n\n    let parsedBounce: number[];\n    if (isArray(bounce)) {\n      parsedBounce = (bounce as string[]).map(val => parseArithmeticExpression(val, viewportSize, DEFAULT_OPTIONS.bounce as number));\n    } else {\n      const parsedVal = parseArithmeticExpression(bounce as number | string, viewportSize, DEFAULT_OPTIONS.bounce as number);\n      parsedBounce = [parsedVal, parsedVal];\n    }\n\n    // Update axes range and bounce\n    const flick = axes.axis.flick;\n    flick.range = [state.scrollArea.prev, state.scrollArea.next];\n    flick.bounce = parsedBounce;\n  }\n\n  private checkNeedPanel(axesEvent?: any): void {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const currentPanel = this.currentPanel;\n    const nearestPanel = this.nearestPanel;\n    const currentState = this.stateMachine.getState();\n\n    if (!options.infinite) {\n      return;\n    }\n\n    const gap = options.gap;\n    const infiniteThreshold = state.infiniteThreshold;\n    const maxLastIndex = panelManager.getLastIndex();\n\n    if (maxLastIndex < 0) {\n      return;\n    }\n\n    if (!currentPanel || !nearestPanel) {\n      // There're no panels\n      this.triggerNeedPanel({\n        axesEvent,\n        siblingPanel: null,\n        direction: null,\n        indexRange: {\n          min: 0,\n          max: maxLastIndex,\n          length: maxLastIndex + 1,\n        },\n      });\n      return;\n    }\n\n    const originalNearestPosition = nearestPanel.getPosition();\n\n    // Check next direction\n    let checkingPanel: Panel | null = !currentState.holding && !currentState.playing\n      ? currentPanel\n      : nearestPanel;\n\n    while (checkingPanel) {\n      const currentIndex = checkingPanel.getIndex();\n      const nextSibling = checkingPanel.nextSibling;\n      const lastPanel = panelManager.lastPanel()!;\n      const atLastPanel = currentIndex === lastPanel.getIndex();\n      const nextIndex = !atLastPanel && nextSibling\n        ? nextSibling.getIndex()\n        : maxLastIndex + 1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelRight = checkingPanel.getPosition() + checkingPanel.getSize() - (currentNearestPosition - originalNearestPosition);\n      const cameraNext = state.position + state.size;\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = (nextIndex - currentIndex > 1);\n      // Expected prev panel's left position is smaller than camera position\n      const overThreshold = panelRight + gap - infiniteThreshold <= cameraNext;\n\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.NEXT,\n          indexRange: {\n            min: currentIndex + 1,\n            max: nextIndex - 1,\n            length: nextIndex - currentIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at max panel index\n      if (options.circular && currentIndex === maxLastIndex && overThreshold) {\n        const firstPanel = panelManager.firstPanel();\n        const firstIndex = firstPanel\n          ? firstPanel.getIndex()\n          : -1;\n\n        if (firstIndex > 0) {\n          this.triggerNeedPanel({\n            axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.NEXT,\n            indexRange: {\n              min: 0,\n              max: firstIndex - 1,\n              length: firstIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether panels are changed\n      const lastPanelAfterNeed = panelManager.lastPanel()!;\n      const atLastPanelAfterNeed = lastPanelAfterNeed && currentIndex === lastPanelAfterNeed.getIndex();\n\n      if (atLastPanelAfterNeed || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.nextSibling;\n    }\n\n    // Check prev direction\n    checkingPanel = nearestPanel;\n    while (checkingPanel) {\n      const cameraPrev = state.position;\n      const checkingIndex = checkingPanel.getIndex();\n      const prevSibling = checkingPanel.prevSibling;\n      const firstPanel = panelManager.firstPanel()!;\n      const atFirstPanel = checkingIndex === firstPanel.getIndex();\n      const prevIndex = !atFirstPanel && prevSibling\n        ? prevSibling.getIndex()\n        : -1;\n      const currentNearestPosition = nearestPanel.getPosition();\n      const panelLeft = checkingPanel.getPosition() - (currentNearestPosition - originalNearestPosition);\n\n      // There're empty panels between\n      const emptyPanelExistsBetween = checkingIndex - prevIndex > 1;\n      // Expected prev panel's right position is smaller than camera position\n      const overThreshold = panelLeft - gap + infiniteThreshold >= cameraPrev;\n      if (emptyPanelExistsBetween && overThreshold) {\n        this.triggerNeedPanel({\n          axesEvent,\n          siblingPanel: checkingPanel,\n          direction: DIRECTION.PREV,\n          indexRange: {\n            min: prevIndex + 1,\n            max: checkingIndex - 1,\n            length: checkingIndex - prevIndex - 1,\n          },\n        });\n      }\n\n      // Trigger needPanel in circular & at panel 0\n      if (options.circular && checkingIndex === 0 && overThreshold) {\n        const lastPanel = panelManager.lastPanel();\n\n        if (lastPanel && lastPanel.getIndex() < maxLastIndex) {\n          const lastIndex = lastPanel.getIndex();\n\n          this.triggerNeedPanel({\n            axesEvent,\n            siblingPanel: checkingPanel,\n            direction: DIRECTION.PREV,\n            indexRange: {\n              min: lastIndex + 1,\n              max: maxLastIndex,\n              length: maxLastIndex - lastIndex,\n            },\n          });\n        }\n      }\n\n      // Check whether panels were changed\n      const firstPanelAfterNeed = panelManager.firstPanel();\n      const atFirstPanelAfterNeed = firstPanelAfterNeed && checkingIndex === firstPanelAfterNeed.getIndex();\n\n      // Looped in circular mode\n      if (atFirstPanelAfterNeed || !overThreshold) {\n        break;\n      }\n\n      checkingPanel = checkingPanel.prevSibling;\n    }\n  }\n\n  private triggerNeedPanel(params: {\n    axesEvent: any;\n    siblingPanel: Panel | null,\n    direction: FlickingEvent[\"direction\"];\n    indexRange: NeedPanelEvent[\"range\"];\n  }): void {\n    const { axesEvent, siblingPanel, direction, indexRange } = params;\n    const options = this.options;\n    const checkedIndexes = this.state.checkedIndexes;\n    const alreadyTriggered = checkedIndexes.some(([min, max]) => min === indexRange.min || max === indexRange.max);\n    const hasHandler = this.flicking.hasOn(EVENTS.NEED_PANEL);\n\n    if (alreadyTriggered || !hasHandler) {\n      return;\n    }\n\n    // Should done before triggering event, as we can directly add panels by event callback\n    checkedIndexes.push([indexRange.min, indexRange.max]);\n\n    const index = siblingPanel\n      ? siblingPanel.getIndex()\n      : 0;\n    const isTrusted = axesEvent\n      ? axesEvent.isTrusted\n      : false;\n\n    this.triggerEvent(\n      EVENTS.NEED_PANEL,\n      axesEvent,\n      isTrusted,\n      {\n        index,\n        panel: siblingPanel,\n        direction,\n        range: indexRange,\n        fill: (element: ElementLike | ElementLike[]) => {\n          const panelManager = this.panelManager;\n          if (!siblingPanel) {\n            return this.insert(panelManager.getRange().max + 1, element);\n          }\n\n          const parsedElements = parseElement(element);\n          // Slice elements to fit size equal to empty spaces\n          const elements = direction === DIRECTION.NEXT\n            ? parsedElements.slice(0, indexRange.length)\n            : parsedElements.slice(-indexRange.length);\n\n          if (direction === DIRECTION.NEXT) {\n            if (options.circular && index === panelManager.getLastIndex()) {\n              // needPanel event is triggered on last index, insert at index 0\n              return this.insert(0, elements);\n            } else {\n              return siblingPanel.insertAfter(elements);\n            }\n          } else if (direction === DIRECTION.PREV) {\n            if (options.circular && index === 0) {\n              // needPanel event is triggered on first index(0), insert at the last index\n              return this.insert(indexRange.max - elements.length + 1, elements);\n            } else {\n              return siblingPanel.insertBefore(elements);\n            }\n          } else {\n            // direction is null when there're no panels exist\n            return this.insert(0, elements);\n          }\n        },\n      } as Partial<NeedPanelEvent>,\n    );\n  }\n\n  private updateVisiblePanels() {\n    const state = this.state;\n    const options = this.options;\n    const panelManager = this.panelManager;\n    const currentState = this.stateMachine.getState();\n    const cameraElement = this.cameraElement;\n    const { renderExternal, renderOnlyVisible } = options;\n    if (!renderOnlyVisible) {\n      return;\n    }\n\n    if (!this.nearestPanel) {\n      this.visiblePanels = [];\n      while (cameraElement.firstChild) {\n        cameraElement.removeChild(cameraElement.firstChild);\n      }\n      return;\n    }\n\n    const prevVisiblePanels = this.visiblePanels;\n    const newVisiblePanels = this.calcVisiblePanels();\n\n    const { addedPanels, removedPanels } = this.checkVisiblePanelChange(prevVisiblePanels, newVisiblePanels);\n\n    if (addedPanels.length <= 0 && removedPanels.length <= 0) {\n      // Visible panels not changed\n      return;\n    }\n\n    if (currentState.holding) {\n      newVisiblePanels.push(...removedPanels);\n    } else {\n      const firstVisiblePanelPos = newVisiblePanels[0].getPosition();\n      state.positionOffset = firstVisiblePanelPos;\n    }\n\n    newVisiblePanels.forEach(panel => {\n      panel.setPositionCSS(state.positionOffset);\n    });\n\n    if (!renderExternal) {\n      if (!currentState.holding) {\n        removedPanels.forEach(panel => {\n          const panelElement = panel.getElement();\n          panelElement.parentNode && cameraElement.removeChild(panelElement);\n        });\n      }\n\n      const fragment = document.createDocumentFragment();\n      addedPanels.forEach(panel => {\n        fragment.appendChild(panel.getElement());\n      });\n\n      cameraElement.appendChild(fragment);\n    }\n\n    const firstVisiblePanel = newVisiblePanels[0];\n    const lastVisiblePanel = newVisiblePanels[newVisiblePanels.length - 1];\n    const getAbsIndex = (panel: Panel) => panel.getIndex() + (panel.getCloneIndex() + 1) * panelManager.getPanelCount();\n\n    const newVisibleRange = {\n      min: getAbsIndex(firstVisiblePanel),\n      max: getAbsIndex(lastVisiblePanel),\n    };\n    this.visiblePanels = newVisiblePanels;\n    this.flicking.trigger(EVENTS.VISIBLE_CHANGE, {\n      type: EVENTS.VISIBLE_CHANGE,\n      range: newVisibleRange,\n    });\n  }\n\n  private checkVisiblePanelChange(prevVisiblePanels: Panel[], newVisiblePanels: Panel[]) {\n    const prevRefCount = prevVisiblePanels.map(() => 0);\n    const newRefCount = newVisiblePanels.map(() => 0);\n\n    prevVisiblePanels.forEach((prevPanel, prevIndex) => {\n      newVisiblePanels.forEach((newPanel, newIndex) => {\n        if (prevPanel === newPanel) {\n          prevRefCount[prevIndex]++;\n          newRefCount[newIndex]++;\n        }\n      });\n    });\n\n    const removedPanels = prevRefCount.reduce((removed: Panel[], count, index) => {\n      return count === 0\n        ? [...removed, prevVisiblePanels[index]]\n        : removed;\n    }, []);\n    const addedPanels = newRefCount.reduce((added: Panel[], count, index) => {\n      return count === 0\n        ? [...added, newVisiblePanels[index]]\n        : added;\n    }, []);\n\n    return { removedPanels, addedPanels };\n  }\n\n  private resizePanels(panels: Panel[]): void {\n    const options = this.options;\n    const panelBboxes = this.panelBboxes;\n\n    if (options.isEqualSize === true) {\n      if (!panelBboxes.default) {\n        const defaultPanel = panels[0];\n        panelBboxes.default = defaultPanel.getBbox();\n      }\n\n      const defaultBbox = panelBboxes.default;\n\n      panels.forEach(panel => {\n        panel.resize(defaultBbox);\n      });\n      return;\n    } else if (options.isEqualSize) {\n      const equalSizeClasses = options.isEqualSize;\n\n      panels.forEach(panel => {\n        const overlappedClass = panel.getOverlappedClass(equalSizeClasses);\n        if (overlappedClass) {\n          panel.resize(panelBboxes[overlappedClass]);\n          panelBboxes[overlappedClass] = panel.getBbox();\n        } else {\n          panel.resize();\n        }\n      });\n      return;\n    }\n    panels.forEach(panel => {\n      panel.resize();\n    });\n  }\n}\n","/**\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\nimport Component from \"@egjs/component\";\nimport Viewport from \"./components/Viewport\";\nimport Panel from \"./components/Panel\";\n\nimport { merge, getProgress, parseElement, isString, counter, findIndex } from \"./utils\";\nimport { DEFAULT_OPTIONS, EVENTS, DIRECTION, AXES_EVENTS, STATE_TYPE, DEFAULT_MOVE_TYPE_OPTIONS } from \"./consts\";\nimport {\n  FlickingOptions,\n  FlickingEvent,\n  Direction,\n  EventType,\n  FlickingPanel,\n  TriggerCallback,\n  FlickingContext,\n  FlickingStatus,\n  Plugin,\n  ElementLike,\n  DestroyOption,\n  BeforeSyncResult,\n  SyncResult,\n} from \"./types\";\n// import { sendEvent } from \"./ga/ga\";\nimport { DiffResult } from \"@egjs/list-differ\";\n\n/**\n * @memberof eg\n * @extends eg.Component\n * @support {\"ie\": \"10+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\" , \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|eg.Component}\n * @requires {@link https://github.com/naver/egjs-axes|eg.Axes}\n * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n */\nclass Flicking extends Component {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @example\n   * eg.Flicking.VERSION;  // ex) 3.0.0\n   * @memberof eg.Flicking\n   */\n  public static VERSION: string = \"#__VERSION__#\";\n  /**\n   * Direction constant - \"PREV\" or \"NEXT\"\n   * @ko 방향 상수 - \"PREV\" 또는 \"NEXT\"\n   * @type {object}\n   * @property {\"PREV\"} PREV - Prev direction from current hanger position.<br/>It's `left(←️)` direction when `horizontal: true`.<br/>Or, `up(↑️)` direction when `horizontal: false`.<ko>현재 행어를 기준으로 이전 방향.<br/>`horizontal: true`일 경우 `왼쪽(←️)` 방향.<br/>`horizontal: false`일 경우 `위쪽(↑️)`방향이다.</ko>\n   * @property {\"NEXT\"} NEXT - Next direction from current hanger position.<br/>It's `right(→)` direction when `horizontal: true`.<br/>Or, `down(↓️)` direction when `horizontal: false`.<ko>현재 행어를 기준으로 다음 방향.<br/>`horizontal: true`일 경우 `오른쪽(→)` 방향.<br/>`horizontal: false`일 경우 `아래쪽(↓️)`방향이다.</ko>\n   * @example\n   * eg.Flicking.DIRECTION.PREV; // \"PREV\"\n   * eg.Flicking.DIRECTION.NEXT; // \"NEXT\"\n   */\n  public static DIRECTION: Direction = DIRECTION;\n\n  /**\n   * Event type object with event name strings.\n   * @ko 이벤트 이름 문자열들을 담은 객체\n   * @type {object}\n   * @property {\"holdStart\"} HOLD_START - holdStart event<ko>holdStart 이벤트</ko>\n   * @property {\"holdEnd\"} HOLD_END - holdEnd event<ko>holdEnd 이벤트</ko>\n   * @property {\"moveStart\"} MOVE_START - moveStart event<ko>moveStart 이벤트</ko>\n   * @property {\"move\"} MOVE - move event<ko>move 이벤트</ko>\n   * @property {\"moveEnd\"} MOVE_END - moveEnd event<ko>moveEnd 이벤트</ko>\n   * @property {\"change\"} CHANGE - change event<ko>change 이벤트</ko>\n   * @property {\"restore\"} RESTORE - restore event<ko>restore 이벤트</ko>\n   * @property {\"select\"} SELECT - select event<ko>select 이벤트</ko>\n   * @property {\"needPanel\"} NEED_PANEL - needPanel event<ko>needPanel 이벤트</ko>\n   * @example\n   * eg.Flicking.EVENTS.MOVE_START; // \"MOVE_START\"\n   */\n  public static EVENTS: EventType = EVENTS;\n\n  public options: FlickingOptions;\n\n  private wrapper: HTMLElement;\n  private viewport: Viewport;\n  private eventContext: FlickingContext;\n  private isPanelChangedAtBeforeSync: boolean = false;\n\n  /**\n   * @param element A base element for the eg.Flicking module. When specifying a value as a `string` type, you must specify a css selector string to select the element.<ko>eg.Flicking 모듈을 사용할 기준 요소. `string`타입으로 값 지정시 요소를 선택하기 위한 css 선택자 문자열을 지정해야 한다.</ko>\n   * @param options An option object of the eg.Flicking module<ko>eg.Flicking 모듈의 옵션 객체</ko>\n   * @param {string} [options.classPrefix=\"eg-flick\"] A prefix of class names will be added for the panels, viewport, and camera.<ko>패널들과 뷰포트, 카메라에 추가될 클래스 이름의 접두사.</ko>\n   * @param {number} [options.deceleration=0.0075] Deceleration value for panel movement animation for animation triggered by manual user input. A higher value means a shorter running time.<ko>사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아진다.</ko>\n   * @param {boolean} [options.horizontal=true] The direction of panel movement. (true: horizontal, false: vertical)<ko>패널 이동 방향. (true: 가로방향, false: 세로방향)</ko>\n   * @param {boolean} [options.circular=false] Enables circular mode, which connects first/last panel for continuous scrolling.<ko>순환 모드를 활성화한다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능하다.</ko>\n   * @param {boolean} [options.infinite=false] Enables infinite mode, which can automatically trigger needPanel until reaching the last panel's index reaches the lastIndex.<ko>무한 모드를 활성화한다. 무한 모드에서는 needPanel 이벤트를 자동으로 트리거한다. 해당 동작은 마지막 패널의 인덱스가 lastIndex와 일치할때까지 일어난다.</ko>\n   * @param {number} [options.infiniteThreshold=0] A Threshold from viewport edge before triggering `needPanel` event in infinite mode.<ko>무한 모드에서 `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리.</ko>\n   * @param {number} [options.lastIndex=Infinity] Maximum panel index that Flicking can set. Flicking won't trigger `needPanel` when the event's panel index is greater than it.<br/>Also, if the last panel's index reached a given index, you can't add more panels.<ko>Flicking이 설정 가능한 패널의 최대 인덱스. `needPanel` 이벤트에 지정된 인덱스가 최대 패널의 개수보다 같거나 커야 하는 경우에 이벤트를 트리거하지 않게 한다.<br>또한, 마지막 패널의 인덱스가 주어진 인덱스와 동일할 경우, 새로운 패널을 더 이상 추가할 수 없다.</ko>\n   * @param {number} [options.threshold=40] Movement threshold to change panel(unit: pixel). It should be dragged above the threshold to change the current panel.<ko>패널 변경을 위한 이동 임계값 (단위: 픽셀). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.</ko>\n   * @param {number} [options.duration=100] Duration of the panel movement animation. (unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @param {function} [options.panelEffect=x => 1 - Math.pow(1 - x, 3)] An easing function applied to the panel movement animation. Default value is `easeOutCubic`.<ko>패널 이동 애니메이션에 적용할 easing함수. 기본값은 `easeOutCubic`이다.</ko>\n   * @param {number} [options.defaultIndex=0] Index of the panel to set as default when initializing. A zero-based integer.<ko>초기화시 지정할 디폴트 패널의 인덱스로, 0부터 시작하는 정수.</ko>\n   * @param {string[]} [options.inputType=[\"touch,\"mouse\"]] Types of input devices to enable.({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Reference})<ko>활성화할 입력 장치 종류. ({@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 참고})</ko>\n   * @param {number} [options.thresholdAngle=45] The threshold angle value(0 ~ 90).<br>If the input angle from click/touched position is above or below this value in horizontal and vertical mode each, scrolling won't happen.<ko>스크롤 동작을 막기 위한 임계각(0 ~ 90).<br>클릭/터치한 지점으로부터 계산된 사용자 입력의 각도가 horizontal/vertical 모드에서 각각 크거나 작으면, 스크롤 동작이 이루어지지 않는다.</ko>\n   * @param {number|string|number[]|string[]} [options.bounce=[10,10]] The size value of the bounce area. Only can be enabled when `circular=false`.<br>You can set different bounce value for prev/next direction by using array.<br>`number` for px value, and `string` for px, and % value relative to viewport size.(ex - 0, \"10px\", \"20%\")<ko>바운스 영역의 크기값. `circular=false`인 경우에만 사용할 수 있다.<br>배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정 가능하다.<br>`number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있다.(ex - 0, \"10px\", \"20%\")</ko>\n   * @param {boolean} [options.autoResize=false] Whether the `resize` method should be called automatically after a window resize event.<ko>window의 `resize` 이벤트 이후 자동으로 resize()메소드를 호출할지의 여부.</ko>\n   * @param {boolean} [options.adaptive=false] Whether the height(horizontal)/width(vertical) of the viewport element reflects the height/width value of the panel after completing the movement.<ko>목적 패널로 이동한 후 그 패널의 높이(horizontal)/너비(vertical)값을 뷰포트 요소의 높이/너비값에 반영할지 여부.</ko>\n   * @param {number|\"\"} [options.zIndex=2000] z-index value for viewport element.<ko>뷰포트 엘리먼트의 z-index 값.</ko>\n   * @param {boolean} [options.bound=false] Prevent the view from going out of the first/last panel. Only can be enabled when `circular=false`.<ko>뷰가 첫번째와 마지막 패널 밖으로 나가는 것을 막아준다. `circular=false`인 경우에만 사용할 수 있다.</ko>\n   * @param {boolean} [options.overflow=false] Disables CSS property `overflow: hidden` in viewport if `true`.<ko>`true`로 설정시 뷰포트에 `overflow: hidden` 속성을 해제한다.</ko>\n   * @param {string} [options.hanger=\"50%\"] The reference position of the hanger in the viewport, which hangs panel anchors should be stopped at.<br>It should be provided in px or % value of viewport size.<br>You can combinate those values with plus/minus sign.<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>뷰포트 내부의 행어의 위치. 패널의 앵커들이 뷰포트 내에서 멈추는 지점에 해당한다.<br>px값이나, 뷰포트의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {string} [options.anchor=\"50%\"] The reference position of the anchor in panels, which can be hanged by viewport hanger.<br>It should be provided in px or % value of panel size.<br>You can combinate those values with plus/minus sign.<br>ex) \"50\", \"100px\", \"0%\", \"25% + 100px\"<ko>패널 내부의 앵커의 위치. 뷰포트의 행어와 연계하여 패널이 화면 내에서 멈추는 지점을 설정할 수 있다.<br>px값이나, 패널의 크기 대비 %값을 사용할 수 있고, 이를 + 혹은 - 기호로 연계하여 사용할 수도 있다.<br>예) \"50\", \"100px\", \"0%\", \"25% + 100px\"</ko>\n   * @param {number} [options.gap=0] Space value between panels. Should be given in number.(px)<ko>패널간에 부여할 간격의 크기를 나타내는 숫자.(px)</ko>\n   * @param {eg.Flicking.MoveTypeOption} [options.moveType=\"snap\"] Movement style by user input. (ex: snap, freeScroll)<ko>사용자 입력에 의한 이동 방식.(ex: snap, freeScroll)</ko>\n   * @param {boolean} [options.useOffset=false] Whether to use `offsetWidth`/`offsetHeight` instead of `getBoundingClientRect` for panel/viewport size calculation.<br/>You can use this option to calculate the original panel size when CSS transform is applied to viewport or panel.<br/>⚠️ If panel size is not fixed integer value, there can be a 1px gap between panels.<ko>패널과 뷰포트의 크기를 계산할 때 `offsetWidth`/`offsetHeight`를 `getBoundingClientRect` 대신 사용할지 여부.<br/>패널이나 뷰포트에 CSS transform이 설정되어 있을 때 원래 패널 크기를 계산하려면 옵션을 활성화한다.<br/>⚠️ 패널의 크기가 정수로 고정되어있지 않다면 패널 사이에 1px의 공간이 생길 수 있다.</ko>\n   * @param {boolean} [options.renderOnlyVisible] Whether to render visible panels only. This can dramatically increase performance when there're many panels.<ko>보이는 패널만 렌더링할지 여부를 설정한다. 패널이 많을 경우에 퍼포먼스를 크게 향상시킬 수 있다.</ko>\n   * @param {boolean|string[]} [options.isEqualSize] This option indicates whether all panels have the same size(true) of first panel, or it can hold a list of class names that determines panel size.<br/>Enabling this option can increase performance while recalculating panel size.<ko>모든 패널의 크기가 동일한지(true), 혹은 패널 크기를 결정하는 패널 클래스들의 리스트.<br/>이 옵션을 설정하면 패널 크기 재설정시에 성능을 높일 수 있다.</ko>\n   * @param {boolean} [options.isConstantSize] Whether all panels have a constant size that won't be changed after resize. Enabling this option can increase performance while recalculating panel size.<ko>모든 패널의 크기가 불변인지의 여부. 이 옵션을 'true'로 설정하면 패널 크기 재설정시에 성능을 높일 수 있다.</ko>\n   * @param {boolean} [options.renderExternal] Whether to use external rendering. It will delegate DOM manipulation and can synchronize the rendered state by calling `sync()` method. You can use this option to use in frameworks like React, Vue, Angular, which has its states and rendering methods.<ko>외부 렌더링을 사용할 지의 여부. 이 옵션을 사용시 렌더링을 외부에 위임할 수 있고, `sync()`를 호출하여 그 상태를 동기화할 수 있다. 이 옵션을 사용하여, React, Vue, Angular 등 자체적인 상태와 렌더링 방법을 갖는 프레임워크에 대응할 수 있다.</ko>\n   * @param {boolean} [options.collectStatistics=true] Whether to collect statistics on how you are using `Flicking`. These statistical data do not contain any personal information and are used only as a basis for the development of a user-friendly product.<ko>어떻게 `Flicking`을 사용하고 있는지에 대한 통계 수집 여부를 나타낸다. 이 통계자료는 개인정보를 포함하고 있지 않으며 오직 사용자 친화적인 제품으로 발전시키기 위한 근거자료로서 활용한다.</ko>\n   */\n  constructor(\n    element: string | HTMLElement,\n    options: Partial<FlickingOptions> = {},\n  ) {\n    super();\n\n    // Set flicking wrapper user provided\n    let wrapper: HTMLElement | null;\n    if (isString(element)) {\n      wrapper = document.querySelector(element);\n      if (!wrapper) {\n        throw new Error(\"Base element doesn't exist.\");\n      }\n    } else if (element.nodeName && element.nodeType === 1) {\n      wrapper = element;\n    } else {\n      throw new Error(\"Element should be provided in string or HTMLElement.\");\n    }\n\n    this.wrapper = wrapper;\n    // Override default options\n    this.options = merge({}, DEFAULT_OPTIONS, options) as FlickingOptions;\n    // Override moveType option\n    const currentOptions = this.options;\n    const moveType = currentOptions.moveType;\n\n    if (moveType in DEFAULT_MOVE_TYPE_OPTIONS) {\n      currentOptions.moveType = DEFAULT_MOVE_TYPE_OPTIONS[moveType as keyof typeof DEFAULT_MOVE_TYPE_OPTIONS];\n    }\n\n    // Make viewport instance with panel container element\n    this.viewport = new Viewport(this, this.options, this.triggerEvent);\n    this.listenInput();\n    this.listenResize();\n\n    // if (this.options.collectStatistics) {\n    //   sendEvent(\n    //     \"usage\",\n    //     \"options\",\n    //     options,\n    //   );\n    // }\n  }\n\n  /**\n   * Move to the previous panel if it exists.\n   * @ko 이전 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public prev(duration?: number): this {\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.viewport.stateMachine.getState();\n\n    if (currentPanel && currentState.type === STATE_TYPE.IDLE) {\n      const prevPanel = currentPanel.prev();\n      if (prevPanel) {\n        prevPanel.focus(duration);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Move to the next panel if it exists.\n   * @ko 다음 패널이 존재시 해당 패널로 이동한다.\n   * @param [duration=options.duration] Duration of the panel movement animation(unit: ms).<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public next(duration?: number): this {\n    const currentPanel = this.getCurrentPanel();\n    const currentState = this.viewport.stateMachine.getState();\n\n    if (currentPanel && currentState.type === STATE_TYPE.IDLE) {\n      const nextPanel = currentPanel.next();\n      if (nextPanel) {\n        nextPanel.focus(duration);\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Move to the panel of given index.\n   * @ko 주어진 인덱스에 해당하는 패널로 이동한다.\n   * @param index The index number of the panel to move.<ko>이동할 패널의 인덱스 번호.</ko>\n   * @param duration [duration=options.duration] Duration of the panel movement.(unit: ms)<ko>패널 이동 애니메이션 진행 시간.(단위: ms)</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public moveTo(index: number, duration?: number): this {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    const state = viewport.stateMachine.getState();\n\n    if (!panel || state.type !== STATE_TYPE.IDLE) {\n      return this;\n    }\n\n    const anchorPosition = panel.getAnchorPosition();\n    const hangerPosition = viewport.getHangerPosition();\n\n    let targetPanel = panel;\n    if (this.options.circular) {\n      const scrollAreaSize = viewport.getScrollAreaSize();\n      // Check all three possible locations, find the nearest position among them.\n      const possiblePositions = [\n        anchorPosition - scrollAreaSize,\n        anchorPosition,\n        anchorPosition + scrollAreaSize,\n      ];\n      const nearestPosition = possiblePositions.reduce((nearest, current) => {\n        return (Math.abs(current - hangerPosition) < Math.abs(nearest - hangerPosition))\n          ? current\n          : nearest;\n      }, Infinity) - panel.getRelativeAnchorPosition();\n\n      const identicals = panel.getIdenticalPanels();\n      const offset = nearestPosition - anchorPosition;\n      if (offset > 0) {\n        // First cloned panel is nearest\n        targetPanel = identicals[1];\n      } else if (offset < 0) {\n        // Last cloned panel is nearest\n        targetPanel = identicals[identicals.length - 1];\n      }\n\n      targetPanel = targetPanel.clone(targetPanel.getCloneIndex(), true);\n      targetPanel.setPosition(nearestPosition);\n    }\n    const currentIndex = this.getIndex();\n\n    if (hangerPosition === targetPanel.getAnchorPosition() && currentIndex === index) {\n      return this;\n    }\n\n    const eventType = panel.getIndex() === viewport.getCurrentIndex()\n      ? \"\"\n      : EVENTS.CHANGE;\n\n    viewport.moveTo(\n      targetPanel,\n      viewport.findEstimatedPosition(targetPanel),\n      eventType,\n      null,\n      duration,\n    );\n    return this;\n  }\n\n  /**\n   * Return index of the current panel. `-1` if no panel exists.\n   * @ko 현재 패널의 인덱스 번호를 반환한다. 패널이 하나도 없을 경우 `-1`을 반환한다.\n   * @return Current panel's index, zero-based integer.<ko>현재 패널의 인덱스 번호. 0부터 시작하는 정수.</ko>\n   */\n  public getIndex(): number {\n    return this.viewport.getCurrentIndex();\n  }\n\n  /**\n   * Return the wrapper element user provided in constructor.\n   * @ko 사용자가 생성자에서 제공한 래퍼 엘리먼트를 반환한다.\n   * @return Wrapper element user provided.<ko>사용자가 제공한 래퍼 엘리먼트.</ko>\n   */\n  public getElement(): HTMLElement {\n    return this.wrapper;\n  }\n\n  /**\n   * Return current panel. `null` if no panel exists.\n   * @ko 현재 패널을 반환한다. 패널이 하나도 없을 경우 `null`을 반환한다.\n   * @return Current panel.<ko>현재 패널.</ko>\n   */\n  public getCurrentPanel(): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.getCurrentPanel();\n    return panel\n      ? panel\n      : null;\n  }\n\n  /**\n   * Return the panel of given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 패널을 반환한다. 해당 패널이 존재하지 않을 시 `null`이다.\n   * @return Panel of given index.<ko>주어진 인덱스에 해당하는 패널.</ko>\n   */\n  public getPanel(index: number): FlickingPanel | null {\n    const viewport = this.viewport;\n    const panel = viewport.panelManager.get(index);\n    return panel\n      ? panel\n      : null;\n  }\n\n  /**\n   * Return all panels.\n   * @ko 모든 패널들을 반환한다.\n   * @param - Should include cloned panels or not.<ko>복사된 패널들을 포함할지의 여부.</ko>\n   * @return All panels.<ko>모든 패널들.</ko>\n   */\n  public getAllPanels(includeClone?: boolean): FlickingPanel[] {\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const panels = includeClone\n      ? panelManager.allPanels()\n      : panelManager.originalPanels();\n\n    return panels\n      .filter(panel => !!panel);\n  }\n\n  /**\n   * Return the panels currently shown in viewport area.\n   * @ko 현재 뷰포트 영역에서 보여지고 있는 패널들을 반환한다.\n   * @return Panels currently shown in viewport area.<ko>현재 뷰포트 영역에 보여지는 패널들</ko>\n   */\n  public getVisiblePanels(): FlickingPanel[] {\n    return this.viewport.calcVisiblePanels();\n  }\n\n  /**\n   * Return length of original panels.\n   * @ko 원본 패널의 개수를 반환한다.\n   * @return Length of original panels.<ko>원본 패널의 개수</ko>\n   */\n  public getPanelCount(): number {\n    return this.viewport.panelManager.getPanelCount();\n  }\n\n  /**\n   * Return how many groups of clones are created.\n   * @ko 몇 개의 클론 그룹이 생성되었는지를 반환한다.\n   * @return Length of cloned panel groups.<ko>클론된 패널 그룹의 개수</ko>\n   */\n  public getCloneCount(): number {\n    return this.viewport.panelManager.getCloneCount();\n  }\n\n  /**\n   * Get maximum panel index for `infinite` mode.\n   * @ko `infinite` 모드에서 적용되는 추가 가능한 패널의 최대 인덱스 값을 반환한다.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return Maximum index of panel that can be added.<ko>최대 추가 가능한 패널의 인덱스.</ko>\n   */\n  public getLastIndex(): number {\n    return this.viewport.panelManager.getLastIndex();\n  }\n\n  /**\n   * Set maximum panel index for `infinite' mode.<br>[needPanel]{@link eg.Flicking#events:needPanel} won't be triggered anymore when last panel's index reaches it.<br>Also, you can't add more panels after it.\n   * @ko `infinite` 모드에서 적용되는 패널의 최대 인덱스를 설정한다.<br>마지막 패널의 인덱스가 설정한 값에 도달할 경우 더 이상 [needPanel]{@link eg.Flicking#events:needPanel} 이벤트가 발생되지 않는다.<br>또한, 설정한 인덱스 이후로 새로운 패널을 추가할 수 없다.\n   * @param - Maximum panel index.\n   * @see {@link eg.Flicking.FlickingOptions}\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public setLastIndex(index: number): this {\n    this.viewport.setLastIndex(index);\n\n    return this;\n  }\n\n  /**\n   * Return panel movement animation.\n   * @ko 현재 패널 이동 애니메이션이 진행 중인지를 반환한다.\n   * @return Is animating or not.<ko>애니메이션 진행 여부.</ko>\n   */\n  public isPlaying(): boolean {\n    return this.viewport.stateMachine.getState().playing;\n  }\n\n  /**\n   * Unblock input devices.\n   * @ko 막았던 입력 장치로부터의 입력을 푼다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public enableInput(): this {\n    this.viewport.enable();\n\n    return this;\n  }\n\n  /**\n   * Block input devices.\n   * @ko 입력 장치로부터의 입력을 막는다.\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public disableInput(): this {\n    this.viewport.disable();\n\n    return this;\n  }\n\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to [setStatus()]{@link eg.Flicking#setStatus}.\n   * @ko 현재 상태 값을 반환한다. 반환받은 값을 [setStatus()]{@link eg.Flicking#setStatus} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있다.\n   * @return An object with current status value information.<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus(): FlickingStatus {\n    const viewport = this.viewport;\n\n    const panels = viewport.panelManager.originalPanels()\n      .filter(panel => !!panel)\n      .map(panel => {\n        return {\n          html: panel.getElement().outerHTML,\n          index: panel.getIndex(),\n        };\n      });\n\n    return {\n      index: viewport.getCurrentIndex(),\n      panels,\n      position: viewport.getCameraPosition(),\n    };\n  }\n\n  /**\n   * Restore to the state of the `status`.\n   * @ko `status`의 상태로 복원한다.\n   * @param status Status value to be restored. You can specify the return value of the [getStatus()]{@link eg.Flicking#getStatus} method.<ko>복원할 상태 값. [getStatus()]{@link eg.Flicking#getStatus}메서드의 반환값을 지정하면 된다.</ko>\n   */\n  public setStatus(status: FlickingStatus): void {\n    this.viewport.restore(status);\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking.\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가한다.\n   * @param - The plugin(s) to add.<ko>추가할 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public addPlugins(plugins: Plugin | Plugin[]) {\n    this.viewport.addPlugins(plugins);\n    return this;\n  }\n\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거한다.\n   * @param - The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public removePlugins(plugins: Plugin | Plugin[]) {\n    this.viewport.removePlugins(plugins);\n    return this;\n  }\n\n  /**\n   * Return the reference element and all its children to the state they were in before the instance was created. Remove all attached event handlers. Specify `null` for all attributes of the instance (including inherited attributes).\n   * @ko 기준 요소와 그 하위 패널들을 인스턴스 생성전의 상태로 되돌린다. 부착된 모든 이벤트 핸들러를 탈거한다. 인스턴스의 모든 속성(상속받은 속성포함)에 `null`을 지정한다.\n   * @example\n   * const flick = new eg.Flicking(\"#flick\");\n   * flick.destroy();\n   * console.log(flick.moveTo); // null\n   */\n  public destroy(option: Partial<DestroyOption> = {}): void {\n    this.off();\n\n    if (this.options.autoResize) {\n      window.removeEventListener(\"resize\", this.resize);\n    }\n\n    this.viewport.destroy(option);\n\n    // release resources\n    for (const x in this) {\n      (this as any)[x] = null;\n    }\n  }\n\n  /**\n   * Update panels to current state.\n   * @ko 패널들을 현재 상태에 맞춰 갱신한다.\n   * @method\n   * @return {eg.Flicking} The instance itself.<ko>인스턴스 자기 자신.</ko>\n   */\n  public resize = (): this => {\n    const viewport = this.viewport;\n    const options = this.options;\n    const wrapper = this.getElement();\n\n    const allPanels = viewport.panelManager.allPanels();\n    if (!options.isConstantSize) {\n      allPanels.forEach(panel => panel.unCacheBbox());\n    }\n\n    const shouldResetElements = options.renderOnlyVisible\n      && !options.isConstantSize\n      && options.isEqualSize !== true;\n\n    // Temporarily set parent's height to prevent scroll (#333)\n    const parent = wrapper.parentElement!;\n    const origStyle = parent.style.height;\n    parent.style.height = `${parent.offsetHeight}px`;\n\n    viewport.unCacheBbox();\n    // This should be done before adding panels, to lower performance issue\n    viewport.updateBbox();\n\n    if (shouldResetElements) {\n      viewport.appendUncachedPanelElements(allPanels as Panel[]);\n    }\n\n    viewport.resize();\n    parent.style.height = origStyle;\n\n    return this;\n  }\n\n  /**\n   * Add new panels at the beginning of panels.\n   * @ko 제일 앞에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.replace(3, document.createElement(\"div\")); // Add new panel at index 3\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 2\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Prepended at index 0, 1\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\"); // Prepended at index 0, pushing every panels behind it.\n   */\n  public prepend(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n    const parsedElements = parseElement(element);\n\n    const insertingIndex = Math.max(viewport.panelManager.getRange().min - parsedElements.length, 0);\n    return viewport.insert(insertingIndex, parsedElements);\n  }\n\n  /**\n   * Add new panels at the end of panels.\n   * @ko 제일 끝에 새로운 패널을 추가한다.\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of appended panels.<ko>추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.append(document.createElement(\"div\")); // Appended at index 0\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\"); // Appended at index 1\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]); // Appended at index 2, 3\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\"); // Appended at index 4, 5\n   */\n  public append(element: ElementLike | ElementLike[]): FlickingPanel[] {\n    const viewport = this.viewport;\n\n    return viewport.insert(viewport.panelManager.getRange().max + 1, element);\n  }\n\n  /**\n   * Replace existing panels with new panels from given index. If target index is empty, add new panel at target index.\n   * @ko 주어진 인덱스로부터의 패널들을 새로운 패널들로 교체한다. 인덱스에 해당하는 자리가 비어있다면, 새로운 패널을 해당 자리에 집어넣는다.\n   * @param index - Start index to replace new panels.<ko>새로운 패널들로 교체할 시작 인덱스</ko>\n   * @param element - Either HTMLElement, HTML string, or array of them.<br>It can be also HTML string of multiple elements with same depth.<ko>HTMLElement 혹은 HTML 문자열, 혹은 그것들의 배열도 가능하다.<br>또한, 같은 depth의 여러 개의 엘리먼트에 해당하는 HTML 문자열도 가능하다.</ko>\n   * @return Array of created panels by replace.<ko>교체되어 새롭게 추가된 패널들의 배열</ko>\n   * @example\n   * // Suppose there were no panels at initialization\n   * const flicking = new eg.Flicking(\"#flick\");\n   *\n   * // This will add new panel at index 3,\n   * // Index 0, 1, 2 is empty at this moment.\n   * // [empty, empty, empty, PANEL]\n   * flicking.replace(3, document.createElement(\"div\"));\n   *\n   * // As index 2 was empty, this will also add new panel at index 2.\n   * // [empty, empty, PANEL, PANEL]\n   * flicking.replace(2, \"\\<div\\>Panel\\</div\\>\");\n   *\n   * // Index 3 was not empty, so it will replace previous one.\n   * // It will also add new panels at index 4 and 5.\n   * // before - [empty, empty, PANEL, PANEL]\n   * // after - [empty, empty, PANEL, NEW_PANEL, NEW_PANEL, NEW_PANEL]\n   * flicking.replace(3, [\"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\", \"\\<div\\>Panel\\</div\\>\"])\n   */\n  public replace(index: number, element: ElementLike | ElementLike[]): FlickingPanel[] {\n    return this.viewport.replace(index, element);\n  }\n\n  /**\n   * Remove panel at target index. This will decrease index of panels behind it.\n   * @ko `index`에 해당하는 자리의 패널을 제거한다. 수행시 `index` 이후의 패널들의 인덱스가 감소된다.\n   * @param index - Index of panel to remove.<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] - Number of panels to remove from index.<ko>`index` 이후로 제거할 패널의 개수.</ko>\n   * @return Array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): FlickingPanel[] {\n    return this.viewport.remove(index, deleteCount);\n  }\n\n  /**\n   * Get indexes to render. Should be used with `renderOnlyVisible` option.\n   * @private\n   * @ko 렌더링이 필요한 인덱스들을 반환한다. `renderOnlyVisible` 옵션과 함께 사용해야 한다.\n   * @param - Info object of how panel infos are changed.<ko>패널 정보들의 변경 정보를 담는 오브젝트.</ko>\n   * @return Array of indexes to render.<ko>렌더링할 인덱스의 배열</ko>\n   */\n  public getRenderingIndexes(diffResult: DiffResult<any>): number[] {\n    const viewport = this.viewport;\n    const visiblePanels = viewport.getVisiblePanels();\n    const maintained = diffResult.maintained.reduce((values: {[key: number]: number}, [before, after]) => {\n      values[before] = after;\n      return values;\n    }, {});\n\n    const prevPanelCount = diffResult.prevList.length;\n    const panelCount = diffResult.list.length;\n    const added = diffResult.added;\n    const getPanelAbsIndex = (panel: Panel) => {\n      return panel.getIndex() + (panel.getCloneIndex() + 1) * prevPanelCount;\n    };\n\n    let visibleIndexes = visiblePanels.map(panel => getPanelAbsIndex(panel));\n    visibleIndexes = visibleIndexes\n      .filter(val => maintained[val % prevPanelCount] != null)\n      .map(val => {\n        const cloneIndex = Math.floor(val / prevPanelCount);\n        const changedIndex = maintained[val % prevPanelCount];\n\n        return changedIndex + panelCount * cloneIndex;\n      });\n\n    const renderingPanels = [...visibleIndexes, ...added];\n    const allPanels = viewport.panelManager.allPanels();\n\n    viewport.setVisiblePanels(renderingPanels.map(index => allPanels[index]));\n\n    return renderingPanels;\n  }\n\n  /**\n   * Synchronize info of panels instance with info given by external rendering.\n   * @ko 외부 렌더링 방식에 의해 입력받은 패널의 정보와 현재 플리킹이 갖는 패널 정보를 동기화한다.\n   * @private\n   * @param - Info object of how panel infos are changed.<ko>패널 정보들의 변경 정보를 담는 오브젝트.</ko>\n   * @param - Whether called from sync method <ko> sync 메소드로부터 호출됐는지 여부 </ko>\n   */\n  public beforeSync(diffInfo: BeforeSyncResult) {\n    const { maintained, added, changed, removed } = diffInfo;\n    const viewport = this.viewport;\n    const panelManager = viewport.panelManager;\n    const isCircular = this.options.circular;\n    const cloneCount = panelManager.getCloneCount();\n    const prevClonedPanels = panelManager.clonedPanels();\n\n    // Update visible panels\n    const newVisiblePanels = viewport.getVisiblePanels()\n      .filter(panel => findIndex(removed, index => {\n        return index === panel.getIndex();\n      }) < 0);\n    viewport.setVisiblePanels(newVisiblePanels);\n\n    // Did not changed at all\n    if (\n      added.length <= 0\n      && removed.length <= 0\n      && changed.length <= 0\n      && cloneCount === prevClonedPanels.length\n    ) {\n      return this;\n    }\n    const prevOriginalPanels = panelManager.originalPanels();\n    const newPanels: Panel[] = [];\n    const newClones: Panel[][] = counter(cloneCount).map(() => []);\n\n    maintained.forEach(([beforeIdx, afterIdx]) => {\n      newPanels[afterIdx] = prevOriginalPanels[beforeIdx];\n      newPanels[afterIdx].setIndex(afterIdx);\n    });\n\n    added.forEach(addIndex => {\n      newPanels[addIndex] = new Panel(null, addIndex, this.viewport);\n    });\n\n    if (isCircular) {\n      counter(cloneCount).forEach(groupIndex => {\n        const prevCloneGroup = prevClonedPanels[groupIndex];\n        const newCloneGroup = newClones[groupIndex];\n\n        maintained.forEach(([beforeIdx, afterIdx]) => {\n          newCloneGroup[afterIdx] = prevCloneGroup\n            ? prevCloneGroup[beforeIdx]\n            : newPanels[afterIdx].clone(groupIndex, false);\n\n          newCloneGroup[afterIdx].setIndex(afterIdx);\n        });\n\n        added.forEach(addIndex => {\n          const newPanel = newPanels[addIndex];\n\n          newCloneGroup[addIndex] = newPanel.clone(groupIndex, false);\n        });\n      });\n    }\n\n    added.forEach(index => { viewport.updateCheckedIndexes({ min: index, max: index }); });\n    removed.forEach(index => { viewport.updateCheckedIndexes({ min: index - 1, max: index + 1 }); });\n\n    const checkedIndexes = viewport.getCheckedIndexes();\n    checkedIndexes.forEach(([min, max], idx) => {\n      // Push checked indexes backward\n      const pushedIndex = added.filter(index => index < min && panelManager.has(index)).length\n        - removed.filter(index => index < min).length;\n      checkedIndexes.splice(idx, 1, [min + pushedIndex, max + pushedIndex]);\n    });\n\n    // Only effective only when there are least one panel which have changed its index\n    if (changed.length > 0) {\n      // Removed checked index by changed ones after pushing\n      maintained.forEach(([, next]) => { viewport.updateCheckedIndexes({ min: next, max: next }); });\n    }\n    panelManager.replacePanels(newPanels, newClones);\n    this.isPanelChangedAtBeforeSync = true;\n  }\n\n  /**\n   * Synchronize info of panels with DOM info given by external rendering.\n   * @ko 외부 렌더링 방식에 의해 입력받은 DOM의 정보와 현재 플리킹이 갖는 패널 정보를 동기화 한다.\n   * @private\n   * @param - Info object of how panel elements are changed.<ko>패널의 DOM 요소들의 변경 정보를 담는 오브젝트.</ko>\n   */\n  public sync(diffInfo: SyncResult): this {\n    const { list, maintained, added, changed, removed } = diffInfo;\n\n    // Did not changed at all\n    if (added.length <= 0 && removed.length <= 0 && changed.length <= 0) {\n      return this;\n    }\n    const viewport = this.viewport;\n    const { renderOnlyVisible, circular } = this.options;\n    const panelManager = viewport.panelManager;\n\n    if (!renderOnlyVisible) {\n      const indexRange = panelManager.getRange();\n      let beforeDiffInfo: BeforeSyncResult = diffInfo;\n\n      if (circular) {\n        const prevOriginalPanelCount = indexRange.max;\n        const originalPanelCount = (list.length / (panelManager.getCloneCount() + 1)) >> 0;\n        const originalAdded = added.filter(index => index < originalPanelCount);\n        const originalRemoved = removed.filter(index => index <= prevOriginalPanelCount);\n        const originalMaintained = maintained.filter(([beforeIdx]) => beforeIdx <= prevOriginalPanelCount);\n        const originalChanged = changed.filter(([beforeIdx]) => beforeIdx <= prevOriginalPanelCount);\n\n        beforeDiffInfo = {\n          added: originalAdded,\n          maintained: originalMaintained,\n          removed: originalRemoved,\n          changed: originalChanged,\n        };\n      }\n      this.beforeSync(beforeDiffInfo);\n    }\n\n    const visiblePanels = renderOnlyVisible\n      ? viewport.getVisiblePanels()\n      : this.getAllPanels(true);\n\n    added.forEach(addedIndex => {\n      const addedElement = list[addedIndex];\n      const beforePanel = visiblePanels[addedIndex] as Panel;\n\n      beforePanel.setElement(addedElement);\n      // As it can be 0\n      beforePanel.unCacheBbox();\n    });\n    if (this.isPanelChangedAtBeforeSync) {\n      // Reset visible panels\n      viewport.setVisiblePanels([]);\n      this.isPanelChangedAtBeforeSync = false;\n    }\n    viewport.resize();\n\n    return this;\n  }\n\n  private listenInput(): void {\n    const flicking = this;\n    const viewport = flicking.viewport;\n    const stateMachine = viewport.stateMachine;\n\n    // Set event context\n    flicking.eventContext = {\n      flicking,\n      viewport: flicking.viewport,\n      transitTo: stateMachine.transitTo,\n      triggerEvent: flicking.triggerEvent,\n      moveCamera: flicking.moveCamera,\n      stopCamera: viewport.stopCamera,\n    };\n\n    const handlers = {};\n    for (const key in AXES_EVENTS) {\n      const eventType = AXES_EVENTS[key];\n\n      handlers[eventType] = (e: any) => stateMachine.fire(eventType, e, flicking.eventContext);\n    }\n\n    // Connect Axes instance with PanInput\n    flicking.viewport.connectAxesHandler(handlers);\n  }\n\n  private listenResize(): void {\n    if (this.options.autoResize) {\n      window.addEventListener(\"resize\", this.resize);\n    }\n  }\n\n  private triggerEvent = <T extends FlickingEvent>(\n    eventName: string,\n    axesEvent: any,\n    isTrusted: boolean,\n    params: Partial<T> = {},\n  ): TriggerCallback => {\n    const viewport = this.viewport;\n\n    let canceled: boolean = true;\n\n    // Ignore events before viewport is initialized\n    if (viewport) {\n      const state = viewport.stateMachine.getState();\n      const { prev, next } = viewport.getScrollArea();\n      const pos = viewport.getCameraPosition();\n      let progress = getProgress(pos, [prev, prev, next]);\n\n      if (this.options.circular) {\n        progress %= 1;\n      }\n      canceled = !super.trigger(eventName, merge({\n        type: eventName,\n        index: this.getIndex(),\n        panel: this.getCurrentPanel(),\n        direction: state.direction,\n        holding: state.holding,\n        progress,\n        axesEvent,\n        isTrusted,\n      }, params));\n    }\n\n    return {\n      onSuccess(callback: () => void): TriggerCallback {\n        if (!canceled) {\n          callback();\n        }\n        return this;\n      },\n      onStopped(callback: () => void): TriggerCallback {\n        if (canceled) {\n          callback();\n        }\n        return this;\n      },\n    } as TriggerCallback;\n  }\n\n  // Return result of \"move\" event triggered\n  private moveCamera = (axesEvent: any): TriggerCallback => {\n    const viewport = this.viewport;\n    const state = viewport.stateMachine.getState();\n    const options = this.options;\n\n    const pos = axesEvent.pos.flick;\n    const previousPosition = viewport.getCameraPosition();\n\n    if (axesEvent.isTrusted && state.holding) {\n      const inputOffset = options.horizontal\n        ? axesEvent.inputEvent.offsetX\n        : axesEvent.inputEvent.offsetY;\n\n      const isNextDirection = inputOffset < 0;\n\n      let cameraChange = pos - previousPosition;\n      const looped = isNextDirection === (pos < previousPosition);\n      if (options.circular && looped) {\n        // Reached at max/min range of axes\n        const scrollAreaSize = viewport.getScrollAreaSize();\n        cameraChange = (cameraChange > 0 ? -1 : 1) * (scrollAreaSize - Math.abs(cameraChange));\n      }\n\n      const currentDirection = cameraChange === 0\n        ? state.direction\n        : cameraChange > 0\n          ? DIRECTION.NEXT\n          : DIRECTION.PREV;\n\n      state.direction = currentDirection;\n    }\n    state.delta += axesEvent.delta.flick;\n\n    viewport.moveCamera(pos, axesEvent);\n    return this.triggerEvent(EVENTS.MOVE, axesEvent, axesEvent.isTrusted)\n      .onStopped(() => {\n        // Undo camera movement\n        viewport.moveCamera(previousPosition, axesEvent);\n      });\n  }\n}\n\nexport default Flicking;\n","import Flicking from \"./Flicking\";\nimport { withFlickingMethods } from \"./utils\";\nimport { DEFAULT_OPTIONS, MOVE_TYPE } from \"./consts\";\n\n(Flicking as any).withFlickingMethods = withFlickingMethods;\n(Flicking as any).DEFAULT_OPTIONS = DEFAULT_OPTIONS;\n(Flicking as any).MOVE_TYPE = MOVE_TYPE;\nexport default Flicking;\n"],"names":["MOVE_TYPE","SNAP","FREE_SCROLL","DEFAULT_MOVE_TYPE_OPTIONS","snap","type","count","freeScroll","isBrowser","document","DEFAULT_OPTIONS","classPrefix","deceleration","horizontal","circular","infinite","infiniteThreshold","lastIndex","Infinity","threshold","duration","panelEffect","x","Math","pow","defaultIndex","inputType","thresholdAngle","bounce","autoResize","adaptive","zIndex","bound","overflow","hanger","anchor","gap","moveType","useOffset","isEqualSize","isConstantSize","renderOnlyVisible","renderExternal","iOSEdgeSwipeThreshold","collectStatistics","DEFAULT_VIEWPORT_CSS","position","DEFAULT_CAMERA_CSS","width","height","willChange","DEFAULT_PANEL_CSS","EVENTS","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","CHANGE","RESTORE","SELECT","NEED_PANEL","VISIBLE_CHANGE","AXES_EVENTS","HOLD","RELEASE","ANIMATION_END","FINISH","STATE_TYPE","DIRECTION","PREV","NEXT","FLICKING_METHODS","prev","next","moveTo","getIndex","getAllPanels","getCurrentPanel","getElement","getPanel","getPanelCount","getStatus","getVisiblePanels","enableInput","disableInput","destroy","resize","setStatus","isPlaying","checkTranslateSupport","transforms","webkitTransform","msTransform","MozTransform","OTransform","transform","name","has3d","supportedStyle","documentElement","style","transformName","prefixedTransform","Error","el","createElement","insertBefore","styleVal","window","getComputedStyle","getPropertyValue","parentElement","removeChild","transformInfo","length","TRANSFORM","target","_i","srcs","forEach","source","Object","keys","key","value","element","Array","isArray","elements","isString","tempDiv","innerHTML","push","toArray","children","firstChild","className","classList","contains","split","indexOf","cssObj","property","val","min","max","iterable","slice","call","cssValue","base","defaultVal","defaultValue","cssRegex","clamp","idx","calculatedValue","matchResult","exec","sign","unit","parsedValue","parseFloat","pos","range","center","callback","i","counterArray","indexed","size","originalStyle","setAttribute","removeAttribute","clientRect","y","offsetWidth","offsetHeight","getBoundingClientRect","left","top","index","viewport","prevSibling","nextSibling","clonedPanels","state","relativeAnchorPosition","isClone","isVirtual","cloneIndex","cachedBbox","setElement","givenBbox","this","options","bbox","getBbox","prevSize","parseArithmeticExpression","panel","cloneState","panelCount","panelManager","scrollAreaSize","getScrollAreaSize","floor","getPosition","getCurrentProgress","outsetRange","getSize","getRelativeHangerPosition","getRelativeAnchorPosition","getProgress","getCameraPosition","panelSize","relativePanelPosition","rightRelativePanelPosition","visibleSize","eventType","currentPanel","getHangerPosition","getAnchorPosition","findEstimatedPosition","updateFunction","shouldResize","identicalPanels","getIdenticalPanels","eachPanel","unCacheBbox","addVisiblePanel","currentIndex","currentPosition","prevPanelIndex","prevPanelPosition","prevPanelSize","hasEmptyPanelBetween","notYetMinPanel","newPosition","prevPanel","clone","getCloneIndex","setPosition","getLastIndex","nextPanelIndex","nextPanelPosition","notYetMaxPanel","nextPanel","parsedElements","parseElement","firstPanel","targetIndex","insert","remove","option","preserveUI","restoreStyle","wasVisible","cameraElement","Boolean","parentNode","getCameraElement","appendChild","classes","classes_1","hasClass","original","getClonedPanels","offset","elementStyle","currentElementStyle","styleToApply","cloneElement","cloneNode","clonedPanel","Panel","clonedState","removeClonedPanelsAfter","start","removingPanels","splice","removeElement","currentElement","getAttribute","add","replace","applyCSS","panels","clones","cloneCount","reduce","allClones","newPanels","newClones","findIndex","filter","possibleLastPanel","lastPanel","shouldRender","isCircular","findFirstPanelFrom","siblingElement","insertNewPanels","panelsAfterIndex","emptyPanelCount","removedPanels","newLastIndex","panelCount_1","pushedIndex","concat","reverse","setIndex","updateIndex","addNewClones","cloneSet","replacedPanels","wasNonEmptyCount","deleteCount","deletedPanels","nonEmptyIndexFromLast","allPanels","allPanelsCount","insertTarget_1","newClones_1","allPanels_1","_a","originalPanels","getCloneCount","lastPanelClones","nextSiblingClones","counter","cloneNextSibling","lastPanelSibling","cloneSiblingElement","nextElementSibling","map","_this","this_1","insertClones","insertingIndex","fragment_1","createDocumentFragment","prevState","delta","direction","targetPanel","lastPosition","nextState","e","context","tslib_1","flicking","triggerEvent","transitTo","moveCamera","onSuccess","onStopped","onChange","State","inputEvent","offsetX","offsetY","flick","setTo","releaseEvent","srcEvent","touch","clickedElement","clickedPanel","cameraPosition","clickedPanelPosition","changedTouches","elementFromPoint","clientX","clientY","findPanelOf","stopCamera","absDelta","abs","velocity","velocityX","velocityY","inputDelta","deltaX","deltaY","isNextDirection","swipeDistance","swipeAngle","atan","PI","belowAngleThreshold","overThreshold","moveTypeContext","axesEvent","interruptDestInfo","findPanelWhenInterrupted","destPos","nearestPanel","getNearestPanel","stop","destInfo","findTargetPanel","findRestorePanel","originalTargetPosition","newCloneIndex","newTargetPosition","newTargetPanel","scrollArea","getScrollArea","loopCount","circulate","setCurrentPanel","isTrusted","updateAdaptiveSize","updateCameraPosition","updateAxesPosition","IdleState","nextStateType","currentState","HoldingState","DraggingState","AnimatingState","DisabledState","onExit","onEnter","onHold","onRelease","onAnimationEnd","onFinish","_super","ctx","snapCount","eventDelta","minimumDistanceToChange","calcBrinkOfChange","nearestIsCurrent","shouldMoveWhenBounceIs0","canSetBoundMode","shouldMoveToAdjacent","isOutOfBound","findSnappedPanel","findAdjacentPanel","halfGap","estimatedHangerPos","panelToMove","cycleIndex","passedPanelCount","originalPanel","getOriginalPanel","panelPosition","siblingPanel","panelIndex","siblingIndex","originalPosition","defaultDuration","getCurrentIndex","get","hangerPosition","firstClonedPanel","basePanel","basePosition","adjacentPanel","targetRelativeAnchorPosition","estimatedPosition","findRestorePanelInCircularMode","lapped","findNearestPanelAt","stateMachine","getState","currentPanelPosition","lastHangerPosition","Snap","panelMaintainRatio","relativeHangerPosition","positionOffset","translate","checkedIndexes","isAdaptiveCached","isViewportGiven","isCameraGiven","originalViewportStyle","originalCameraStyle","StateMachine","visiblePanels","panelBboxes","build","eventResult","axes","isBetween","findNearestPanel","originalNearestPosition","checkNeedPanel","updateVisiblePanels","posOffset","moveCoord","coord","round","join","viewportElement","updateSize","updateOriginalPanelPositions","updateScrollArea","updateClonePanels","updatePlugins","minimumDistance","prevPosition","nextPosition","distance","nearest","shortestDistance","identical","anchorPosition","getVisibleIndexOf","panInput","enable","disable","newCenterPanel","newPanelPosition","resizePanels","updateCheckedIndexes","indexes","visibleIndex","newCurrentIndex","getRange","undefined","shouldApplyAdaptive","viewportStyle","panelBbox","sizeToApply","viewportBbox","viewportSize","maximum","updateBbox","positionBounded","isFreeScroll","is","holding","playing","plugins","plugin","update","topmostElement_1","deletingElement","wrapper","removePlugins","status","html","refreshPanels","createdPanels","orderedPanels","createdPanel","replacePanels","setCloneCount","cameraPos_1","viewportSize_1","getNext","isOutOfViewport","getAbsIndex_1","nextPanels","prevPanels","sort","panel1","panel2","outsetProgress","getOutsetProgress","NaN","prevRange","nextRange","nearestAnchorPos","nearestIndex","nearestSize","hangerIsNextToNearestPanel","targetPosition","progressBetween","off","on","axesHandlers","setLastIndex","handlers","newPlugins","init","currentPlugins","changedRange","removed","prevVisiblePanels","equalSizeClasses_1","cached_1","fragment","overlappedClass","getOverlappedClass","clonePanels","updateClonedPanelPositions","chainAllPanels","visiblePanel","setElements","applyCSSValue","setMoveType","setAxesInstance","setDefaultPanel","moveToDefaultPanel","viewportCandidate","hasViewportElement","cameraCandidate","hasCameraElement","child","minHeight","minWidth","PanelManager","FreeScroll","Axes","easing","interruptable","PanInput","scale","connect","indexRange","panelAtLeftBoundary","reversedPanels","sumOriginalPanelSize","areaPrev","sizeSum","reversedPanels_1","panelAtRightBoundary","areaNext","panels_1","needCloneOnPrev","ceil","prevCloneCount","origPanel","removeClonesAfter","defaultPanel","defaultPosition","maintainingPanel","accumulatedSize","nextPanelPos","total","setPositionCSS","clonedPanels_1","clonedPanelPos","lastReplacePosition","_b","replacePosition","relAnchorPosOfCombined","anchorPos","parsedVal","parsedBounce","arr","constructor","axis","maxLastIndex","checkingPanel","firstIndex","nextIndex","currentNearestPosition","triggerNeedPanel","lastPanelAfterNeed","cameraPrev","checkingIndex","prevIndex","firstPanelAfterNeed","params","alreadyTriggered","some","hasHandler","hasOn","fill","insertAfter","firstVisiblePanelPos","firstVisiblePanel","lastVisiblePanel","getAbsIndex","newVisibleRange","newVisiblePanels","calcVisiblePanels","addedPanels","panelElement","trigger","prevRefCount","newRefCount","newPanel","newIndex","added","equalSizeClasses_2","defaultBbox_1","default","shouldResetElements","parent","origStyle","appendUncachedPanelElements","eventName","progress","canceled","merge","inputOffset","looped","cameraChange","currentDirection","previousPosition","querySelector","nodeName","nodeType","currentOptions","Viewport","listenInput","listenResize","focus","nearestPosition","identicals","current","includeClone","outerHTML","restore","addPlugins","removeEventListener","diffResult","maintained","values","before","after","prevPanelCount","prevList","list","renderingPanels","setVisiblePanels","diffInfo","changed","prevClonedPanels","prevOriginalPanels","beforeIdx","afterIdx","addIndex","groupIndex","prevCloneGroup","newCloneGroup","getCheckedIndexes","has","isPanelChangedAtBeforeSync","prevOriginalPanelCount_1","originalPanelCount_1","originalAdded","originalRemoved","beforeDiffInfo","beforeSync","addedIndex","addedElement","beforePanel","eventContext","fire","connectAxesHandler","addEventListener","Flicking","Component","withFlickingMethods","prototype","flickingName","args","result"],"mappings":"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"}