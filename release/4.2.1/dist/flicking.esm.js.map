{"version":3,"file":"flicking.esm.js","sources":["../src/core/FlickingError.ts","../src/const/error.ts","../src/const/external.ts","../src/utils.ts","../src/core/Viewport.ts","../src/const/axes.ts","../src/control/states/State.ts","../src/control/states/IdleState.ts","../src/control/states/HoldingState.ts","../src/control/states/DraggingState.ts","../src/control/states/AnimatingState.ts","../src/control/states/DisabledState.ts","../src/control/StateMachine.ts","../src/control/AxesController.ts","../src/control/Control.ts","../src/core/AnchorPoint.ts","../src/control/SnapControl.ts","../src/control/FreeControl.ts","../src/control/StrictControl.ts","../src/camera/Camera.ts","../src/camera/LinearCamera.ts","../src/camera/CircularCamera.ts","../src/camera/BoundCamera.ts","../src/renderer/RenderingStrategy/RawRenderingStrategy.ts","../src/renderer/Renderer.ts","../src/core/panel/Panel.ts","../src/core/panel/ElementPanel.ts","../src/renderer/VanillaRenderer.ts","../src/renderer/ExternalRenderer.ts","../src/renderer/RenderingStrategy/VisibleRenderingStrategy.ts","../src/Flicking.ts","../src/core/panel/ExternalPanel.ts","../src/cfc/withFlickingMethods.ts","../src/cfc/sync.ts","../src/cfc/getRenderingPanels.ts","../src/cfc/getDefaultCameraTransform.ts","../src/index.ts"],"sourcesContent":["/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n/**\n * Special type of known error that {@link Flicking} throws.\n * @ko Flicking 내부에서 알려진 오류 발생시 throw되는 에러\n * @property {number} code Error code<ko>에러 코드</ko>\n * @property {string} message Error message<ko>에러 메시지</ko>\n * @see {@link Constants.ERROR_CODE ERROR_CODE}\n * @example\n * ```ts\n * import Flicking, { FlickingError, ERROR_CODES } from \"@egjs/flicking\";\n * try {\n *   const flicking = new Flicking(\".flicking-viewport\")\n * } catch (e) {\n *   if (e instanceof FlickingError && e.code === ERROR_CODES.ELEMENT_NOT_FOUND) {\n *     console.error(\"Element not found\")\n *   }\n * }\n * ```\n */\nclass FlickingError extends Error {\n  /**\n   * @param message Error message<ko>에러 메시지</ko>\n   * @param code Error code<ko>에러 코드</ko>\n   */\n  public constructor(\n    public message: string,\n    public code: number) {\n    super(message);\n    Object.setPrototypeOf(this, FlickingError.prototype);\n    this.name = \"FlickingError\";\n  }\n}\n\nexport default FlickingError;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\n\n/**\n * Error codes of {@link FlickingError}. Below are the conditions where each error code occurs.\n * @ko {@link FlickingError}의 에러 코드. 아래는 각각의 에러 코드가 발생하는 조건입니다.\n * @name ERROR_CODE\n * @constant\n * @type object\n * @property {number} WRONG_TYPE Parameter type is wrong<ko>패러미터의 타입이 잘못되었을 경우</ko>\n * @property {number} ELEMENT_NOT_FOUND Element is not found inside page with the given CSS selector<ko>주어진 CSS selector로 페이지 내에서 해당 엘리먼트를 찾지 못했을 경우</ko>\n * @property {number} VAL_MUST_NOT_NULL Expected non-null value, but given `null` or `undefined`<ko>값을 기대했으나, `null`이나 `undefined`를 받은 경우</ko>\n * @property {number} NOT_ATTACHED_TO_FLICKING When Flicking's component is not initialized (i.e. {@link Flicking#init} is not called)<ko>Flicking 내부 컴포넌트가 초기화되지 않은 경우 ({@link Flicking#init}이 호출되지 않은 경우)</ko>\n * @property {number} WRONG_OPTION One of the options is wrong<ko>옵션들 중 잘못된 값이 있을 때</ko>\n * @property {number} INDEX_OUT_OF_RANGE When the given index is out of possible range<ko>인덱스가 주어진 범위를 벗어난 경우</ko>\n * @property {number} POSITION_NOT_REACHABLE When {@link Control#moveToPosition}'s position parameter is out of possible range.<ko>{@link Control#moveToPosition}의 `position` 패러미터가 도달 가능한 범위를 벗어난 경우</ko>\n * @property {number} TRANSFORM_NOT_SUPPORTED CSS `transform` property is not available(<=IE8) <ko>CSS `transform` 속성을 사용할 수 없는 경우(<=IE8)</ko>\n * @property {number} STOP_CALLED_BY_USER When the event's `stop()` is called by user.<ko>사용자에 의해 이벤트의 `stop()`이 호출된 경우</ko>\n * @property {number} ANIMATION_INTERRUPTED When the animation is interrupted by user.<ko>사용자에 의해 애니메이션이 중단된 경우</ko>\n * @property {number} ANIMATION_ALREADY_PLAYING When the animation is already playing.<ko>현재 애니메이션이 이미 진행중인 경우</ko>\n * @property {number} NOT_ALLOWED_IN_FRAMEWORK When the non-allowed method is called from frameworks (React, Angular, Vue...)\n * <ko>프레임워크(React, Angular, Vue ...)에서 사용 불가능한 메소드를 호출했을 경우</ko>\n * @property {number} NOT_INITIALIZED When the {@link Flicking#init} is not called before but is needed<ko>{@link Flicking#init}의 호출이 필요하나, 아직 호출되지 않았을 경우</ko>\n * @property {number} NO_ACTIVE When there're no active panel that flicking has selected. This may be due to the absence of any panels<ko>현재 Flicking이 선택한 패널이 없을 경우. 일반적으로 패널이 하나도 없는 경우에 발생할 수 있습니다</ko>\n */\nexport const CODE = {\n  WRONG_TYPE: 0,\n  ELEMENT_NOT_FOUND: 1,\n  VAL_MUST_NOT_NULL: 2,\n  NOT_ATTACHED_TO_FLICKING: 3,\n  WRONG_OPTION: 4,\n  INDEX_OUT_OF_RANGE: 5,\n  POSITION_NOT_REACHABLE: 6,\n  TRANSFORM_NOT_SUPPORTED: 7,\n  STOP_CALLED_BY_USER: 8,\n  ANIMATION_INTERRUPTED: 9,\n  ANIMATION_ALREADY_PLAYING: 10,\n  NOT_ALLOWED_IN_FRAMEWORK: 11,\n  NOT_INITIALIZED: 12,\n  NO_ACTIVE: 13\n} as const;\n\nexport const MESSAGE = {\n  WRONG_TYPE: (wrongVal: any, correctTypes: string[]) => `${wrongVal}(${typeof wrongVal}) is not a ${correctTypes.map(type => `\"${type}\"`).join(\" or \")}.`,\n  ELEMENT_NOT_FOUND: (selector: string) => `Element with selector \"${selector}\" not found.`,\n  VAL_MUST_NOT_NULL: (val: any, name: string) => `${name} should be provided. Given: ${val}`,\n  NOT_ATTACHED_TO_FLICKING: (name: string) => `${name} is not attached to the Flicking instance. \"init()\" should be called first.`,\n  WRONG_OPTION: (optionName: string, val: any) => `Option \"${optionName}\" is not in correct format, given: ${val}`,\n  INDEX_OUT_OF_RANGE: (val: number, min: number, max: number) => `Index \"${val}\" is out of range: should be between ${min} and ${max}.`,\n  POSITION_NOT_REACHABLE: (position: number) => `Position \"${position}\" is not reachable.`,\n  TRANSFORM_NOT_SUPPORTED: \"Browser does not support CSS transform.\",\n  STOP_CALLED_BY_USER: \"Event stop() is called by user.\",\n  ANIMATION_INTERRUPTED: \"Animation is interrupted by user input.\",\n  ANIMATION_ALREADY_PLAYING: \"Animation is already playing.\",\n  NOT_ALLOWED_IN_FRAMEWORK: \"This behavior is not allowed in the frameworks like React, Vue, or Angular.\",\n  NOT_INITIALIZED: \"Flicking is not initialized yet, call init() first.\",\n  NO_ACTIVE: \"There's no active panel that Flicking has selected. This may be due to the absence of any panels.\"\n} as const;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nexport { CODE as ERROR_CODE } from \"./error\";\n\n/**\n * Event type object with event name strings of {@link Flicking}\n * @ko {@link Flicking}의 이벤트 이름 문자열들을 담은 객체\n * @type {object}\n * @property {\"holdStart\"} HOLD_START holdStart event<ko>holdStart 이벤트</ko>\n * @property {\"holdEnd\"} HOLD_END holdEnd event<ko>holdEnd 이벤트</ko>\n * @property {\"moveStart\"} MOVE_START moveStart event<ko>moveStart 이벤트</ko>\n * @property {\"move\"} MOVE move event<ko>move 이벤트</ko>\n * @property {\"moveEnd\"} MOVE_END moveEnd event<ko>moveEnd 이벤트</ko>\n * @property {\"willChange\"} WILL_CHANGE willChange event<ko>willChange 이벤트</ko>\n * @property {\"changed\"} CHANGED changed event<ko>changed 이벤트</ko>\n * @property {\"willRestore\"} WILL_RESTORE willRestore event<ko>willRestore 이벤트</ko>\n * @property {\"restored\"} RESTORED restored event<ko>restored 이벤트</ko>\n * @property {\"select\"} SELECT select event<ko>select 이벤트</ko>\n * @property {\"needPanel\"} NEED_PANEL needPanel event<ko>needPanel 이벤트</ko>\n * @property {\"panelChange\"} PANEL_CHANGE panelChange event<ko>panelChange 이벤트</ko>\n * @example\n * ```ts\n * import { EVENTS } from \"@egjs/flicking\";\n * EVENTS.MOVE_START; // \"moveStart\"\n * ```\n */\nexport const EVENTS = {\n  READY: \"ready\",\n  BEFORE_RESIZE: \"beforeResize\",\n  AFTER_RESIZE: \"afterResize\",\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  WILL_CHANGE: \"willChange\",\n  CHANGED: \"changed\",\n  WILL_RESTORE: \"willRestore\",\n  RESTORED: \"restored\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n  VISIBLE_CHANGE: \"visibleChange\",\n  REACH_EDGE: \"reachEdge\",\n  PANEL_CHANGE: \"panelChange\"\n} as const;\n\n/**\n * An object with all possible predefined literal string for the {@link Flicking#align align} option\n * @ko {@link Flicking#align align} 옵션에 사용되는 미리 정의된 리터럴 상수들을 담고 있는 객체\n * @type {object}\n * @property {\"prev\"} PREV left/top align<ko>좌/상 정렬</ko>\n * @property {\"center\"} CENTER center align<ko>중앙 정렬</ko>\n * @property {\"next\"} NEXT right/bottom align<ko>우/하 정렬</ko>\n */\nexport const ALIGN = {\n  PREV: \"prev\",\n  CENTER: \"center\",\n  NEXT: \"next\"\n} as const;\n\n/**\n * An object of directions\n * @ko 방향을 나타내는 값들을 담고 있는 객체\n * @type {object}\n * @property {\"PREV\"} PREV \"left\" when {@link Flicking#horizontal horizontal} is true, and \"top\" when {@link Flicking#horizontal horizontal} is false\n * <ko>{@link Flicking#horizontal horizontal}가 `true`일 경우 왼쪽, {@link Flicking#horizontal horizontal}가 `false`일 경우 위쪽을 의미합니다</ko>\n * @property {\"NEXT\"} NEXT \"right\" when {@link Flicking#horizontal horizontal} is true, and \"bottom\" when {@link Flicking#horizontal horizontal} is false\n * <ko>{@link Flicking#horizontal horizontal}가 `true`일 경우 오른쪽, {@link Flicking#horizontal horizontal}가 `false`일 경우 아래쪽을 의미합니다</ko>\n * @property {null} NONE This value usually means it's the same position<ko>주로 제자리인 경우를 의미합니다</ko>\n */\nexport const DIRECTION = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n  NONE: null\n} as const;\n\n/**\n * An object with all possible {@link Flicking#moveType moveType}s\n * @ko Flicking이 제공하는 {@link Flicking#moveType moveType}들을 담고 있는 객체\n * @type {object}\n * @property {\"snap\"} SNAP Flicking's {@link Flicking#moveType moveType} that enables {@link SnapControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link SnapControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n * @property {\"freeScroll\"} FREE_SCROLL Flicking's {@link Flicking#moveType moveType} that enables {@link FreeControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link FreeControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n * @property {\"strict\"} STRICT Flicking's {@link Flicking#moveType moveType} that enables {@link StrictControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link StrictControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n */\nexport const MOVE_TYPE = {\n  SNAP: \"snap\",\n  FREE_SCROLL: \"freeScroll\",\n  STRICT: \"strict\"\n} as const;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking, { FlickingOptions } from \"./Flicking\";\nimport FlickingError from \"./core/FlickingError\";\nimport * as ERROR from \"./const/error\";\nimport { ALIGN, DIRECTION } from \"./const/external\";\nimport { LiteralUnion, Merged, ValueOf } from \"./type/internal\";\nimport { ElementLike } from \"./type/external\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const merge = <From extends object, To extends object>(target: From, ...sources: To[]): Merged<From, To> => {\n  sources.forEach(source => {\n    Object.keys(source).forEach(key => {\n      target[key] = source[key] as unknown;\n    });\n  });\n\n  return target as Merged<From, To>;\n};\n\nexport const getElement = (el: HTMLElement | string | null, parent?: HTMLElement): HTMLElement => {\n  let targetEl: HTMLElement | null = null;\n\n  if (isString(el)) {\n    const parentEl = parent ? parent : document;\n    const queryResult = parentEl.querySelector(el);\n    if (!queryResult) {\n      throw new FlickingError(ERROR.MESSAGE.ELEMENT_NOT_FOUND(el), ERROR.CODE.ELEMENT_NOT_FOUND);\n    }\n    targetEl = queryResult as HTMLElement;\n  } else if (el && el.nodeType === Node.ELEMENT_NODE) {\n    targetEl = el;\n  }\n\n  if (!targetEl) {\n    throw new FlickingError(ERROR.MESSAGE.WRONG_TYPE(el, [\"HTMLElement\", \"string\"]), ERROR.CODE.WRONG_TYPE);\n  }\n\n  return targetEl;\n};\n\nexport const checkExistence = (value: any, nameOnErrMsg: string) => {\n  if (value == null) {\n    throw new FlickingError(ERROR.MESSAGE.VAL_MUST_NOT_NULL(value, nameOnErrMsg), ERROR.CODE.VAL_MUST_NOT_NULL);\n  }\n};\n\nexport const clamp = (x: number, min: number, max: number) => Math.max(Math.min(x, max), min);\n\nexport const getFlickingAttached = (val: Flicking | null, nameToThrowOnError: string): Flicking => {\n  if (!val) {\n    throw new FlickingError(ERROR.MESSAGE.NOT_ATTACHED_TO_FLICKING(nameToThrowOnError), ERROR.CODE.NOT_ATTACHED_TO_FLICKING);\n  }\n\n  return val;\n};\n\nexport const toArray = <T>(iterable: ArrayLike<T>): T[] => [].slice.call(iterable) as T[];\n\nexport const parseAlign = (align: LiteralUnion<ValueOf<typeof ALIGN>> | number, size: number): number => {\n  let alignPoint: number | null;\n  if (isString(align)) {\n    switch (align) {\n      case ALIGN.PREV:\n        alignPoint = 0;\n        break;\n      case ALIGN.CENTER:\n        alignPoint = 0.5 * size;\n        break;\n      case ALIGN.NEXT:\n        alignPoint = size;\n        break;\n      default:\n        alignPoint = parseArithmeticSize(align, size);\n        if (alignPoint == null) {\n          throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"align\", align), ERROR.CODE.WRONG_OPTION);\n        }\n    }\n  } else {\n    alignPoint = align as number;\n  }\n\n  return alignPoint;\n};\n\nexport const parseBounce = (bounce: FlickingOptions[\"bounce\"], size: number): number[] => {\n  let parsedBounce: Array<number | null>;\n\n  if (Array.isArray(bounce)) {\n    parsedBounce = (bounce as string[]).map(val => parseArithmeticSize(val, size));\n  } else {\n    const parsedVal = parseArithmeticSize(bounce, size);\n\n    parsedBounce = [parsedVal, parsedVal];\n  }\n\n  return parsedBounce.map(val => {\n    if (val == null) {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"bounce\", bounce), ERROR.CODE.WRONG_OPTION);\n    }\n    return val;\n  });\n};\n\nexport const parseArithmeticSize = (cssValue: number | string, base: number): number | null => {\n  const parsed = parseArithmeticExpression(cssValue);\n\n  if (parsed == null) return null;\n\n  return parsed.percentage * base + parsed.absolute;\n};\n\nexport const parseArithmeticExpression = (cssValue: number | string): { percentage: number; absolute: number } | null => {\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return { percentage: 0, absolute: cssValue };\n  }\n\n  const parsed = {\n    percentage: 0,\n    absolute: 0\n  };\n  let idx = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n    const parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return null;\n    }\n\n    const signMultiplier = sign === \"+\" ? 1 : -1;\n\n    if (unit === \"%\") {\n      parsed.percentage += signMultiplier * (parsedValue / 100);\n    } else {\n      parsed.absolute += signMultiplier * parsedValue;\n    }\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return null;\n  }\n\n  return parsed;\n};\n\nexport const parseCSSSizeValue = (val: string | number): string => isString(val) ? val : `${val}px`;\n\nexport const getDirection = (start: number, end: number): ValueOf<typeof DIRECTION> => {\n  if (start === end) return DIRECTION.NONE;\n  return start < end ? DIRECTION.NEXT : DIRECTION.PREV;\n};\n\nexport const parseElement = (element: ElementLike | ElementLike[]): HTMLElement[] => {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n      while (tempDiv.firstChild) {\n        tempDiv.removeChild(tempDiv.firstChild);\n      }\n    } else if (el && el.nodeType === Node.ELEMENT_NODE) {\n      elements.push(el);\n    } else {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_TYPE(el, [\"HTMLElement\", \"string\"]), ERROR.CODE.WRONG_TYPE);\n    }\n  });\n\n  return elements;\n};\n\nexport const getMinusCompensatedIndex = (idx: number, max: number) => idx < 0 ? clamp(idx + max, 0, max) : clamp(idx, 0, max);\n\nexport const includes = <T>(array: T[], target: any): target is T => {\n  for (const val of array) {\n    if (val === target) return true;\n  }\n  return false;\n};\n\nexport const isString = (val: any): val is string => typeof val === \"string\";\n\nexport const circulatePosition = (pos: number, min: number, max: number) => {\n  const size = max - min;\n\n  if (pos < min) {\n    const offset = (min - pos) % size;\n    pos = max - offset;\n  } else if (pos > max) {\n    const offset = (pos - max) % size;\n    pos = min + offset;\n  }\n\n  return pos;\n};\n\nexport const find = <T>(array: T[], checker: (val: T) => boolean): T | null => {\n  for (const val of array) {\n    if (checker(val)) {\n      return val;\n    }\n  }\n\n  return null;\n};\n\nexport const findRight = <T>(array: T[], checker: (val: T) => boolean): T | null => {\n  for (let idx = array.length - 1; idx >= 0; idx--) {\n    const val = array[idx];\n    if (checker(val)) {\n      return val;\n    }\n  }\n\n  return null;\n};\n\nexport const findIndex = <T>(array: T[], checker: (val: T) => boolean): number => {\n  for (let idx = 0; idx < array.length; idx++) {\n    if (checker(array[idx])) {\n      return idx;\n    }\n  }\n\n  return -1;\n};\n\nexport const getProgress = (pos: number, prev: number, next: number) => (pos - prev) / (next - prev);\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nexport const getStyle = (el: HTMLElement): CSSStyleDeclaration => window.getComputedStyle(el) || (el as any).currentStyle as CSSStyleDeclaration;\n\nexport const isBetween = (val: number, min: number, max: number) => val >= min && val <= max;\n\nexport const circulateIndex = (index: number, max: number): number => {\n  if (index >= max) {\n    return index % max;\n  } else if (index < 0) {\n    return getMinusCompensatedIndex((index + 1) % max - 1, max);\n  } else {\n    return index;\n  }\n};\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getStyle, isString } from \"../utils\";\n\n/**\n * A component that manages viewport size\n * @ko 뷰포트 크기 정보를 담당하는 컴포넌트\n */\nclass Viewport {\n  private _el: HTMLElement;\n  private _width: number;\n  private _height: number;\n  private _isBorderBoxSizing: boolean;\n  private _padding: {\n    left: number;\n    right: number;\n    top: number;\n    bottom: number;\n  };\n\n  /**\n   * A viewport(root) element\n   * @ko 뷰포트(root) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n\n  /**\n   * Viewport width, without paddings\n   * @ko 뷰포트 너비\n   * @type {number}\n   * @readonly\n   */\n  public get width() { return this._width - this._padding.left - this._padding.right; }\n  /**\n   * Viewport height, without paddings\n   * @ko 뷰포트 높이\n   * @type {number}\n   * @readonly\n   */\n  public get height() { return this._height - this._padding.top - this._padding.bottom; }\n  /**\n   * Viewport paddings\n   * @ko 뷰포트 CSS padding 값\n   * @type {object}\n   * @property {number} left CSS `padding-left`\n   * @property {number} right CSS `padding-right`\n   * @property {number} top CSS `padding-top`\n   * @property {number} bottom CSS `padding-bottom`\n   * @readonly\n   */\n  public get padding() { return this._padding; }\n\n  /**\n   * @param el A viewport element<ko>뷰포트 엘리먼트</ko>\n   */\n  public constructor(el: HTMLElement) {\n    this._el = el;\n    this._width = 0;\n    this._height = 0;\n    this._padding = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this._isBorderBoxSizing = false;\n  }\n\n  /**\n   * Change viewport's size.\n   * This will change the actual size of `.flicking-viewport` element by changing its CSS width/height property\n   * @ko 뷰포트 크기를 변경합니다.\n   * `.flicking-viewport` 엘리먼트에 해당 크기의 CSS width/height를 적용합니다\n   * @param {object} [size] New viewport size<ko>새 뷰포트 크기</ko>\n   * @param {number|string} [size.width] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   * @param {number|string} [size.height] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   */\n  public setSize({\n    width,\n    height\n  }: Partial<{\n    width: number | string;\n    height: number | string;\n  }>) {\n    const el = this._el;\n    const padding = this._padding;\n    const isBorderBoxSizing = this._isBorderBoxSizing;\n\n    if (width != null) {\n      if (isString(width)) {\n        el.style.width = width;\n      } else {\n        const newWidth = isBorderBoxSizing\n          ? width + padding.left + padding.right\n          : width;\n        el.style.width = `${newWidth}px`;\n      }\n    }\n    if (height != null) {\n      if (isString(height)) {\n        el.style.height = height;\n      } else {\n        const newHeight = isBorderBoxSizing\n          ? height + padding.top + padding.bottom\n          : height;\n        el.style.height = `${newHeight}px`;\n      }\n    }\n    this.resize();\n  }\n\n  /**\n   * Update width/height to the current viewport element's size\n   * @ko 현재 뷰포트 엘리먼트의 크기로 너비/높이를 업데이트합니다\n   */\n  public resize() {\n    const el = this._el;\n    const elStyle = getStyle(el);\n\n    this._width = el.clientWidth;\n    this._height = el.clientHeight;\n    this._padding = {\n      left: parseFloat(elStyle.paddingLeft),\n      right: parseFloat(elStyle.paddingRight),\n      top: parseFloat(elStyle.paddingTop),\n      bottom: parseFloat(elStyle.paddingBottom)\n    };\n    this._isBorderBoxSizing = elStyle.boxSizing === \"border-box\";\n  }\n}\n\nexport default Viewport;\n","/**\n * All possible @egjs/axes event keys\n * @internal\n */\nexport const EVENT = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\"\n} as const;\n\n/**\n * An Axis key that Flicking uses\n * @internal\n */\nexport const POSITION_KEY = \"flick\";\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OnAnimationEnd, OnChange, OnFinish, OnHold, OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking from \"../../Flicking\";\nimport { EVENTS } from \"../../const/external\";\nimport * as AXES from \"../../const/axes\";\nimport { circulatePosition, getDirection } from \"../../utils\";\n\nexport enum STATE_TYPE {\n  IDLE,\n  HOLDING,\n  DRAGGING,\n  ANIMATING,\n  DISABLED\n}\n\n/**\n * A component that shows the current status of the user input or the animation\n * @ko 현재 사용자 입력 또는 애니메이션 상태를 나타내는 컴포넌트\n * @internal\n */\nabstract class State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract readonly holding: boolean;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract readonly animating: boolean;\n\n  protected _delta: number = 0;\n\n  /**\n   * A sum of delta values of change events from the last hold event of Axes\n   * @ko 이전 hold이벤트부터 change에 의해 발생한 이동 delta값의 합산\n   * @type {number}\n   * @readonly\n   */\n  public get delta() { return this._delta; }\n\n  /**\n   * An callback which is called when state has changed to this state\n   * @ko 현재 상태로 돌입했을때 호출되는 콜백 함수\n   * @param {State} prevState An previous state<ko>이전 상태값</ko>\n   * @return {void}\n   */\n  public onEnter(prevState: State): void {\n    this._delta = prevState._delta;\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onHold(ctx: {\n    flicking: Flicking;\n    axesEvent: OnHold;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onChange(ctx: {\n    flicking: Flicking;\n    axesEvent: OnChange;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onRelease(ctx: {\n    flicking: Flicking;\n    axesEvent: OnRelease;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onAnimationEnd(ctx: {\n    flicking: Flicking;\n    axesEvent: OnAnimationEnd;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event of Axes<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onFinish(ctx: {\n    flicking: Flicking;\n    axesEvent: OnFinish;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  protected _moveToChangedPosition(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n    const delta = axesEvent.delta[AXES.POSITION_KEY];\n\n    if (!delta) {\n      return;\n    }\n\n    this._delta += delta;\n\n    const camera = flicking.camera;\n    const prevPosition = camera.position;\n    const position = axesEvent.pos[AXES.POSITION_KEY];\n    const newPosition = flicking.circularEnabled\n      ? circulatePosition(position, camera.range.min, camera.range.max)\n      : position;\n\n    void camera.lookAt(newPosition);\n\n    const moveEvent = new ComponentEvent(EVENTS.MOVE, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(0, axesEvent.delta[AXES.POSITION_KEY]),\n      axesEvent\n    });\n\n    flicking.trigger(moveEvent);\n\n    if (moveEvent.isCanceled()) {\n      // Return to previous position\n      void camera.lookAt(prevPosition);\n      transitTo(STATE_TYPE.DISABLED);\n    }\n  }\n}\n\nexport default State;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A default state when there's no user input and no animation's playing\n * @ko 사용자의 입력이 없고, 애니메이션이 동작하고있지 않은 기본 상태\n * @internal\n */\nclass IdleState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly animating = false;\n\n  public onEnter() {\n    this._delta = 0;\n  }\n\n  public onHold(ctx: Parameters<State[\"onHold\"]>[0]): void {\n    // Shouldn't do any action until any panels on flicking area\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    if (flicking.renderer.panelCount <= 0) {\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    const holdStartEvent = new ComponentEvent(EVENTS.HOLD_START, {\n      axesEvent\n    });\n\n    flicking.trigger(holdStartEvent);\n\n    if (holdStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      transitTo(STATE_TYPE.HOLDING);\n    }\n  }\n\n  // By methods call\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n    const controller = flicking.control.controller;\n    const animatingContext = controller.animatingContext;\n\n    const moveStartEvent = new ComponentEvent(EVENTS.MOVE_START, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(animatingContext.start, animatingContext.end),\n      axesEvent\n    });\n    flicking.trigger(moveStartEvent);\n\n    if (moveStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n      transitTo(STATE_TYPE.ANIMATING).onChange(ctx);\n    }\n  }\n}\n\nexport default IdleState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Panel from \"../../core/panel/Panel\";\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when user's holding the Flicking area, but not moved a single pixel yet\n * @ko 사용자의 입력이 시작되었으나, 아직 움직이지는 않은 상태\n * @internal\n */\nclass HoldingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly holding = true;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly animating = false;\n\n  private _releaseEvent: OnRelease | null = null;\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    const inputEvent = axesEvent.inputEvent as { offsetX: number; offsetY: number };\n\n    const offset = flicking.horizontal\n      ? inputEvent.offsetX\n      : inputEvent.offsetY;\n\n    const moveStartEvent = new ComponentEvent(EVENTS.MOVE_START, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(0, -offset),\n      axesEvent\n    });\n    flicking.trigger(moveStartEvent);\n\n    if (moveStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n      transitTo(STATE_TYPE.DRAGGING).onChange(ctx);\n    }\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    flicking.trigger(new ComponentEvent(EVENTS.HOLD_END, { axesEvent }));\n\n    if (axesEvent.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      axesEvent.setTo({ flick: flicking.camera.position }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't handle select event here,\n    // As \"finish\" axes event happens\n    this._releaseEvent = axesEvent;\n  }\n\n  public onFinish(ctx: Parameters<State[\"onFinish\"]>[0]): void {\n    const { flicking, transitTo } = ctx;\n\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this._releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this._releaseEvent;\n\n    // Static click\n    /* eslint-disable @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access */\n    const srcEvent = releaseEvent.inputEvent.srcEvent;\n\n    let clickedElement: HTMLElement;\n    if (srcEvent.type === \"touchend\") {\n      const touchEvent = srcEvent as TouchEvent;\n      const touch = touchEvent.changedTouches[0];\n      clickedElement = document.elementFromPoint(touch.clientX, touch.clientY) as HTMLElement;\n    } else {\n      clickedElement = srcEvent.target;\n    }\n    /* eslint-enable */\n\n    const panels = flicking.renderer.panels;\n    let clickedPanel: Panel | null = null;\n\n    for (const panel of panels) {\n      if (panel.contains(clickedElement)) {\n        clickedPanel = panel;\n        break;\n      }\n    }\n\n    if (clickedPanel) {\n      const cameraPosition = flicking.camera.position;\n      const clickedPanelPosition = clickedPanel.position;\n\n      flicking.trigger(new ComponentEvent(EVENTS.SELECT, {\n        index: clickedPanel.index,\n        panel: clickedPanel,\n        // Direction to the clicked panel\n        direction: getDirection(cameraPosition, clickedPanelPosition)\n      }));\n    }\n  }\n}\n\nexport default HoldingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport * as AXES from \"../../const/axes\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when user's dragging the Flicking area\n * @ko 사용자가 드래깅중인 상태\n * @internal\n */\nclass DraggingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly holding = true;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    this._moveToChangedPosition(ctx);\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n    flicking.trigger(new ComponentEvent(EVENTS.HOLD_END, {\n      axesEvent\n    }));\n\n    if (flicking.renderer.panelCount <= 0) {\n      // There're no panels\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    transitTo(STATE_TYPE.ANIMATING);\n\n    const control = flicking.control;\n    const position = axesEvent.destPos[AXES.POSITION_KEY];\n    const duration = Math.max(axesEvent.duration, flicking.duration);\n\n    void control.moveToPosition(position, duration, axesEvent);\n  }\n}\n\nexport default DraggingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when Flicking's animating by user input or method call\n * @ko 사용자 입력이나 메소드 호출에 의해 Flicking의 애니메이션이 동작중인 상태\n * @internal\n */\nclass AnimatingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onHold(ctx: Parameters<State[\"onHold\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    this._delta = 0;\n    flicking.control.updateInput();\n\n    const holdStartEvent = new ComponentEvent(EVENTS.HOLD_START, { axesEvent });\n    flicking.trigger(holdStartEvent);\n\n    if (holdStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      transitTo(STATE_TYPE.DRAGGING);\n    }\n  }\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    this._moveToChangedPosition(ctx);\n  }\n\n  public onFinish(ctx: Parameters<State[\"onFinish\"]>[0]) {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    transitTo(STATE_TYPE.IDLE);\n\n    const controller = flicking.control.controller;\n    const animatingContext = controller.animatingContext;\n\n    flicking.trigger(new ComponentEvent(EVENTS.MOVE_END, {\n      isTrusted: axesEvent.isTrusted,\n      direction: getDirection(animatingContext.start, animatingContext.end),\n      axesEvent\n    }));\n  }\n}\n\nexport default AnimatingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when Flicking is stopped by event's `stop` method\n * @ko 이벤트의 `stop`호출에 의해 Flicking이 정지된 상태\n * @internal\n */\nclass DisabledState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onAnimationEnd(ctx: Parameters<State[\"onAnimationEnd\"]>[0]): void {\n    const { transitTo } = ctx;\n\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { axesEvent, transitTo } = ctx;\n\n    // Can stop Axes's change event\n    axesEvent.stop();\n\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { axesEvent, transitTo } = ctx;\n\n    // This is needed when stopped hold start event\n    if (axesEvent.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { AxesEvents } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport * as AXES from \"../const/axes\";\n\nimport IdleState from \"./states/IdleState\";\nimport HoldingState from \"./states/HoldingState\";\nimport DraggingState from \"./states/DraggingState\";\nimport AnimatingState from \"./states/AnimatingState\";\nimport DisabledState from \"./states/DisabledState\";\nimport State, { STATE_TYPE } from \"./states/State\";\n\n/**\n * @internal\n */\nclass StateMachine {\n  private _state: State;\n\n  public get state(): State { return this._state; }\n\n  public constructor() {\n    this._state = new IdleState();\n  }\n\n  public fire(eventType: keyof AxesEvents, externalCtx: {\n    flicking: Flicking;\n    axesEvent: any;\n  }) {\n    const currentState = this._state;\n    const ctx = { ...externalCtx, transitTo: this.transitTo };\n\n    switch (eventType) {\n      case AXES.EVENT.HOLD:\n        currentState.onHold(ctx);\n        break;\n      case AXES.EVENT.CHANGE:\n        currentState.onChange(ctx);\n        break;\n      case AXES.EVENT.RELEASE:\n        currentState.onRelease(ctx);\n        break;\n      case AXES.EVENT.ANIMATION_END:\n        currentState.onAnimationEnd(ctx);\n        break;\n      case AXES.EVENT.FINISH:\n        currentState.onFinish(ctx);\n        break;\n    }\n  }\n\n  public transitTo = (nextStateType: STATE_TYPE): State => {\n    let nextState: State;\n\n    switch (nextStateType) {\n      case STATE_TYPE.IDLE:\n        nextState = new IdleState();\n        break;\n      case STATE_TYPE.HOLDING:\n        nextState = new HoldingState();\n        break;\n      case STATE_TYPE.DRAGGING:\n        nextState = new DraggingState();\n        break;\n      case STATE_TYPE.ANIMATING:\n        nextState = new AnimatingState();\n        break;\n      case STATE_TYPE.DISABLED:\n        nextState = new DisabledState();\n        break;\n    }\n\n    nextState.onEnter(this._state);\n\n    this._state = nextState;\n\n    return this._state;\n  };\n}\n\nexport default StateMachine;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Axes, { PanInput, AxesEvents, OnRelease } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport * as AXES from \"../const/axes\";\nimport * as ERROR from \"../const/error\";\nimport { circulatePosition, getFlickingAttached, parseBounce } from \"../utils\";\nimport { ControlParams } from \"../type/external\";\n\nimport StateMachine from \"./StateMachine\";\n\n/**\n * A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events\n * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트\n * @internal\n */\nclass AxesController {\n  private _flicking: Flicking | null;\n  private _axes: Axes | null;\n  private _panInput: PanInput | null;\n  private _stateMachine: StateMachine;\n\n  private _animatingContext: { start: number; end: number; offset: number };\n  private _dragged: boolean;\n\n  /**\n   * An {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes}의 인스턴스\n   * @type {Axes}\n   * @see https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html\n   * @readonly\n   */\n  public get axes() { return this._axes; }\n  /**\n   * A activated {@link State} that shows the current status of the user input or the animation\n   * @ko 현재 활성화된 {@link State} 인스턴스로 사용자 입력 또는 애니메이션 상태를 나타냅니다\n   * @type {State}\n   */\n  public get state() { return this._stateMachine.state; }\n  /**\n   * A context of the current animation playing\n   * @ko 현재 재생중인 애니메이션 정보\n   * @type {object}\n   * @property {number} start A start position of the animation<ko>애니메이션 시작 지점</ko>\n   * @property {number} end A end position of the animation<ko>애니메이션 끝 지점</ko>\n   * @property {number} offset camera offset<ko>카메라 오프셋</ko>\n   * @readonly\n   */\n  public get animatingContext() { return this._animatingContext; }\n  /**\n   * A current control parameters of the Axes instance\n   * @ko 활성화된 현재 Axes 패러미터들\n   * @type {ControlParams}\n   */\n  public get controlParams(): ControlParams {\n    const axes = this._axes;\n\n    if (!axes) {\n      return {\n        range: { min: 0, max: 0 },\n        position: 0,\n        circular: false\n      };\n    }\n\n    const axis = axes.axis[AXES.POSITION_KEY];\n\n    return {\n      range: { min: axis.range![0], max: axis.range![1] },\n      circular: (axis.circular as boolean[])[0],\n      position: this.position\n    };\n  }\n\n  /**\n   * A Boolean indicating whether the user input is enabled\n   * @ko 현재 사용자 입력이 활성화되었는지를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get enabled() { return this._panInput?.isEnable() ?? false; }\n  /**\n   * Current position value in {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} 인스턴스 내부의 현재 좌표 값\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._axes?.get([AXES.POSITION_KEY])[AXES.POSITION_KEY] ?? 0; }\n  /**\n   * Current range value in {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} 인스턴스 내부의 현재 이동 범위 값\n   * @type {number[]}\n   * @readonly\n   */\n  public get range() { return this._axes?.axis[AXES.POSITION_KEY].range ?? [0, 0]; }\n  /**\n   * Actual bounce size(px)\n   * @ko 적용된 bounce 크기(px 단위)\n   * @type {number[]}\n   * @readonly\n   */\n  public get bounce() { return this._axes?.axis[AXES.POSITION_KEY].bounce as number[] | undefined; }\n\n  /** */\n  public constructor() {\n    this._resetInternalValues();\n    this._stateMachine = new StateMachine();\n  }\n\n  /**\n   * Initialize AxesController\n   * @ko AxesController를 초기화합니다\n   * @param {Flicking} flicking An instance of Flicking\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n\n    this._axes = new Axes({\n      [AXES.POSITION_KEY]: {\n        range: [0, 0],\n        circular: false,\n        bounce: [0, 0]\n      }\n    }, {\n      deceleration: flicking.deceleration,\n      interruptable: flicking.interruptable,\n      easing: flicking.easing\n    });\n    this._panInput = new PanInput(flicking.viewport.element, {\n      inputType: flicking.inputType,\n      iOSEdgeSwipeThreshold: flicking.iOSEdgeSwipeThreshold,\n      scale: flicking.horizontal ? [-1, 0] : [0, -1],\n      releaseOnScroll: true\n    });\n\n    const axes = this._axes;\n\n    axes.connect(flicking.horizontal ? [AXES.POSITION_KEY, \"\"] : [\"\", AXES.POSITION_KEY], this._panInput);\n\n    for (const key in AXES.EVENT) {\n      const eventType = AXES.EVENT[key] as keyof AxesEvents;\n\n      axes.on(eventType, (e: AxesEvents[typeof eventType]) => {\n        this._stateMachine.fire(eventType, {\n          flicking,\n          axesEvent: e\n        });\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Destroy AxesController and return to initial state\n   * @ko AxesController를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this.removePreventClickHandler();\n\n    this._axes?.destroy();\n    this._panInput?.destroy();\n\n    this._resetInternalValues();\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @chainable\n   * @return {this}\n   */\n  public enable(): this {\n    this._panInput?.enable();\n\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @chainable\n   * @return {this}\n   */\n  public disable(): this {\n    this._panInput?.disable();\n\n    return this;\n  }\n\n  /**\n   * Update {@link https://naver.github.io/egjs-axes/ @egjs/axes}'s state\n   * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 상태를 갱신합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link AxesController#init init} is not called before\n   * <ko>{@link AxesController#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public update(controlParams: ControlParams): this {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const axes = this._axes!;\n    const axis = axes.axis[AXES.POSITION_KEY];\n\n    axis.circular = [controlParams.circular, controlParams.circular];\n    axis.range = [controlParams.range.min, controlParams.range.max];\n    axis.bounce = parseBounce(flicking.bounce, camera.size);\n\n    axes.axm.set({ [AXES.POSITION_KEY]: controlParams.position });\n\n    return this;\n  }\n\n  /**\n   * Attach a handler to the camera element to prevent click events during animation\n   * @ko 카메라 엘리먼트에 애니메이션 도중에 클릭 이벤트를 방지하는 핸들러를 부착합니다\n   * @return {this}\n   */\n  public addPreventClickHandler(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const axes = this._axes!;\n    const cameraEl = flicking.camera.element;\n\n    axes.on(AXES.EVENT.HOLD, this._onAxesHold);\n    axes.on(AXES.EVENT.CHANGE, this._onAxesChange);\n    cameraEl.addEventListener(\"click\", this._preventClickWhenDragged, true);\n\n    return this;\n  }\n\n  /**\n   * Detach a handler to the camera element to prevent click events during animation\n   * @ko 카메라 엘리먼트에 애니메이션 도중에 클릭 이벤트를 방지하는 핸들러를 탈착합니다\n   * @return {this}\n   */\n  public removePreventClickHandler(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const axes = this._axes!;\n    const cameraEl = flicking.camera.element;\n\n    axes.off(AXES.EVENT.HOLD, this._onAxesHold);\n    axes.off(AXES.EVENT.CHANGE, this._onAxesChange);\n    cameraEl.removeEventListener(\"click\", this._preventClickWhenDragged, true);\n\n    return this;\n  }\n\n  /**\n   * Run Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#setTo setTo} using the given position\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#setTo setTo} 메소드를 주어진 좌표를 이용하여 수행합니다\n   * @param {number} position A position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {number} [axesEvent] If provided, it'll use its {@link https://naver#github#io/egjs-axes/release/latest/doc/eg#Axes#html#setTo setTo} method instead<ko>이 값이 주어졌을 경우, 해당 이벤트의 {@link https://naver#github#io/egjs-axes/release/latest/doc/eg#Axes#html#setTo setTo} 메소드를 대신해서 사용합니다.</ko>\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public animateTo(position: number, duration: number, axesEvent?: OnRelease): Promise<void> {\n    const axes = this._axes;\n\n    if (!axes) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.NOT_ATTACHED_TO_FLICKING(\"Control\"), ERROR.CODE.NOT_ATTACHED_TO_FLICKING));\n    }\n\n    const startPos = axes.get([AXES.POSITION_KEY])[AXES.POSITION_KEY];\n\n    if (startPos === position) {\n      const flicking = getFlickingAttached(this._flicking, \"Control\");\n\n      return flicking.camera.lookAt(position);\n    }\n\n    this._animatingContext = {\n      start: startPos,\n      end: position,\n      offset: 0\n    };\n\n    const animate = () => {\n      const resetContext = () => {\n        this._animatingContext = { start: 0, end: 0, offset: 0 };\n      };\n\n      axes.once(AXES.EVENT.FINISH, resetContext);\n\n      if (axesEvent) {\n        axesEvent.setTo({ [AXES.POSITION_KEY]: position }, duration);\n      } else {\n        axes.setTo({ [AXES.POSITION_KEY]: position }, duration);\n      }\n    };\n\n    if (duration === 0) {\n      const flicking = getFlickingAttached(this._flicking, \"Control\");\n      const camera = flicking.camera;\n\n      animate();\n\n      const newPos = flicking.circularEnabled\n        ? circulatePosition(position, camera.range.min, camera.range.max)\n        : position;\n\n      axes.axm.set({ [AXES.POSITION_KEY]: newPos });\n\n      return Promise.resolve();\n    } else {\n      return new Promise((resolve, reject) => {\n        const animationFinishHandler = () => {\n          axes.off(AXES.EVENT.HOLD, interruptionHandler);\n          resolve();\n        };\n\n        const interruptionHandler = () => {\n          axes.off(AXES.EVENT.FINISH, animationFinishHandler);\n          reject(new FlickingError(ERROR.MESSAGE.ANIMATION_INTERRUPTED, ERROR.CODE.ANIMATION_INTERRUPTED));\n        };\n\n        axes.once(AXES.EVENT.FINISH, animationFinishHandler);\n        axes.once(AXES.EVENT.HOLD, interruptionHandler);\n\n        animate();\n      });\n    }\n  }\n\n  private _resetInternalValues() {\n    this._flicking = null;\n    this._axes = null;\n    this._panInput = null;\n    this._animatingContext = { start: 0, end: 0, offset: 0 };\n    this._dragged = false;\n  }\n\n  private _onAxesHold = () => {\n    this._dragged = false;\n  };\n\n  private _onAxesChange = () => {\n    this._dragged = true;\n  };\n\n  private _preventClickWhenDragged = (e: MouseEvent) => {\n    if (this._dragged) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    this._dragged = false;\n  };\n}\n\nexport default AxesController;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport Panel from \"../core/panel/Panel\";\nimport AxesController from \"../control/AxesController\";\nimport { DIRECTION, EVENTS } from \"../const/external\";\nimport * as ERROR from \"../const/error\";\nimport { getDirection, getFlickingAttached } from \"../utils\";\nimport { ValueOf } from \"../type/internal\";\n\n/**\n * A component that manages inputs and animation of Flicking\n * @ko Flicking의 입력 장치 & 애니메이션을 담당하는 컴포넌트\n */\nabstract class Control {\n  // Internal States\n  protected _flicking: Flicking | null;\n  protected _controller: AxesController;\n  protected _activePanel: Panel | null;\n\n  /**\n   * A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events\n   * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트\n   * @type {AxesController}\n   * @readonly\n   */\n  public get controller() { return this._controller; }\n  /**\n   * Index number of the {@link Flicking#currentPanel currentPanel}\n   * @ko {@link Flicking#currentPanel currentPanel}의 인덱스 번호\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get activeIndex() { return this._activePanel?.index ?? -1; }\n  /**\n   * An active panel\n   * @ko 현재 선택된 패널\n   * @type {Panel | null}\n   * @readonly\n   */\n  public get activePanel() { return this._activePanel; }\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get animating() { return this._controller.state.animating; }\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get holding() { return this._controller.state.holding; }\n\n  /** */\n  public constructor() {\n    this._flicking = null;\n    this._controller = new AxesController();\n    this._activePanel = null;\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @method\n   * @abstract\n   * @memberof Control\n   * @instance\n   * @name moveToPosition\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public abstract moveToPosition(position: number, duration: number, axesEvent?: OnRelease): Promise<void>;\n\n  /**\n   * Initialize Control\n   * @ko Control을 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n    this._controller.init(flicking);\n\n    return this;\n  }\n\n  /**\n   * Destroy Control and return to initial state\n   * @ko Control을 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this._controller.destroy();\n\n    this._flicking = null;\n    this._activePanel = null;\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @chainable\n   * @return {this}\n   */\n  public enable(): this {\n    this._controller.enable();\n\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @chainable\n   * @return {this}\n   */\n  public disable(): this {\n    this._controller.disable();\n\n    return this;\n  }\n\n  /**\n   * Update position after resizing\n   * @ko resize 이후에 position을 업데이트합니다\n   * @param {number} progressInPanel Previous camera's progress in active panel before resize<ko>Resize 이전 현재 선택된 패널 내에서의 카메라 progress 값</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {Promise<void>}\n   */\n  public async updatePosition(_progressInPanel: number): Promise<void> {   // eslint-disable-line @typescript-eslint/no-unused-vars\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    if (activePanel) {\n      await camera.lookAt(camera.clampToReachablePosition(activePanel.position));\n    }\n  }\n\n  /**\n   * Update {@link Control#controller controller}'s state\n   * @ko {@link Control#controller controller}의 내부 상태를 갱신합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateInput(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n\n    this._controller.update(camera.controlParams);\n\n    return this;\n  }\n\n  /**\n   * Reset {@link Control#activePanel activePanel} to `null`\n   * @ko {@link Control#activePanel activePanel}을 `null`로 초기화합니다\n   * @chainable\n   * @return {this}\n   */\n  public resetActive(): this {\n    this._activePanel = null;\n\n    return this;\n  }\n\n  /**\n   * Move {@link Camera} to the given panel\n   * @ko {@link Camera}를 해당 패널 위로 이동합니다\n   * @param {Panel} panel The target panel to move<ko>이동할 패널</ko>\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {number} duration Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @param {DIRECTION} [direction=DIRECTION.NONE] Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPanel(panel: Panel, {\n    duration,\n    direction = DIRECTION.NONE,\n    axesEvent\n  }: {\n    duration: number;\n    direction?: ValueOf<typeof DIRECTION>;\n    axesEvent?: OnRelease;\n  }) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n\n    let position = panel.position;\n    const nearestAnchor = camera.findNearestAnchor(position);\n\n    if (panel.removed || !nearestAnchor) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(panel.position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n    if (!camera.canReach(panel)) {\n      // Override position & panel if that panel is not reachable\n      position = nearestAnchor.position;\n      panel = nearestAnchor.panel;\n    } else if (flicking.circularEnabled) {\n      // Circular mode is enabled, find nearest distance to panel\n      const camPos = this._controller.position; // Actual position of the Axes\n      const camRangeDiff = camera.rangeDiff;\n      const possiblePositions = [position, position + camRangeDiff, position - camRangeDiff]\n        .filter(pos => {\n          if (direction === DIRECTION.NONE) return true;\n\n          return direction === DIRECTION.PREV\n            ? pos <= camPos\n            : pos >= camPos;\n        });\n\n      position = possiblePositions.reduce((nearestPosition, pos) => {\n        if (Math.abs(camPos - pos) < Math.abs(camPos - nearestPosition)) {\n          return pos;\n        } else {\n          return nearestPosition;\n        }\n      }, Infinity);\n    }\n\n    this._triggerIndexChangeEvent(panel, panel.position, axesEvent);\n\n    return this._animateToPosition({ position, duration, newActivePanel: panel, axesEvent });\n  }\n\n  protected _triggerIndexChangeEvent(panel: Panel, position: number, axesEvent?: OnRelease): void {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const triggeringEvent = panel !== this._activePanel ? EVENTS.WILL_CHANGE : EVENTS.WILL_RESTORE;\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    const event = new ComponentEvent(triggeringEvent, {\n      index: panel.index,\n      panel,\n      isTrusted: axesEvent?.isTrusted || false,\n      direction: getDirection(activePanel?.position ?? camera.position, position)\n    });\n    flicking.trigger(event);\n\n    if (event.isCanceled()) {\n      throw new FlickingError(ERROR.MESSAGE.STOP_CALLED_BY_USER, ERROR.CODE.STOP_CALLED_BY_USER);\n    }\n  }\n\n  protected async _animateToPosition({\n    position,\n    duration,\n    newActivePanel,\n    axesEvent\n  }: {\n    position: number;\n    duration: number;\n    newActivePanel: Panel;\n    axesEvent?: OnRelease;\n  }) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const currentPanel = this._activePanel;\n    const animate = () => this._controller.animateTo(position, duration, axesEvent);\n    const isTrusted = axesEvent?.isTrusted || false;\n\n    if (duration <= 0) {\n      const animation = animate();\n      this._setActive(newActivePanel, currentPanel, isTrusted);\n      return animation;\n    } else {\n      return animate().then(async () => {\n        this._setActive(newActivePanel, currentPanel, isTrusted);\n        await flicking.renderer.render();\n      }).catch(err => {\n        if (axesEvent && err instanceof FlickingError && err.code === ERROR.CODE.ANIMATION_INTERRUPTED) return;\n        throw err;\n      });\n    }\n  }\n\n  protected _setActive(newActivePanel: Panel, prevActivePanel: Panel | null, isTrusted: boolean) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n\n    this._activePanel = newActivePanel;\n\n    flicking.camera.updateAdaptiveHeight();\n\n    if (newActivePanel !== prevActivePanel) {\n      flicking.trigger(new ComponentEvent(EVENTS.CHANGED, {\n        index: newActivePanel.index,\n        panel: newActivePanel,\n        prevIndex: prevActivePanel?.index ?? -1,\n        prevPanel: prevActivePanel,\n        isTrusted,\n        direction: prevActivePanel ? getDirection(prevActivePanel.position, newActivePanel.position) : DIRECTION.NONE\n      }));\n    } else {\n      flicking.trigger(new ComponentEvent(EVENTS.RESTORED, {\n        isTrusted\n      }));\n    }\n  }\n}\n\nexport default Control;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"./panel/Panel\";\n\n/**\n * A data component that has actual position where the camera should be stopped at\n * @ko 카메라가 정지해야하는 실제 위치를 담고 있는 데이터 컴포넌트\n */\nclass AnchorPoint {\n  private _index: number;\n  private _pos: number;\n  private _panel: Panel;\n\n  /**\n   * Index of AnchorPoint\n   * @ko AnchorPoint의 인덱스\n   * @type {number}\n   * @readonly\n   */\n  public get index() { return this._index; }\n  /**\n   * Position of AnchorPoint\n   * @ko AnchorPoint의 좌표\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._pos; }\n  /**\n   * A {@link Panel} instance AnchorPoint is referencing to\n   * @ko AnchorPoint가 참조하고 있는 {@link Panel}\n   * @type {Panel}\n   * @readonly\n   */\n  public get panel() { return this._panel; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 객체</ko>\n   * @param {number} [options.index] Index of AnchorPoint<ko>AnchorPoint의 인덱스</ko>\n   * @param {number} [options.position] Position of AnchorPoint<ko>AnchorPoint의 좌표</ko>\n   * @param {Panel} [options.panel] A {@link Panel} instance AnchorPoint is referencing to<ko>AnchorPoint가 참조하고 있는 {@link Panel}</ko>\n   */\n  public constructor({\n    index,\n    position,\n    panel\n  }: {\n    index: number;\n    position: number;\n    panel: Panel;\n  }) {\n    this._index = index;\n    this._pos = position;\n    this._panel = panel;\n  }\n}\n\nexport default AnchorPoint;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport FlickingError from \"../core/FlickingError\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport { circulateIndex, clamp, getFlickingAttached } from \"../utils\";\nimport * as AXES from \"../const/axes\";\nimport * as ERROR from \"../const/error\";\n\nimport Control from \"./Control\";\n\n/**\n * An options for the {@link SnapControl}\n * @ko {@link SnapControl} 생성시 사용되는 옵션\n * @interface\n * @property {number} count Maximum number of panels can go after release<ko>입력 중단 이후 통과하여 이동할 수 있는 패널의 최대 갯수</ko>\n */\nexport interface SnapControlOptions {\n  count: number;\n}\n\n/**\n * A {@link Control} that uses a release momentum to choose destination panel\n * @ko 입력을 중단한 시점의 가속도에 영향받아 도달할 패널을 계산하는 이동 방식을 사용하는 {@link Control}\n */\nclass SnapControl extends Control {\n  private _count: SnapControlOptions[\"count\"];\n\n  /**\n   * Maximum number of panels can go after release\n   * @ko 입력 중단 이후 통과하여 이동할 수 있는 패널의 최대 갯수\n   * @type {number}\n   * @default Infinity\n   */\n  public get count() { return this._count; }\n\n  public set count(val: SnapControlOptions[\"count\"]) { this._count = val; }\n\n  /** */\n  public constructor({\n    count = Infinity\n  }: Partial<SnapControlOptions> = {}) {\n    super();\n\n    this._count = count;\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activeAnchor = camera.findActiveAnchor();\n    const anchorAtCamera = camera.findNearestAnchor(camera.position);\n    const state = flicking.control.controller.state;\n\n    if (!activeAnchor || !anchorAtCamera) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const snapThreshold = this._calcSnapThreshold(position, activeAnchor);\n\n    const posDelta = flicking.animating\n      ? state.delta\n      : position - camera.position;\n    const absPosDelta = Math.abs(posDelta);\n    const snapDelta = axesEvent && axesEvent.delta[AXES.POSITION_KEY] !== 0\n      ? Math.abs(axesEvent.delta[AXES.POSITION_KEY])\n      : absPosDelta;\n    let targetAnchor: AnchorPoint;\n\n    if (snapDelta >= snapThreshold && snapDelta > 0) {\n      // Move to anchor at position\n      targetAnchor = this._findSnappedAnchor(position, anchorAtCamera);\n    } else if (absPosDelta >= flicking.threshold && absPosDelta > 0) {\n      // Move to the adjacent panel\n      targetAnchor = this._findAdjacentAnchor(posDelta, anchorAtCamera);\n    } else {\n      // Restore to active panel\n      targetAnchor = anchorAtCamera;\n    }\n\n    this._triggerIndexChangeEvent(targetAnchor.panel, position, axesEvent);\n\n    return this._animateToPosition({\n      position: camera.clampToReachablePosition(targetAnchor.position),\n      duration,\n      newActivePanel: targetAnchor.panel,\n      axesEvent\n    });\n  }\n\n  private _findSnappedAnchor(position: number, anchorAtCamera: AnchorPoint): AnchorPoint {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const count = this._count;\n\n    const currentPos = camera.position;\n\n    const clampedPosition = camera.clampToReachablePosition(position);\n    const anchorAtPosition = camera.findAnchorIncludePosition(clampedPosition);\n\n    if (!anchorAtCamera || !anchorAtPosition) {\n      throw new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE);\n    }\n\n    if (!isFinite(count)) {\n      return anchorAtPosition;\n    }\n\n    const panelCount = flicking.panelCount;\n    const anchors = camera.anchorPoints;\n\n    let loopCount = Math.sign(position - currentPos) * Math.floor(Math.abs(position - currentPos) / camera.rangeDiff);\n    if ((position > currentPos && anchorAtPosition.index < anchorAtCamera.index)\n      || (anchorAtPosition.position > anchorAtCamera.position && anchorAtPosition.index === anchorAtCamera.index)) {\n      loopCount += 1;\n    } else if ((position < currentPos && anchorAtPosition.index > anchorAtCamera.index)\n      || (anchorAtPosition.position < anchorAtCamera.position && anchorAtPosition.index === anchorAtCamera.index)) {\n      loopCount -= 1;\n    }\n\n    const circularIndexOffset = loopCount * panelCount;\n    const anchorAtPositionIndex = anchorAtPosition.index + circularIndexOffset;\n\n    if (Math.abs(anchorAtPositionIndex - anchorAtCamera.index) <= count) {\n      const anchor = anchors[anchorAtPosition.index];\n\n      return new AnchorPoint({\n        index: anchor.index,\n        position: anchor.position + loopCount * camera.rangeDiff,\n        panel: anchor.panel\n      });\n    }\n\n    if (flicking.circularEnabled) {\n      const targetAnchor = anchors[circulateIndex(anchorAtCamera.index + Math.sign(position - currentPos) * count, panelCount)];\n      let loop = Math.floor(count / panelCount);\n\n      if (position > currentPos && targetAnchor.index < anchorAtCamera.index) {\n        loop += 1;\n      } else if (position < currentPos && targetAnchor.index > anchorAtCamera.index) {\n        loop -= 1;\n      }\n\n      return new AnchorPoint({\n        index: targetAnchor.index,\n        position: targetAnchor.position + loop * camera.rangeDiff,\n        panel: targetAnchor.panel\n      });\n    } else {\n      return anchors[clamp(anchorAtCamera.index + Math.sign(position - currentPos) * count, 0, anchors.length - 1)];\n    }\n  }\n\n  private _findAdjacentAnchor(posDelta: number, anchorAtCamera: AnchorPoint): AnchorPoint {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const adjacentAnchor = (posDelta > 0 ? camera.getNextAnchor(anchorAtCamera) : camera.getPrevAnchor(anchorAtCamera)) ?? anchorAtCamera;\n\n    return adjacentAnchor;\n  }\n\n  private _calcSnapThreshold(position: number, activeAnchor: AnchorPoint): number {\n    const isNextDirection = position > activeAnchor.position;\n    const panel = activeAnchor.panel;\n    const panelSize = panel.size;\n    const alignPos = panel.alignPosition;\n\n    // Minimum distance needed to decide prev/next panel as nearest\n    /*\n     * |  Prev  |     Next     |\n     * |<------>|<------------>|\n     * [        |<-Anchor      ]\n     */\n    return isNextDirection\n      ? panelSize - alignPos + panel.margin.next\n      : alignPos + panel.margin.prev;\n  }\n}\n\nexport default SnapControl;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport FlickingError from \"../core/FlickingError\";\nimport * as ERROR from \"../const/error\";\nimport { getFlickingAttached } from \"../utils\";\n\nimport Control from \"./Control\";\n\n/**\n * An options for the {@link FreeControl}\n * @ko {@link FreeControl} 생성시 사용되는 옵션\n * @interface\n * @property {boolean} stopAtEdge Make scroll animation to stop at the start/end of the scroll area, not going out the bounce area\n * <ko>스크롤 애니메이션을 스크롤 영역의 시작과 끝부분에서 멈추도록 하여, 바운스 영역을 넘어가지 않도록 합니다</ko>\n */\nexport interface FreeControlOptions {\n  stopAtEdge: boolean;\n}\n\n/**\n * A {@link Control} that can be scrolled freely without alignment\n * @ko 패널이 정해진 지점에 정렬되지 않고, 자유롭게 스크롤할 수 있는 이동 방식을 사용하는 {@link Control}\n */\nclass FreeControl extends Control {\n  private _stopAtEdge: FreeControlOptions[\"stopAtEdge\"];\n\n  /**\n   * Make scroll animation to stop at the start/end of the scroll area, not going out the bounce area\n   * @ko 스크롤 애니메이션을 스크롤 영역의 시작과 끝부분에서 멈추도록 하여, 바운스 영역을 넘어가지 않도록 합니다\n   * @type {boolean}\n   * @default true\n   */\n  public get stopAtEdge() { return this._stopAtEdge; }\n\n  public set stopAtEdge(val: FreeControlOptions[\"stopAtEdge\"]) { this._stopAtEdge = val; }\n\n  /** */\n  public constructor({\n    stopAtEdge = true\n  }: Partial<FreeControlOptions> = {}) {\n    super();\n\n    this._stopAtEdge = stopAtEdge;\n  }\n\n  /**\n   * Update position after resizing\n   * @ko resize 이후에 position을 업데이트합니다\n   * @param {number} progressInPanel Previous camera's progress in active panel before resize<ko>Resize 이전 현재 선택된 패널 내에서의 카메라 progress 값</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {Promise<void>}\n   */\n  public async updatePosition(progressInPanel: number): Promise<void> {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    if (activePanel) {\n      const panelRange = activePanel.range;\n      const newPosition = panelRange.min + (panelRange.max - panelRange.min) * progressInPanel;\n\n      await camera.lookAt(camera.clampToReachablePosition(newPosition));\n    }\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n\n    const camera = flicking.camera;\n    const targetPos = camera.clampToReachablePosition(position);\n\n    const anchorAtPosition = camera.findAnchorIncludePosition(targetPos);\n\n    if (!anchorAtPosition) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const targetPanel = anchorAtPosition.panel;\n\n    // Trigger only change event\n    if (targetPanel !== this._activePanel) {\n      this._triggerIndexChangeEvent(targetPanel, position, axesEvent);\n    }\n\n    return this._animateToPosition({ position: this._stopAtEdge ? targetPos : position, duration, newActivePanel: targetPanel, axesEvent });\n  }\n}\n\nexport default FreeControl;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport Panel from \"../core/panel/Panel\";\nimport FlickingError from \"../core/FlickingError\";\nimport { clamp, getFlickingAttached, getMinusCompensatedIndex, isBetween } from \"../utils\";\nimport * as ERROR from \"../const/error\";\n\nimport Control from \"./Control\";\n/**\n * An options for the {@link StrictControl}\n * @ko {@link StrictControl} 생성시 사용되는 옵션\n * @interface\n * @property {number} count Maximum number of panels that can be moved at a time<ko>최대로 움직일 수 있는 패널의 개수</ko>\n */\nexport interface StrictControlOptions {\n  count: number;\n}\n\n/**\n * A {@link Control} that allow you to select the maximum number of panels to move at a time\n * @ko 한번에 최대로 이동할 패널의 개수를 선택 가능한 {@link Control}\n */\nclass StrictControl extends Control {\n  private _count: number;\n  private _indexRange: { min: number; max: number };\n\n  /**\n   * Maximum number of panels that can be moved at a time\n   * @ko 최대로 움직일 수 있는 패널의 개수\n   * @type {number}\n   * @default 1\n   */\n  public get count() { return this._count; }\n\n  public set count(val: StrictControlOptions[\"count\"]) { this._count = val; }\n\n  /** */\n  public constructor({\n    count = 1\n  }: Partial<StrictControlOptions> = {}) {\n    super();\n\n    this._count = count;\n    this._resetIndexRange();\n  }\n\n  /**\n   * Destroy Control and return to initial state\n   * @ko Control을 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy() {\n    super.destroy();\n\n    this._resetIndexRange();\n  }\n\n  /**\n   * Update {@link Control#controller controller}'s state\n   * @ko {@link Control#controller controller}의 내부 상태를 갱신합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateInput(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const renderer = flicking.renderer;\n    const controller = this._controller;\n    const controlParams = camera.controlParams;\n    const count = this._count;\n\n    const activePanel = controller.state.animating\n      ? camera.findNearestAnchor(camera.position)?.panel\n      : this._activePanel;\n\n    if (!activePanel) {\n      controller.update(controlParams);\n      this._resetIndexRange();\n      return this;\n    }\n\n    const cameraRange = controlParams.range;\n    const currentPos = activePanel.position;\n    const currentIndex = activePanel.index;\n    const panelCount = renderer.panelCount;\n\n    let prevPanelIndex = currentIndex - count;\n    let nextPanelIndex = currentIndex + count;\n\n    if (prevPanelIndex < 0) {\n      prevPanelIndex = flicking.circularEnabled\n        ? getMinusCompensatedIndex((prevPanelIndex + 1) % panelCount - 1, panelCount)\n        : clamp(prevPanelIndex, 0, panelCount - 1);\n    }\n    if (nextPanelIndex >= panelCount) {\n      nextPanelIndex = flicking.circularEnabled\n        ? nextPanelIndex % panelCount\n        : clamp(nextPanelIndex, 0, panelCount - 1);\n    }\n\n    const prevPanel = renderer.panels[prevPanelIndex];\n    const nextPanel = renderer.panels[nextPanelIndex];\n\n    let prevPos = Math.max(prevPanel.position, cameraRange.min);\n    let nextPos = Math.min(nextPanel.position, cameraRange.max);\n\n    if (prevPos > currentPos) {\n      prevPos -= camera.rangeDiff;\n    }\n    if (nextPos < currentPos) {\n      nextPos += camera.rangeDiff;\n    }\n\n    controlParams.range = {\n      min: prevPos,\n      max: nextPos\n    };\n\n    if (controlParams.position < prevPos) {\n      controlParams.position += camera.rangeDiff;\n    }\n\n    if (controlParams.position > nextPos) {\n      controlParams.position -= camera.rangeDiff;\n    }\n\n    controlParams.circular = false;\n    controller.update(controlParams);\n\n    this._indexRange = {\n      min: prevPanel.index,\n      max: nextPanel.index\n    };\n\n    return this;\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n    const axesRange = this._controller.range;\n    const indexRange = this._indexRange;\n    const cameraRange = camera.range;\n\n    const clampedPosition = clamp(camera.clampToReachablePosition(position), axesRange[0], axesRange[1]);\n    const anchorAtPosition = camera.findAnchorIncludePosition(clampedPosition);\n\n    if (!anchorAtPosition || !activePanel) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const prevPos = activePanel.position;\n\n    const isOverThreshold = Math.abs(position - prevPos) >= flicking.threshold;\n    const adjacentAnchor = (position > prevPos)\n      ? camera.getNextAnchor(anchorAtPosition)\n      : camera.getPrevAnchor(anchorAtPosition);\n\n    let targetPos: number;\n    let targetPanel: Panel;\n\n    const anchors = camera.anchorPoints;\n    const firstAnchor = anchors[0];\n    const lastAnchor = anchors[anchors.length - 1];\n\n    const shouldBounceToFirst = position <= cameraRange.min && isBetween(firstAnchor.panel.index, indexRange.min, indexRange.max);\n    const shouldBounceToLast = position >= cameraRange.max && isBetween(lastAnchor.panel.index, indexRange.min, indexRange.max);\n\n    if (shouldBounceToFirst || shouldBounceToLast) {\n      // In bounce area\n      const targetAnchor = position < cameraRange.min ? firstAnchor : lastAnchor;\n\n      targetPanel = targetAnchor.panel;\n      targetPos = targetAnchor.position;\n    } else if (isOverThreshold && anchorAtPosition.position !== activePanel.position) {\n      // Move to anchor at position\n      targetPanel = anchorAtPosition.panel;\n      targetPos = anchorAtPosition.position;\n    } else if (isOverThreshold && adjacentAnchor && isBetween(adjacentAnchor.index, indexRange.min, indexRange.max)) {\n      // Move to adjacent anchor\n      targetPanel = adjacentAnchor.panel;\n      targetPos = adjacentAnchor.position;\n    } else {\n      // Restore to active panel\n      targetPos = camera.clampToReachablePosition(activePanel.position);\n      targetPanel = activePanel;\n    }\n\n    this._triggerIndexChangeEvent(targetPanel, position, axesEvent);\n\n    return this._animateToPosition({\n      position: targetPos,\n      duration,\n      newActivePanel: targetPanel,\n      axesEvent\n    });\n  }\n\n  protected _setActive = (newActivePanel: Panel, prevActivePanel: Panel | null, isTrusted: boolean) => {\n    super._setActive(newActivePanel, prevActivePanel, isTrusted);\n    this.updateInput();\n  };\n\n  private _resetIndexRange() {\n    this._indexRange = { min: 0, max: 0 };\n  }\n}\n\nexport default StrictControl;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking, { FlickingOptions } from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport * as ERROR from \"../const/error\";\nimport { ALIGN, DIRECTION, EVENTS } from \"../const/external\";\nimport { checkExistence, clamp, find, getFlickingAttached, getProgress, includes, parseAlign } from \"../utils\";\n\nexport interface CameraOptions {\n  align: FlickingOptions[\"align\"];\n}\n\n/**\n * A component that manages actual movement inside the viewport\n * @ko 뷰포트 내에서의 실제 움직임을 담당하는 컴포넌트\n */\nabstract class Camera {\n  // Options\n  protected _align: FlickingOptions[\"align\"];\n\n  // Internal states\n  protected _flicking: Flicking | null;\n  protected _el: HTMLElement;\n  protected _transform: string;\n  protected _position: number;\n  protected _alignPos: number;\n  protected _offset: number;\n  protected _range: { min: number; max: number };\n  protected _visiblePanels: Panel[];\n  protected _anchors: AnchorPoint[];\n  protected _needPanelTriggered: { prev: boolean; next: boolean };\n\n  // Internal states getter\n  /**\n   * The camera(`.flicking-camera`) element\n   * @ko 카메라(`.flicking-camera`) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n  /**\n   * Current position of the camera\n   * @ko Camera의 현재 좌표\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._position; }\n  /**\n   * Align position inside the viewport where {@link Panel}'s {@link Panel#alignPosition alignPosition} should be located at\n   * @ko 패널의 정렬 기준 위치. 뷰포트 내에서 {@link Panel}의 {@link Panel#alignPosition alignPosition}이 위치해야 하는 곳입니다\n   * @type {number}\n   * @readonly\n   */\n  public get alignPosition() { return this._alignPos; }\n  /**\n   * Position offset, used for the {@link Flicking#renderOnlyVisible renderOnlyVisible} option\n   * @ko Camera의 좌표 오프셋. {@link Flicking#renderOnlyVisible renderOnlyVisible} 옵션을 위해 사용됩니다.\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get offset() { return this._offset; }\n  /**\n   * A range that Camera's {@link Camera#position position} can reach\n   * @ko Camera의 {@link Camera#position position}이 도달 가능한 범위\n   * @type {object}\n   * @property {number} min A minimum position<ko>최소 위치</ko>\n   * @property {number} min A maximum position<ko>최대 위치</ko>\n   * @readonly\n   */\n  public get range() { return this._range; }\n  /**\n   * A difference between Camera's minimum and maximum position that can reach\n   * @ko Camera가 도달 가능한 최소/최대 좌표의 차이\n   * @type {number}\n   * @readonly\n   */\n  public get rangeDiff() { return this._range.max - this._range.min; }\n  /**\n   * An array of visible panels from the current position\n   * @ko 현재 보이는 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   */\n  public get visiblePanels() { return this._visiblePanels; }\n  /**\n   * A range of the visible area from the current position\n   * @ko 현재 위치에서 보이는 범위\n   * @type {object}\n   * @property {number} min A minimum position<ko>최소 위치</ko>\n   * @property {number} min A maximum position<ko>최대 위치</ko>\n   * @readonly\n   */\n  public get visibleRange() { return { min: this._position - this._alignPos, max: this._position - this._alignPos + this.size }; }\n  /**\n   * An array of {@link AnchorPoint}s that Camera can be stopped at\n   * @ko 카메라가 도달 가능한 {@link AnchorPoint}의 목록\n   * @type {AnchorPoint[]}\n   * @readonly\n   */\n  public get anchorPoints() { return this._anchors; }\n  /**\n   * A current parameters of the Camera for updating {@link AxesController}\n   * @ko {@link AxesController}를 업데이트하기 위한 현재 Camera 패러미터들\n   * @type {ControlParams}\n   * @readonly\n   */\n  public get controlParams() { return { range: this._range, position: this._position, circular: false }; }\n  /**\n   * A Boolean value indicating whether Camera's over the minimum or maximum position reachable\n   * @ko 현재 카메라가 도달 가능한 범위의 최소 혹은 최대점을 넘어섰는지를 나타냅니다\n   * @type {boolean}\n   * @readonly\n   */\n  public get atEdge() { return this._position <= this._range.min || this._position >= this._range.max; }\n  /**\n   * Return the size of the viewport\n   * @ko 뷰포트 크기를 반환합니다\n   * @type {number}\n   * @readonly\n   */\n  public get size() {\n    const flicking = this._flicking;\n    return flicking\n      ? flicking.horizontal\n        ? flicking.viewport.width\n        : flicking.viewport.height\n      : 0;\n  }\n\n  /**\n   * Return the camera's position progress from the first panel to last panel\n   * Range is from 0 to last panel's index\n   * @ko 첫번째 패널로부터 마지막 패널까지의 카메라 위치의 진행도를 반환합니다\n   * 범위는 0부터 마지막 패널의 인덱스까지입니다\n   * @type {number}\n   * @readonly\n   */\n  public get progress() {\n    const flicking = this._flicking;\n    const position = this._position + this._offset;\n    const nearestAnchor = this.findNearestAnchor(this._position);\n\n    if (!flicking || !nearestAnchor) {\n      return NaN;\n    }\n\n    const nearestPanel = nearestAnchor.panel;\n    const panelPos = nearestPanel.position + nearestPanel.offset;\n    const bounceSize = flicking.control.controller.bounce!;\n\n    const { min: prevRange, max: nextRange } = this.range;\n    const rangeDiff = this.rangeDiff;\n\n    if (position === panelPos) {\n      return nearestPanel.index;\n    }\n\n    if (position < panelPos) {\n      const prevPanel = nearestPanel.prev();\n      let prevPosition = prevPanel\n        ? prevPanel.position + prevPanel.offset\n        : prevRange - bounceSize[0];\n\n      // Looped\n      if (prevPosition > panelPos) {\n        prevPosition -= rangeDiff;\n      }\n\n      return nearestPanel.index - 1 + getProgress(position, prevPosition, panelPos);\n    } else {\n      const nextPanel = nearestPanel.next();\n      let nextPosition = nextPanel\n        ? nextPanel.position + nextPanel.offset\n        : nextRange + bounceSize[1];\n\n      // Looped\n      if (nextPosition < panelPos) {\n        nextPosition += rangeDiff;\n      }\n\n      return nearestPanel.index + getProgress(position, panelPos, nextPosition);\n    }\n  }\n\n  // Options Getter\n  /**\n   * A value indicating where the {@link Camera#alignPosition alignPosition} should be located at inside the viewport element\n   * @ko {@link Camera#alignPosition alignPosition}이 뷰포트 엘리먼트 내의 어디에 위치해야 하는지를 나타내는 값\n   * @type {ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Setter\n  public set align(val: FlickingOptions[\"align\"]) {\n    this._align = val;\n  }\n\n  /** */\n  public constructor({\n    align = ALIGN.CENTER\n  }: Partial<CameraOptions> = {}) {\n    this._flicking = null;\n    this._resetInternalValues();\n\n    // Options\n    this._align = align;\n  }\n\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @method\n   * @abstract\n   * @memberof Camera\n   * @instance\n   * @name updateRange\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public abstract updateRange(): this;\n\n  /**\n   * Initialize Camera\n   * @ko Camera를 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE VAL_MUST_NOT_NULL} If the camera element(`.flicking-camera`) does not exist inside viewport element\n   * <ko>{@link ERROR_CODE VAL_MUST_NOT_NULL} 뷰포트 엘리먼트 내부에 카메라 엘리먼트(`.flicking-camera`)가 존재하지 않을 경우</ko>\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n\n    const viewportEl = flicking.viewport.element;\n\n    checkExistence(viewportEl.firstElementChild, \"First element child of the viewport element\");\n    this._el = viewportEl.firstElementChild as HTMLElement;\n    this._checkTranslateSupport();\n\n    return this;\n  }\n\n  /**\n   * Destroy Camera and return to initial state\n   * @ko Camera를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): this {\n    this._flicking = null;\n    this._resetInternalValues();\n    return this;\n  }\n\n  /**\n   * Move to the given position and apply CSS transform\n   * @ko 해당 좌표로 이동하고, CSS transform을 적용합니다\n   * @param {number} pos A new position<ko>움직일 위치</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public async lookAt(pos: number): Promise<void> {\n    const prevPos = this._position;\n\n    this._position = pos;\n    await this._refreshVisiblePanels();\n    this._checkNeedPanel();\n    this._checkReachEnd(prevPos, pos);\n    this._applyTransform();\n  }\n\n  /**\n   * Return a previous {@link AnchorPoint} of given {@link AnchorPoint}\n   * If it does not exist, return `null` instead\n   * @ko 주어진 {@link AnchorPoint}의 이전 {@link AnchorPoint}를 반환합니다\n   * 존재하지 않을 경우 `null`을 반환합니다\n   * @param {AnchorPoint} anchor A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>\n   * @return {AnchorPoint | null} The previous {@link AnchorPoint}<ko>이전 {@link AnchorPoint}</ko>\n   */\n  public getPrevAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    return this._anchors[anchor.index - 1] || null;\n  }\n\n  /**\n   * Return a next {@link AnchorPoint} of given {@link AnchorPoint}\n   * If it does not exist, return `null` instead\n   * @ko 주어진 {@link AnchorPoint}의 다음 {@link AnchorPoint}를 반환합니다\n   * 존재하지 않을 경우 `null`을 반환합니다\n   * @param {AnchorPoint} anchor A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>\n   * @return {AnchorPoint | null} The next {@link AnchorPoint}<ko>다음 {@link AnchorPoint}</ko>\n   */\n  public getNextAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    return this._anchors[anchor.index + 1] || null;\n  }\n\n  /**\n   * Return the camera's position progress in the panel below\n   * Value is from 0 to 1 when the camera's inside panel\n   * Value can be lower than 0 or bigger than 1 when it's in the margin area\n   * @ko 현재 카메라 아래 패널에서의 위치 진행도를 반환합니다\n   * 반환값은 카메라가 패널 내부에 있을 경우 0부터 1까지의 값을 갖습니다\n   * 패널의 margin 영역에 있을 경우 0보다 작거나 1보다 큰 값을 반환할 수 있습니다\n   */\n  public getProgressInPanel(panel: Panel) {\n    const panelRange = panel.range;\n\n    return (this._position - panelRange.min) / (panelRange.max - panelRange.min);\n  }\n\n  /**\n   * Return {@link AnchorPoint} that includes given position\n   * If there's no {@link AnchorPoint} that includes the given position, return `null` instead\n   * @ko 주어진 좌표를 포함하는 {@link AnchorPoint}를 반환합니다\n   * 주어진 좌표를 포함하는 {@link AnchorPoint}가 없을 경우 `null`을 반환합니다\n   * @param {number} position A position to check<ko>확인할 좌표</ko>\n   * @return {AnchorPoint | null} The {@link AnchorPoint} that includes the given position<ko>해당 좌표를 포함하는 {@link AnchorPoint}</ko>\n   */\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    const anchors = this._anchors;\n    const anchorsIncludingPosition = anchors.filter(anchor => anchor.panel.includePosition(position, true));\n\n    return anchorsIncludingPosition.reduce((nearest: AnchorPoint | null, anchor) => {\n      if (!nearest) return anchor;\n\n      return Math.abs(nearest.position - position) < Math.abs(anchor.position - position)\n        ? nearest\n        : anchor;\n    }, null);\n  }\n\n  /**\n   * Return {@link AnchorPoint} nearest to given position\n   * If there're no {@link AnchorPoint}s, return `null` instead\n   * @ko 해당 좌표에서 가장 가까운 {@link AnchorPoint}를 반환합니다\n   * {@link AnchorPoint}가 하나도 없을 경우 `null`을 반환합니다\n   * @param {number} position A position to check<ko>확인할 좌표</ko>\n   * @return {AnchorPoint | null} The {@link AnchorPoint} nearest to the given position<ko>해당 좌표에 가장 인접한 {@link AnchorPoint}</ko>\n   */\n  public findNearestAnchor(position: number): AnchorPoint | null {\n    const anchors = this._anchors;\n\n    if (anchors.length <= 0) return null;\n\n    let prevDist = Infinity;\n    for (let anchorIdx = 0; anchorIdx < anchors.length; anchorIdx++) {\n      const anchor = anchors[anchorIdx];\n      const dist = Math.abs(anchor.position - position);\n\n      if (dist > prevDist) {\n        // Return previous anchor\n        return anchors[anchorIdx - 1];\n      }\n\n      prevDist = dist;\n    }\n\n    // Return last anchor\n    return anchors[anchors.length - 1];\n  }\n\n  /**\n   * Return {@link AnchorPoint} that matches {@link Flicking#currentPanel}\n   * @ko 현재 {@link Flicking#currentPanel}에 해당하는 {@link AnchorPoint}를 반환합니다\n   * @return {AnchorPoint | null}\n   */\n  public findActiveAnchor(): AnchorPoint | null {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const activeIndex = flicking.control.activeIndex;\n\n    return find(this._anchors, anchor => anchor.panel.index === activeIndex);\n  }\n\n  /**\n   * Clamp the given position between camera's range\n   * @ko 주어진 좌표를 Camera가 도달 가능한 범위 사이의 값으로 만듭니다\n   * @param {number} position A position to clamp<ko>범위를 제한할 좌표</ko>\n   * @return {number} A clamped position<ko>범위 제한된 좌표</ko>\n   */\n  public clampToReachablePosition(position: number): number {\n    const range = this._range;\n    return clamp(position, range.min, range.max);\n  }\n\n  /**\n   * Check whether the given panel is inside of the Camera's range\n   * @ko 해당 {@link Panel}이 Camera가 도달 가능한 범위 내에 있는지를 반환합니다\n   * @param panel An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>\n   * @return {boolean} Whether the panel's inside Camera's range<ko>도달 가능한 범위 내에 해당 패널이 존재하는지 여부</ko>\n   */\n  public canReach(panel: Panel): boolean {\n    const range = this._range;\n\n    if (panel.removed) return false;\n\n    const panelPos = panel.position;\n\n    return panelPos >= range.min && panelPos <= range.max;\n  }\n\n  /**\n   * Check whether the given panel element is visible at the current position\n   * @ko 현재 좌표에서 해당 패널 엘리먼트를 볼 수 있는지 여부를 반환합니다\n   * @param panel An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>\n   * @return Whether the panel element is visible at the current position<ko>현재 위치에서 해당 패널 엘리먼트가 보이는지 여부</ko>\n   */\n  public canSee(panel: Panel): boolean {\n    const visibleRange = this.visibleRange;\n    // Should not include margin, as we don't declare what the margin is visible as what the panel is visible.\n    return panel.includeRange(visibleRange.min, visibleRange.max, false);\n  }\n\n  /**\n   * Update Camera's {@link Camera#alignPosition alignPosition}\n   * @ko Camera의 {@link Camera#alignPosition alignPosition}을 업데이트합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateAlignPos(): this {\n    const align = this._align;\n\n    const alignVal = typeof align === \"object\"\n      ? (align as { camera: string | number }).camera\n      : align;\n\n    this._alignPos = parseAlign(alignVal, this.size);\n\n    return this;\n  }\n\n  /**\n   * Update Camera's {@link Camera#anchorPoints anchorPoints}\n   * @ko Camera의 {@link Camera#anchorPoints anchorPoints}를 업데이트합니다\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {this}\n   */\n  public updateAnchors(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    this._anchors = panels.map((panel, index) => new AnchorPoint({\n      index,\n      position: panel.position,\n      panel\n    }));\n\n    return this;\n  }\n\n  /**\n   * Update Viewport's height to active panel's height\n   * @ko 현재 선택된 패널의 높이와 동일하도록 뷰포트의 높이를 업데이트합니다\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {this}\n   */\n  public updateAdaptiveHeight() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const activePanel = flicking.control.activePanel;\n\n    if (!flicking.horizontal || !flicking.adaptive || !activePanel) return;\n\n    flicking.viewport.setSize({\n      height: activePanel.height\n    });\n  }\n\n  public updateOffset() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const unRenderedPanels = flicking.panels.filter(panel => !panel.rendered);\n    const position = this._position;\n\n    this._offset = unRenderedPanels\n      .filter(panel => panel.position + panel.offset < position)\n      .reduce((offset, panel) => offset + panel.sizeIncludingMargin, 0);\n\n    this._applyTransform();\n  }\n\n  /**\n   * Reset the history of {@link Flicking#event:needPanel needPanel} events so it can be triggered again\n   * @ko 발생한 {@link Flicking#event:needPanel needPanel} 이벤트들을 초기화하여 다시 발생할 수 있도록 합니다\n   * @chainable\n   * @return {this}\n   */\n  public resetNeedPanelHistory(): this {\n    this._needPanelTriggered = { prev: false, next: false };\n    return this;\n  }\n\n  protected _resetInternalValues() {\n    this._position = 0;\n    this._alignPos = 0;\n    this._offset = 0;\n    this._range = { min: 0, max: 0 };\n    this._visiblePanels = [];\n    this._anchors = [];\n    this._needPanelTriggered = { prev: false, next: false };\n  }\n\n  protected async _refreshVisiblePanels() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    const newVisiblePanels = panels.filter(panel => this.canSee(panel));\n    const prevVisiblePanels = this._visiblePanels;\n    this._visiblePanels = newVisiblePanels;\n\n    const added: Panel[] = newVisiblePanels.filter(panel => !includes(prevVisiblePanels, panel));\n    const removed: Panel[] = prevVisiblePanels.filter(panel => !includes(newVisiblePanels, panel));\n\n    if (added.length > 0 || removed.length > 0) {\n      await flicking.renderer.render();\n\n      flicking.trigger(new ComponentEvent(EVENTS.VISIBLE_CHANGE, {\n        added,\n        removed,\n        visiblePanels: newVisiblePanels\n      }));\n    }\n  }\n\n  protected _checkNeedPanel(): void {\n    const needPanelTriggered = this._needPanelTriggered;\n\n    if (needPanelTriggered.prev && needPanelTriggered.next) return;\n\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    if (panels.length <= 0) {\n      if (!needPanelTriggered.prev) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.PREV }));\n        needPanelTriggered.prev = true;\n      }\n      if (!needPanelTriggered.next) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.NEXT }));\n        needPanelTriggered.next = true;\n      }\n\n      return;\n    }\n\n    const cameraPosition = this._position;\n    const cameraSize = this.size;\n    const cameraRange = this._range;\n    const needPanelThreshold = flicking.needPanelThreshold;\n\n    const cameraPrev = cameraPosition - this._alignPos;\n    const cameraNext = cameraPrev + cameraSize;\n\n    const firstPanel = panels[0];\n    const lastPanel = panels[panels.length - 1];\n\n    if (!needPanelTriggered.prev) {\n      const firstPanelPrev = firstPanel.range.min;\n\n      if (cameraPrev <= (firstPanelPrev + needPanelThreshold) || cameraPosition <= (cameraRange.min + needPanelThreshold)) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.PREV }));\n        needPanelTriggered.prev = true;\n      }\n    }\n\n    if (!needPanelTriggered.next) {\n      const lastPanelNext = lastPanel.range.max;\n\n      if (cameraNext >= (lastPanelNext - needPanelThreshold) || cameraPosition >= (cameraRange.max - needPanelThreshold)) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.NEXT }));\n        needPanelTriggered.next = true;\n      }\n    }\n  }\n\n  protected _checkReachEnd(prevPos: number, newPos: number): void {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const range = this._range;\n\n    const wasBetweenRange = prevPos > range.min && prevPos < range.max;\n    const isBetweenRange = newPos > range.min && newPos < range.max;\n\n    if (!wasBetweenRange || isBetweenRange) return;\n\n    const direction = newPos <= range.min ? DIRECTION.PREV : DIRECTION.NEXT;\n\n    flicking.trigger(new ComponentEvent(EVENTS.REACH_EDGE, {\n      direction\n    }));\n  }\n\n  protected _applyTransform(): void {\n    const el = this._el;\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n\n    const actualPosition = this._position - this._alignPos - this._offset;\n\n    el.style[this._transform] = flicking.horizontal\n      ? `translate(${-actualPosition}px)`\n      : `translate(0, ${-actualPosition}px)`;\n  }\n\n  protected _checkTranslateSupport = () => {\n    const transforms = [\"webkitTransform\", \"msTransform\", \"MozTransform\", \"OTransform\", \"transform\"];\n\n    const supportedStyle = document.documentElement.style;\n    let transformName = \"\";\n    for (const prefixedTransform of transforms) {\n      if (prefixedTransform in supportedStyle) {\n        transformName = prefixedTransform;\n      }\n    }\n\n    if (!transformName) {\n      throw new FlickingError(ERROR.MESSAGE.TRANSFORM_NOT_SUPPORTED, ERROR.CODE.TRANSFORM_NOT_SUPPORTED);\n    }\n\n    this._transform = transformName;\n  };\n}\n\nexport default Camera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getFlickingAttached } from \"../utils\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A {@link Camera} that can move from the position of the first panel to the position of the last panel\n * @ko 첫번째 패널의 좌표로부터 마지막 패널의 좌표로까지 이동할 수 있는 종류의 {@link Camera}\n */\nclass LinearCamera extends Camera {\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const renderer = flicking.renderer;\n\n    const firstPanel = renderer.getPanel(0);\n    const lastPanel = renderer.getPanel(renderer.panelCount - 1);\n\n    this._range = { min: firstPanel?.position ?? 0, max: lastPanel?.position ?? 0 };\n    return this;\n  }\n}\n\nexport default LinearCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport { DIRECTION } from \"../const/external\";\nimport { circulatePosition, getFlickingAttached } from \"../utils\";\nimport { ValueOf } from \"../type/internal\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A data of the position that changes order of the panel elements\n * @ko 패널 엘리먼트 순서가 변경되는 좌표의 데이터\n * @interface\n * @property {Panel} panel Toggling panel<ko>순서를 변경할 패널</ko>\n * @property {DIRECTION} direction Toggling position<ko>순서를 변경할 방향</ko>\n * @property {boolean} toggled Whether the panel has toggled its position to `direction`<ko>`direction` 방향으로 패널 위치를 변경했는지 여부를 나타내는 값</ko>\n */\nexport interface TogglePoint {\n  panel: Panel;\n  direction: ValueOf<typeof DIRECTION>;\n  toggled: boolean;\n}\n\n/**\n * A {@link Camera} that connects the last panel and the first panel, enabling continuous loop\n * @ko 첫번째 패널과 마지막 패널이 이어진 상태로, 무한히 회전할 수 있는 종류의 {@link Camera}\n */\nclass CircularCamera extends Camera {\n  private _circularOffset: number = 0;\n  private _circularEnabled: boolean = false;\n\n  public get offset() { return this._offset - this._circularOffset; }\n  public get controlParams() { return { range: this._range, position: this._position, circular: this._circularEnabled }; }\n\n  public getPrevAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    if (!this._circularEnabled || anchor.index !== 0) return super.getPrevAnchor(anchor);\n\n    const anchors = this._anchors;\n    const rangeDiff = this.rangeDiff;\n    const lastAnchor = anchors[anchors.length - 1];\n\n    return new AnchorPoint({\n      index: lastAnchor.index,\n      position: lastAnchor.position - rangeDiff,\n      panel: lastAnchor.panel\n    });\n  }\n\n  public getNextAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    const anchors = this._anchors;\n\n    if (!this._circularEnabled || anchor.index !== anchors.length - 1) return super.getNextAnchor(anchor);\n\n    const rangeDiff = this.rangeDiff;\n    const firstAnchor = anchors[0];\n\n    return new AnchorPoint({\n      index: firstAnchor.index,\n      position: firstAnchor.position + rangeDiff,\n      panel: firstAnchor.panel\n    });\n  }\n\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    if (!this._circularEnabled) return super.findAnchorIncludePosition(position);\n\n    const range = this._range;\n    const positionInRange = circulatePosition(position, range.min, range.max);\n    const anchorInRange = super.findAnchorIncludePosition(positionInRange);\n\n    if (!anchorInRange) return null;\n\n    const rangeDiff = this.rangeDiff;\n\n    if (position < range.min) {\n      const loopCount = -Math.floor((range.min - position) / rangeDiff) - 1;\n\n      return new AnchorPoint({\n        index: anchorInRange.index,\n        position: anchorInRange.position + rangeDiff * loopCount,\n        panel: anchorInRange.panel\n      });\n    } else if (position > range.max) {\n      const loopCount = Math.floor((position - range.max) / rangeDiff) + 1;\n\n      return new AnchorPoint({\n        index: anchorInRange.index,\n        position: anchorInRange.position + rangeDiff * loopCount,\n        panel: anchorInRange.panel\n      });\n    }\n\n    return anchorInRange;\n  }\n\n  public clampToReachablePosition(position: number): number {\n    // Basically all position is reachable for circular camera\n    return this._circularEnabled\n      ? position\n      : super.clampToReachablePosition(position);\n  }\n\n  public canReach(panel: Panel): boolean {\n    if (panel.removed) return false;\n\n    return this._circularEnabled\n      // Always reachable on circular mode\n      ? true\n      : super.canReach(panel);\n  }\n\n  public canSee(panel: Panel): boolean {\n    const range = this._range;\n    const rangeDiff = this.rangeDiff;\n    const visibleRange = this.visibleRange;\n    const visibleInCurrentRange = super.canSee(panel);\n\n    if (!this._circularEnabled) {\n      return visibleInCurrentRange;\n    }\n\n    // Check looped visible area for circular case\n    if (visibleRange.min < range.min) {\n      return visibleInCurrentRange || panel.includeRange(visibleRange.min + rangeDiff, visibleRange.max + rangeDiff, false);\n    } else if (visibleRange.max > range.max) {\n      return visibleInCurrentRange || panel.includeRange(visibleRange.min - rangeDiff, visibleRange.max - rangeDiff, false);\n    }\n\n    return visibleInCurrentRange;\n  }\n\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const renderer = flicking.renderer;\n\n    const panels = renderer.panels;\n    if (panels.length <= 0) {\n      this._resetInternalValues();\n      return this;\n    }\n\n    const firstPanel = panels[0]!;\n    const lastPanel = panels[panels.length - 1]!;\n    const firstPanelPrev = firstPanel.range.min - firstPanel.margin.prev;\n    const lastPanelNext = lastPanel.range.max + lastPanel.margin.next;\n\n    const visibleSize = this.size;\n    const panelSizeSum = lastPanelNext - firstPanelPrev;\n\n    const canSetCircularMode = panels\n      .every(panel => panelSizeSum - panel.size >= visibleSize);\n    this._circularEnabled = canSetCircularMode;\n\n    if (canSetCircularMode) {\n      this._range = { min: firstPanelPrev, max: lastPanelNext };\n\n      panels.forEach(panel => panel.updateCircularToggleDirection());\n    } else {\n      this._range = { min: firstPanel.position, max: lastPanel.position };\n    }\n\n    this._updateCircularOffset();\n\n    return this;\n  }\n\n  public async lookAt(pos: number) {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const prevPos = this._position;\n\n    if (pos === prevPos) return await super.lookAt(pos);\n\n    const panels = flicking.renderer.panels;\n    const toggled = panels.map(panel => panel.toggle(prevPos, pos));\n\n    this._position = pos;\n\n    if (toggled.some(isToggled => isToggled)) {\n      this._updateCircularOffset();\n      await flicking.renderer.render();\n    }\n\n    return await super.lookAt(pos);\n  }\n\n  protected _applyTransform(): void {\n    const el = this._el;\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n\n    const actualPosition = this._position - this._alignPos - this._offset + this._circularOffset;\n\n    el.style[this._transform] = flicking.horizontal\n      ? `translate(${-actualPosition}px)`\n      : `translate(0, ${-actualPosition}px)`;\n  }\n\n  protected _resetInternalValues() {\n    super._resetInternalValues();\n    this._circularOffset = 0;\n    this._circularEnabled = false;\n  }\n\n  private _calcPanelAreaSum(panels: Panel[]) {\n    return panels.reduce((sum: number, panel: Panel) => sum + panel.sizeIncludingMargin, 0);\n  }\n\n  private _updateCircularOffset() {\n    if (!this._circularEnabled) {\n      this._circularOffset = 0;\n      return;\n    }\n\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const toggledPrev: Panel[] = [];\n    const toggledNext: Panel[] = [];\n\n    flicking.panels\n      .filter(panel => panel.toggled)\n      .forEach(panel => {\n        if (panel.toggleDirection === DIRECTION.PREV) {\n          toggledPrev.push(panel);\n        } else {\n          toggledNext.push(panel);\n        }\n      });\n\n    this._circularOffset = this._calcPanelAreaSum(toggledPrev) - this._calcPanelAreaSum(toggledNext);\n  }\n}\n\nexport default CircularCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport { getFlickingAttached } from \"../utils\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A {@link Camera} that set range not to go out of the first/last panel, so it won't show empty spaces before/after the first/last panel\n * @ko 첫번째와 마지막 패널 밖으로 넘어가지 못하도록 범위를 설정하여, 첫번째/마지막 패널 전/후의 빈 공간을 보이지 않도록 하는 종류의 {@link Camera}\n */\nclass BoundCamera extends Camera {\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const renderer = flicking.renderer;\n    const alignPos = this._alignPos;\n\n    const firstPanel = renderer.getPanel(0);\n    const lastPanel = renderer.getPanel(renderer.panelCount - 1);\n\n    if (!firstPanel || !lastPanel) {\n      this._range = { min: 0, max: 0 };\n      return this;\n    }\n\n    const viewportSize = this.size;\n    const firstPanelPrev = firstPanel.range.min;\n    const lastPanelNext = lastPanel.range.max;\n    const panelAreaSize = lastPanelNext - firstPanelPrev;\n    const canSetBoundMode = viewportSize < panelAreaSize;\n\n    if (canSetBoundMode) {\n      this._range = { min: firstPanelPrev + alignPos, max: lastPanelNext - viewportSize + alignPos };\n    } else {\n      this._range = { min: firstPanel.position, max: lastPanel.position };\n    }\n\n    return this;\n  }\n\n  public updateAnchors(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    if (panels.length <= 0) {\n      this._anchors = [];\n      return this;\n    }\n\n    const range = this._range;\n    const reachablePanels = panels.filter(panel => this.canReach(panel));\n\n    if (reachablePanels.length > 0) {\n      const shouldPrependBoundAnchor = reachablePanels[0].position !== range.min;\n      const shouldAppendBoundAnchor = reachablePanels[reachablePanels.length - 1].position !== range.max;\n      const indexOffset = shouldPrependBoundAnchor ? 1 : 0;\n\n      const newAnchors = reachablePanels.map((panel, idx) => new AnchorPoint({\n        index: idx + indexOffset,\n        position: panel.position,\n        panel\n      }));\n\n      if (shouldPrependBoundAnchor) {\n        newAnchors.splice(0, 0, new AnchorPoint({\n          index: 0,\n          position: range.min,\n          panel: panels[reachablePanels[0].index - 1]\n        }));\n      }\n\n      if (shouldAppendBoundAnchor) {\n        newAnchors.push(new AnchorPoint({\n          index: newAnchors.length,\n          position: range.max,\n          panel: panels[reachablePanels[reachablePanels.length - 1].index + 1]\n        }));\n      }\n\n      this._anchors = newAnchors;\n    } else if (range.min !== range.max) {\n      // There're more than 2 panels\n      const nearestPanelAtMin = this._findNearestPanel(range.min, panels);\n      const panelAtMin = nearestPanelAtMin.index === panels.length - 1\n        ? nearestPanelAtMin.prev()!\n        : nearestPanelAtMin;\n      const panelAtMax = panelAtMin.next()!;\n\n      this._anchors = [\n        new AnchorPoint({\n          index: 0,\n          position: range.min,\n          panel: panelAtMin\n        }),\n        new AnchorPoint({\n          index: 1,\n          position: range.max,\n          panel: panelAtMax\n        })\n      ];\n    } else {\n      this._anchors = [new AnchorPoint({\n        index: 0,\n        position: range.min,\n        panel: this._findNearestPanel(range.min, panels)\n      })];\n    }\n\n    return this;\n  }\n\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    const range = this._range;\n    const anchors = this._anchors;\n\n    if (anchors.length <= 0) return null;\n\n    if (position <= range.min) {\n      return anchors[0];\n    } else if (position >= range.max) {\n      return anchors[anchors.length - 1];\n    } else {\n      return super.findAnchorIncludePosition(position);\n    }\n  }\n\n  private _findNearestPanel(pos: number, panels: Panel[]): Panel {\n    let prevDist = Infinity;\n    for (let panelIdx = 0; panelIdx < panels.length; panelIdx++) {\n      const panel = panels[panelIdx];\n      const dist = Math.abs(panel.position - pos);\n\n      if (dist > prevDist) {\n        // Return previous anchor\n        return panels[panelIdx - 1];\n      }\n\n      prevDist = dist;\n    }\n\n    // Return last anchor\n    return panels[panels.length - 1];\n  }\n}\n\nexport default BoundCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\n\nimport RenderingStrategy from \"./RenderingStrategy\";\n\nclass RawRenderingStrategy implements RenderingStrategy {\n  public updateRenderingPanels(flicking: Flicking) {\n    // RawRenderingStrategy always renders all panel elements\n    flicking.panels.forEach(panel => panel.markForShow());\n  }\n}\n\nexport default RawRenderingStrategy;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking, { FlickingOptions } from \"../Flicking\";\nimport Panel, { PanelOptions } from \"../core/panel/Panel\";\nimport { ALIGN, EVENTS } from \"../const/external\";\nimport { getFlickingAttached, getMinusCompensatedIndex, includes } from \"../utils\";\n\nimport RenderingStrategy from \"./RenderingStrategy/RenderingStrategy\";\nimport RawRenderingStrategy from \"./RenderingStrategy/RawRenderingStrategy\";\n\nexport interface RendererOptions {\n  align: FlickingOptions[\"align\"];\n  strategy: RenderingStrategy;\n}\n\n/**\n * A component that manages {@link Panel} and its elements\n * @ko {@link Panel}과 그 엘리먼트들을 관리하는 컴포넌트\n */\nabstract class Renderer {\n  // Internal States\n  protected _flicking: Flicking | null;\n  protected _panels: Panel[];\n  protected _renderingStrategy: RenderingStrategy;\n\n  // Options\n  protected _align: RendererOptions[\"align\"];\n\n  // Internal states Getter\n  /**\n   * Array of panels\n   * @ko 전체 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get panels() { return this._panels; }\n  /**\n   * Count of panels\n   * @ko 전체 패널의 개수\n   * @type {number}\n   * @readonly\n   */\n  public get panelCount() { return this._panels.length; }\n\n  // Options Getter\n  /**\n   * A {@link Panel}'s {@link Panel#align align} value that applied to all panels\n   * @ko {@link Panel}에 공통적으로 적용할 {@link Panel#align align} 값\n   * @type {Constants.ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Setter\n  public set align(val: RendererOptions[\"align\"]) {\n    this._align = val;\n\n    const panelAlign = this._getPanelAlign();\n    this._panels.forEach(panel => { panel.align = panelAlign; });\n  }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An {@link Flicking#align align} value that will be applied to all panels<ko>전체 패널에 적용될 {@link Flicking#align align} 값</ko>\n   */\n  public constructor({\n    align = ALIGN.CENTER,\n    strategy = new RawRenderingStrategy()\n  }: Partial<RendererOptions> = {}) {\n    this._align = align;\n    this._flicking = null;\n    this._renderingStrategy = strategy;\n    this._panels = [];\n  }\n\n  /**\n   * Render panel elements inside the camera element\n   * @ko 패널 엘리먼트들을 카메라 엘리먼트 내부에 렌더링합니다\n   * @method\n   * @abstract\n   * @memberof Renderer\n   * @instance\n   * @name render\n   * @chainable\n   * @return {this}\n   */\n  public abstract render(): Promise<void>;\n  public abstract forceRenderAllPanels(): Promise<void>;\n\n  protected abstract _collectPanels(): void;\n  protected abstract _createPanel(el: any, options: PanelOptions): Panel;\n  protected abstract _insertPanelElements(panels: Panel[], nextSibling: Panel | null): void;\n  protected abstract _removePanelElements(panels: Panel[]): void;\n\n  /**\n   * Initialize Renderer\n   * @ko Renderer를 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n    this._collectPanels();\n\n    return this;\n  }\n\n  /**\n   * Destroy Renderer and return to initial state\n   * @ko Renderer를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this._flicking = null;\n    this._panels = [];\n  }\n\n  /**\n   * Return the {@link Panel} at the given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.\n   * @return {Panel | null} Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>\n   * @see Panel\n   */\n  public getPanel(index: number): Panel | null {\n    return this._panels[index] || null;\n  }\n\n  /**\n   * Update all panel sizes\n   * @ko 모든 패널의 크기를 업데이트합니다\n   * @chainable\n   * @return {this}\n   */\n  public updatePanelSize(): this {\n    this._panels.forEach(panel => panel.resize());\n    return this;\n  }\n\n  /**\n   * Insert new panels at given index\n   * This will increase index of panels after by the number of panels added\n   * @ko 주어진 인덱스에 새로운 패널들을 추가합니다\n   * 해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.\n   * @param {number} index Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>\n   * @param {any[]} elements An array of element or framework component with element in it<ko>엘리먼트의 배열 혹은 프레임워크에서 엘리먼트를 포함한 컴포넌트들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   */\n  public batchInsert(...items: Array<{\n    index: number;\n    elements: any[];\n  }>): Panel[] {\n    const panels = this._panels;\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    const { control } = flicking;\n    const align = this._getPanelAlign();\n\n    const allPanelsInserted = items.reduce((addedPanels, item) => {\n      const insertingIdx = getMinusCompensatedIndex(item.index, panels.length);\n      const panelsPushed = panels.slice(insertingIdx);\n      const panelsInserted = item.elements.map(el => this._createPanel(el, { index: insertingIdx, align, flicking }));\n\n      panels.splice(insertingIdx, 0, ...panelsInserted);\n\n      // Resize the newly added panels\n      panelsInserted.forEach(panel => panel.resize());\n\n      const insertedSize = this._getPanelSizeSum(panelsInserted);\n\n      // Update panel indexes & positions\n      panelsPushed.forEach(panel => {\n        panel.increaseIndex(panelsInserted.length);\n        panel.increasePosition(insertedSize);\n      });\n\n      // Insert the actual elements as camera element's children\n      this._insertPanelElements(panelsInserted, panelsPushed[0] ?? null);\n\n      return [...addedPanels, ...panelsInserted];\n    }, []);\n\n    if (allPanelsInserted.length <= 0) return [];\n\n    // Update camera & control\n    this._updateCameraAndControl();\n\n    void this.render();\n\n    // Move to the first panel added if no panels existed\n    // FIXME: fix for animating case\n    if (allPanelsInserted.length > 0 && !control.animating) {\n      void control.moveToPanel(control.activePanel || allPanelsInserted[0], {\n        duration: 0\n      }).catch(() => void 0);\n    }\n\n    flicking.camera.updateOffset();\n\n    flicking.trigger(new ComponentEvent(EVENTS.PANEL_CHANGE, {\n      added: allPanelsInserted,\n      removed: []\n    }));\n\n    return allPanelsInserted;\n  }\n\n  /**\n   * Remove the panel at the given index\n   * This will decrease index of panels after by the number of panels removed\n   * @ko 주어진 인덱스의 패널을 제거합니다\n   * 해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다\n   * @param {number} index Index of panel to remove<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>\n   * @return An array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public batchRemove(...items: Array<{ index: number; deleteCount: number }>): Panel[] {\n    const panels = this._panels;\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    const { camera, control } = flicking;\n    const activePanel = control.activePanel;\n    const activeIndex = control.activeIndex;\n\n    const allPanelsRemoved = items.reduce((removed, item) => {\n      const { index, deleteCount } = item;\n      const removingIdx = getMinusCompensatedIndex(index, panels.length);\n\n      const panelsPulled = panels.slice(removingIdx + deleteCount);\n      const panelsRemoved = panels.splice(removingIdx, deleteCount);\n\n      if (panelsRemoved.length <= 0) return [];\n\n      // Update panel indexes & positions\n      const removedSize = this._getPanelSizeSum(panelsRemoved);\n      panelsPulled.forEach(panel => {\n        panel.decreaseIndex(panelsRemoved.length);\n        panel.decreasePosition(removedSize);\n      });\n\n      this._removePanelElements(panelsRemoved);\n\n      // Remove panel elements\n      panelsRemoved.forEach(panel => panel.destroy());\n\n      // Update camera & control\n      this._updateCameraAndControl();\n\n      if (includes(panelsRemoved, activePanel)) {\n        control.resetActive();\n      }\n\n      return [...removed, ...panelsRemoved];\n    }, []);\n\n    void this.render();\n\n    // FIXME: fix for animating case\n    if (allPanelsRemoved.length > 0 && !control.animating) {\n      const targetPanel = includes(allPanelsRemoved, activePanel)\n        ? (panels[activeIndex] || panels[panels.length - 1])\n        : activePanel;\n\n      if (targetPanel) {\n        void control.moveToPanel(targetPanel, {\n          duration: 0\n        }).catch(() => void 0);\n      } else {\n        // All panels removed\n        void camera.lookAt(0);\n      }\n    }\n\n    flicking.camera.updateOffset();\n\n    flicking.trigger(new ComponentEvent(EVENTS.PANEL_CHANGE, {\n      added: [],\n      removed: allPanelsRemoved\n    }));\n\n    return allPanelsRemoved;\n  }\n\n  protected _getPanelAlign() {\n    const align = this._align;\n\n    return typeof align === \"object\"\n      ? (align as { panel: string | number }).panel\n      : align;\n  }\n\n  protected _getPanelSizeSum(panels: Panel[]): number {\n    const firstPanel = panels[0];\n    const lastPanel = panels[panels.length - 1];\n\n    const marginDiff = lastPanel.margin.next - firstPanel.margin.prev;\n\n    return (lastPanel.range.max - firstPanel.range.min) + marginDiff;\n  }\n\n  protected _updateCameraAndControl() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const { camera, control } = flicking;\n\n    camera.updateRange();\n    camera.updateAnchors();\n    camera.resetNeedPanelHistory();\n    control.updateInput();\n  }\n}\n\nexport default Renderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\nimport { getProgress, getStyle, parseAlign } from \"../../utils\";\nimport { ALIGN, DIRECTION } from \"../../const/external\";\nimport { LiteralUnion, ValueOf } from \"../../type/internal\";\n\nexport interface PanelOptions {\n  index: number;\n  align: LiteralUnion<ValueOf<typeof ALIGN>> | number;\n  flicking: Flicking;\n}\n\nabstract class Panel {\n  // Internal States\n  protected _flicking: Flicking;\n  protected _index: number;\n  protected _pos: number;\n  protected _size: number;\n  protected _height: number;\n  protected _margin: { prev: number; next: number };\n  protected _alignPos: number; // Actual align pos\n  protected _removed: boolean;\n  protected _toggleDirection: ValueOf<typeof DIRECTION>;\n  protected _toggled: boolean;\n  protected _togglePosition: number;\n\n  // Options\n  protected _align: PanelOptions[\"align\"];\n\n  // Internal States Getter\n  /**\n   * `HTMLElement` that panel's referencing\n   * @ko 패널이 참조하고 있는 `HTMLElement`\n   * @type {HTMLElement}\n   * @readonly\n   */\n  abstract get element(): HTMLElement;\n  /**\n   * Index of the panel\n   * @ko 패널의 인덱스\n   * @type {number}\n   * @readonly\n   */\n  public get index() { return this._index; }\n  /**\n   * Position of the panel, including {@link Panel#alignPosition alignPosition}\n   * @ko 패널의 현재 좌표, {@link Panel#alignPosition alignPosition}을 포함하고 있습니다\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._pos + this._alignPos; }\n  /**\n   * Cached size of the panel element\n   * This is equal to {@link Panel#element element}'s `offsetWidth` if {@link Flicking#horizontal horizontal} is `true`, and `offsetHeight` else\n   * @ko 패널 엘리먼트의 캐시된 크기\n   * 이 값은 {@link Flicking#horizontal horizontal}이 `true`일 경우 {@link Panel#element element}의 `offsetWidth`와 동일하고, `false`일 경우 `offsetHeight`와 동일합니다\n   * @type {number}\n   * @readonly\n   */\n  public get size() { return this._size; }\n  /**\n   * Panel's size including CSS `margin`\n   * This value includes {@link Panel#element element}'s margin left/right if {@link Flicking#horizontal horizontal} is `true`, and margin top/bottom else\n   * @ko CSS `margin`을 포함한 패널의 크기\n   * 이 값은 {@link Flicking#horizontal horizontal}이 `true`일 경우 margin left/right을 포함하고, `false`일 경우 margin top/bottom을 포함합니다\n   * @type {number}\n   * @readonly\n   */\n  public get sizeIncludingMargin() { return this._size + this._margin.prev + this._margin.next; }\n  /**\n   * Height of the panel element\n   * @ko 패널 엘리먼트의 높이\n   * @type {number}\n   * @readonly\n   */\n  public get height() { return this._height; }\n  /**\n   * Cached CSS `margin` value of the panel element\n   * @ko 패널 엘리먼트의 CSS `margin` 값\n   * @type {object}\n   * @property {number} prev CSS `margin-left` when the {@link Flicking#horizontal horizontal} is `true`, and `margin-top` else\n   * <ko>{@link Flicking#horizontal horizontal}이 `true`일 경우 `margin-left`, `false`일 경우 `margin-top`에 해당하는 값</ko>\n   * @property {number} next CSS `margin-right` when the {@link Flicking#horizontal horizontal} is `true`, and `margin-bottom` else\n   * <ko>{@link Flicking#horizontal horizontal}이 `true`일 경우 `margin-right`, `false`일 경우 `margin-bottom`에 해당하는 값</ko>\n   * @readonly\n   */\n  public get margin() { return this._margin; }\n  /**\n   * Align position inside the panel where {@link Camera}'s {@link Camera#alignPosition alignPosition} inside viewport should be located at\n   * @ko 패널의 정렬 기준 위치. {@link Camera}의 뷰포트 내에서의 {@link Camera#alignPosition alignPosition}이 위치해야 하는 곳입니다\n   * @type {number}\n   * @readonly\n   */\n  public get alignPosition() { return this._alignPos; }\n  /**\n   * A value indicating whether the panel's {@link Flicking#remove remove}d\n   * @ko 패널이 {@link Flicking#remove remove}되었는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get removed() { return this._removed; }\n  /**\n   * A value indicating whether the panel's element is being rendered on the screen\n   * @ko 패널의 엘리먼트가 화면상에 렌더링되고있는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract get rendered();\n  /**\n   * Panel element's range of the bounding box\n   * @ko 패널 엘리먼트의 Bounding box 범위\n   * @type {object}\n   * @property {number} [min] Bounding box's left({@link Flicking#horizontal horizontal}: true) / top({@link Flicking#horizontal horizontal}: false)\n   * @property {number} [max] Bounding box's right({@link Flicking#horizontal horizontal}: true) / bottom({@link Flicking#horizontal horizontal}: false)\n   * @readonly\n   */\n  public get range() { return { min: this._pos, max: this._pos + this._size }; }\n  /**\n   * A value indicating whether the panel's position is toggled by circular behavior\n   * @ko 패널의 위치가 circular 동작에 의해 토글되었는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get toggled() { return this._toggled; }\n  /**\n   * A direction where the panel's position is toggled\n   * @ko 패널의 위치가 circular 동작에 의해 토글되는 방향\n   * @type {DIRECTION}\n   * @readonly\n   */\n  public get toggleDirection() { return this._toggleDirection; }\n  /**\n   * Actual position offset determined by {@link Panel#order}\n   * @ko {@link Panel#order}에 의한 실제 위치 변경값\n   * @type {number}\n   * @readonly\n   */\n  public get offset() {\n    const toggleDirection = this._toggleDirection;\n    const cameraRangeDiff = this._flicking.camera.rangeDiff;\n\n    return toggleDirection === DIRECTION.NONE || !this._toggled\n      ? 0\n      : toggleDirection === DIRECTION.PREV\n        ? -cameraRangeDiff\n        : cameraRangeDiff;\n  }\n\n  /**\n   * Progress of movement between previous or next panel relative to current panel\n   * @ko 이 패널로부터 이전/다음 패널으로의 이동 진행률\n   * @type {number}\n   * @readonly\n   */\n  public get progress() {\n    const flicking = this._flicking;\n\n    return this.index - flicking.camera.progress;\n  }\n\n  /**\n   * Progress of movement between points that panel is completely invisible outside of viewport(prev direction: -1, selected point: 0, next direction: 1)\n   * @ko 현재 패널이 뷰포트 영역 밖으로 완전히 사라지는 지점을 기준으로 하는 진행도(prev방향: -1, 선택 지점: 0, next방향: 1)\n   * @type {number}\n   * @readonly\n   */\n  public get outsetProgress() {\n    const position = this.position + this.offset;\n    const alignPosition = this._alignPos;\n    const camera = this._flicking.camera;\n    const camPos = camera.position;\n\n    if (camPos === position) {\n      return 0;\n    }\n\n    if (camPos < position) {\n      const disappearPosNext = position + (camera.size - camera.alignPosition) + alignPosition;\n\n      return -getProgress(camPos, position, disappearPosNext);\n    } else {\n      const disappearPosPrev = position - (camera.alignPosition + this._size - alignPosition);\n\n      return 1 - getProgress(camPos, disappearPosPrev, position);\n    }\n  }\n\n  /**\n   * Percentage of area where panel is visible in the viewport\n   * @ko 뷰포트 안에서 패널이 보이는 영역의 비율\n   * @type {number}\n   * @readonly\n   */\n  public get visibleRatio() {\n    const range = this.range;\n    const size = this._size;\n    const offset = this.offset;\n    const visibleRange = this._flicking.camera.visibleRange;\n\n    const checkingRange = {\n      min: range.min + offset,\n      max: range.max + offset\n    };\n\n    if (checkingRange.max <= visibleRange.min || checkingRange.min >= visibleRange.max) {\n      return 0;\n    }\n\n    let visibleSize = size;\n\n    if (visibleRange.min > checkingRange.min) {\n      visibleSize -= visibleRange.min - checkingRange.min;\n    }\n    if (visibleRange.max < checkingRange.max) {\n      visibleSize -= checkingRange.max - visibleRange.max;\n    }\n\n    return visibleSize / size;\n  }\n\n  // Options Getter\n  /**\n   * A value indicating where the {@link Panel#alignPosition alignPosition} should be located at inside the panel element\n   * @ko {@link Panel#alignPosition alignPosition}이 패널 내의 어디에 위치해야 하는지를 나타내는 값\n   * @type {Constants.ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Getter\n  public set align(val: PanelOptions[\"align\"]) { this._align = val; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor({\n    index,\n    align,\n    flicking\n  }: PanelOptions) {\n    this._index = index;\n    this._flicking = flicking;\n\n    this._align = align;\n\n    this._removed = false;\n    this._resetInternalStates();\n  }\n\n  /**\n   * Mark panel element to be appended on the camera element\n   * @internal\n   */\n  public abstract markForShow();\n\n  /**\n   * Mark panel element to be removed from the camera element\n   * @internal\n   */\n  public abstract markForHide();\n\n  /**\n   * Update size of the panel\n   * @ko 패널의 크기를 갱신합니다\n   * @chainable\n   * @return {this}\n   */\n  public resize(): this {\n    const el = this.element;\n    const elStyle = getStyle(el);\n    const flicking = this._flicking;\n    const horizontal = flicking.horizontal;\n    const prevPanel = flicking.renderer.panels[this._index - 1];\n\n    this._size = horizontal ? el.offsetWidth : el.offsetHeight;\n\n    this._margin = horizontal\n      ? {\n        prev: parseFloat(elStyle.marginLeft || \"0\"),\n        next: parseFloat(elStyle.marginRight || \"0\")\n      } : {\n        prev: parseFloat(elStyle.marginTop || \"0\"),\n        next: parseFloat(elStyle.marginBottom || \"0\")\n      };\n\n    this._pos = prevPanel\n      ? prevPanel.range.max + prevPanel.margin.next + this._margin.prev\n      : this._margin.prev;\n\n    this._height = horizontal ? el.offsetHeight : this._size;\n\n    this._updateAlignPos();\n\n    return this;\n  }\n\n  /**\n   * Check whether the given element is inside of this panel's {@link Panel#element element}\n   * @ko 해당 엘리먼트가 이 패널의 {@link Panel#element element} 내에 포함되어 있는지를 반환합니다\n   * @param {HTMLElement} element The HTMLElement to check<ko>확인하고자 하는 HTMLElement</ko>\n   * @return {boolean} A Boolean value indicating the element is inside of this panel {@link Panel#element element}<ko>패널의 {@link Panel#element element}내에 해당 엘리먼트 포함 여부</ko>\n   */\n  public contains(element: HTMLElement): boolean {\n    return !!this.element?.contains(element);\n  }\n\n  /**\n   * Reset internal state and set {@link Panel#removed removed} to `true`\n   * @ko 내부 상태를 초기화하고 {@link Panel#removed removed}를 `true`로 설정합니다.\n   * @return {void}\n   */\n  public destroy(): void {\n    this._resetInternalStates();\n    this._removed = true;\n  }\n\n  /**\n   * Check whether the given position is inside of this panel's {@link Panel#range range}\n   * @ko 주어진 좌표가 현재 패널의 {@link Panel#range range}내에 속해있는지를 반환합니다.\n   * @param {number} pos A position to check<ko>확인하고자 하는 좌표</ko>\n   * @param {boolean} [includeMargin=false] Include {@link Panel#margin margin} to the range<ko>패널 영역에 {@link Panel#margin margin}값을 포함시킵니다</ko>\n   * @return {boolean} A Boolean value indicating whether the given position is included in the panel range<ko>해당 좌표가 패널 영역 내에 속해있는지 여부</ko>\n   */\n  public includePosition(pos: number, includeMargin: boolean = false): boolean {\n    return this.includeRange(pos, pos, includeMargin);\n  }\n\n  /**\n   * Check whether the given range is fully included in this panel's area\n   * @ko 주어진 범위가 이 패널 내부에 완전히 포함되는지를 반환합니다\n   * @param {number} min Minimum value of the range to check<ko>확인하고자 하는 최소 범위</ko>\n   * @param {number} max Maximum value of the range to check<ko>확인하고자 하는 최대 범위</ko>\n   * @param {boolean} [includeMargin=false] Include {@link Panel#margin margin} to the range<ko>패널 영역에 {@link Panel#margin margin}값을 포함시킵니다</ko>\n   * @returns {boolean} A Boolean value indicating whether the given range is fully included in the panel range<ko>해당 범위가 패널 영역 내에 완전히 속해있는지 여부</ko>\n   */\n  public includeRange(min: number, max: number, includeMargin: boolean = false): boolean {\n    const margin = this._margin;\n    const panelRange = this.range;\n\n    if (includeMargin) {\n      panelRange.min -= margin.prev;\n      panelRange.max += margin.next;\n    }\n\n    return max >= panelRange.min && min <= panelRange.max;\n  }\n\n  /**\n   * Move {@link Camera} to this panel\n   * @ko {@link Camera}를 이 패널로 이동합니다\n   * @param {number} [duration] Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @returns {Promise<void>} A Promise which will be resolved after reaching the panel<ko>패널 도달시에 resolve되는 Promise</ko>\n   */\n  public focus(duration?: number) {\n    return this._flicking.moveTo(this._index, duration);\n  }\n\n  /**\n   * Get previous(`index - 1`) panel. When the previous panel does not exist, this will return `null` instead\n   * If the {@link Flicking#circularEnabled circular} is enabled, this will return the last panel if called from the first panel\n   * @ko 이전(`index - 1`) 패널을 반환합니다. 이전 패널이 없을 경우 `null`을 반환합니다\n   * {@link Flicking#circularEnabled circular} 모드가 활성화되었을 때 첫번째 패널에서 이 메소드를 호출할 경우 마지막 패널을 반환합니다\n   * @returns {Panel | null} The previous panel<ko>이전 패널</ko>\n   */\n  public prev(): Panel | null {\n    const index = this._index;\n    const flicking = this._flicking;\n    const renderer = flicking.renderer;\n    const panelCount = renderer.panelCount;\n\n    if (panelCount === 1) return null;\n\n    return flicking.circularEnabled\n      ? renderer.getPanel(index === 0 ? panelCount - 1 : index - 1)\n      : renderer.getPanel(index - 1);\n  }\n\n  /**\n   * Get next(`index + 1`) panel. When the next panel does not exist, this will return `null` instead\n   * If the {@link Flicking#circularEnabled circular} is enabled, this will return the first panel if called from the last panel\n   * @ko 다음(`index + 1`) 패널을 반환합니다. 다음 패널이 없을 경우 `null`을 반환합니다\n   * {@link Flicking#circularEnabled circular} 모드가 활성화되었을 때 마지막 패널에서 이 메소드를 호출할 경우 첫번째 패널을 반환합니다\n   * @returns {Panel | null} The previous panel<ko>다음 패널</ko>\n   */\n  public next(): Panel | null {\n    const index = this._index;\n    const flicking = this._flicking;\n    const renderer = flicking.renderer;\n    const panelCount = renderer.panelCount;\n\n    if (panelCount === 1) return null;\n\n    return flicking.circularEnabled\n      ? renderer.getPanel(index === panelCount - 1 ? 0 : index + 1)\n      : renderer.getPanel(index + 1);\n  }\n\n  /**\n   * Increase panel's index by the given value\n   * @ko 패널의 인덱스를 주어진 값만큼 증가시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public increaseIndex(val: number): this {\n    this._index += Math.max(val, 0);\n    return this;\n  }\n\n  /**\n   * Decrease panel's index by the given value\n   * @ko 패널의 인덱스를 주어진 값만큼 감소시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public decreaseIndex(val: number): this {\n    this._index -= Math.max(val, 0);\n    return this;\n  }\n\n  /**\n   * Increase panel's position by the given value\n   * @ko 패널의 위치를 주어진 값만큼 증가시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public increasePosition(val: number): this {\n    this._moveBy(Math.max(val, 0));\n    return this;\n  }\n\n  /**\n   * Decrease panel's position by the given value\n   * @ko 패널의위치를 주어진 값만큼 감소시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public decreasePosition(val: number): this {\n    this._moveBy(-Math.max(val, 0));\n    return this;\n  }\n\n  /**\n   * @internal\n   * @return {boolean} toggled\n   */\n  public toggle(prevPos: number, newPos: number): boolean {\n    const toggleDirection = this._toggleDirection;\n    const togglePosition = this._togglePosition;\n\n    if (toggleDirection === DIRECTION.NONE || newPos === prevPos) return false;\n\n    const prevToggled = this._toggled;\n\n    if (newPos > prevPos) {\n      if (togglePosition >= prevPos && togglePosition <= newPos) {\n        this._toggled = toggleDirection === DIRECTION.NEXT;\n      }\n    } else {\n      if (togglePosition <= prevPos && togglePosition >= newPos) {\n        this._toggled = toggleDirection !== DIRECTION.NEXT;\n      }\n    }\n\n    return prevToggled !== this._toggled;\n  }\n\n  /**\n   * @internal\n   */\n  public updateCircularToggleDirection(): this {\n    const flicking = this._flicking;\n\n    if (!flicking.circularEnabled) {\n      this._toggleDirection = DIRECTION.NONE;\n      this._toggled = false;\n      return this;\n    }\n\n    const camera = flicking.camera;\n    const camRange = camera.range;\n    const camAlignPosition = camera.alignPosition;\n    const camVisibleRange = camera.visibleRange;\n    const camVisibleSize = camVisibleRange.max - camVisibleRange.min;\n\n    const minimumVisible = camRange.min - camAlignPosition;\n    const maximumVisible = camRange.max - camAlignPosition + camVisibleSize;\n\n    const shouldBeVisibleAtMin = this.includeRange(maximumVisible - camVisibleSize, maximumVisible, false);\n    const shouldBeVisibleAtMax = this.includeRange(minimumVisible, minimumVisible + camVisibleSize, false);\n\n    this._toggled = false;\n    if (shouldBeVisibleAtMin) {\n      this._toggleDirection = DIRECTION.PREV;\n      this._togglePosition = this.range.max + camRange.min - camRange.max + camAlignPosition;\n      this.toggle(Infinity, camera.position);\n    } else if (shouldBeVisibleAtMax) {\n      this._toggleDirection = DIRECTION.NEXT;\n      this._togglePosition = this.range.min + camRange.max - camVisibleSize + camAlignPosition;\n      this.toggle(-Infinity, camera.position);\n    } else {\n      this._toggleDirection = DIRECTION.NONE;\n      this._togglePosition = 0;\n    }\n\n    return this;\n  }\n\n  private _moveBy(val: number): this {\n    this._pos += val;\n\n    return this;\n  }\n\n  private _updateAlignPos() {\n    this._alignPos = parseAlign(this._align, this._size);\n  }\n\n  private _resetInternalStates() {\n    this._size = 0;\n    this._pos = 0;\n    this._margin = { prev: 0, next: 0 };\n    this._height = 0;\n    this._alignPos = 0;\n    this._toggled = false;\n    this._togglePosition = 0;\n    this._toggleDirection = DIRECTION.NONE;\n  }\n}\n\nexport default Panel;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel, { PanelOptions } from \"./Panel\";\n\nexport interface ElementPanelOptions extends PanelOptions {\n  el: HTMLElement;\n}\n\n/**\n * An slide data component that holds information of a single HTMLElement\n * @ko 슬라이드 데이터 컴포넌트로, 단일 HTMLElement의 정보를 갖고 있습니다\n */\nclass ElementPanel extends Panel {\n  private _el: HTMLElement;\n  private _rendered: boolean;\n\n  /**\n   * `HTMLElement` that panel's referencing\n   * @ko 패널이 참조하고 있는 `HTMLElement`\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n\n  public get rendered() { return this._rendered; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {HTMLElement} [options.el] A `HTMLElement` panel's referencing<ko>패널이 참조하는 `HTMLElement`</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor(options: ElementPanelOptions) {\n    super(options);\n\n    this._el = options.el;\n    this._rendered = true;\n  }\n\n  public markForShow() {\n    this._rendered = true;\n  }\n\n  public markForHide() {\n    this._rendered = false;\n  }\n}\n\nexport default ElementPanel;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getFlickingAttached, toArray } from \"../utils\";\nimport Panel, { PanelOptions } from \"../core/panel/Panel\";\nimport ElementPanel from \"../core/panel/ElementPanel\";\n\nimport Renderer from \"./Renderer\";\n\n/**\n *\n */\nclass VanillaRenderer extends Renderer {\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async render() {\n    const strategy = this._renderingStrategy;\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraEl = flicking.camera.element;\n    const wasRenderedPanels = this._panels.filter(panel => panel.element.parentElement === cameraEl);\n\n    strategy.updateRenderingPanels(flicking);\n    const renderingPanels = this._getRenderingPanelsByOrder();\n\n    this._removePanelElements(wasRenderedPanels.filter(panel => !panel.rendered));\n    this._insertPanelElements(renderingPanels.filter(panel => panel.element.parentElement !== cameraEl), null);\n    this._resetPanelElementOrder(renderingPanels);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async forceRenderAllPanels() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const camera = flicking.camera;\n    const cameraElement = camera.element;\n    const fragment = document.createDocumentFragment();\n\n    this._panels.forEach(panel => fragment.appendChild(panel.element));\n\n    this._removeAllChildsFromCamera();\n\n    cameraElement.appendChild(fragment);\n  }\n\n  protected _collectPanels() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    const cameraElement = flicking.camera.element;\n\n    // Remove all text nodes in the camera element\n    toArray(cameraElement.childNodes).forEach(node => {\n      if (node.nodeType === Node.TEXT_NODE) {\n        cameraElement.removeChild(node);\n      }\n    });\n\n    const align = this._getPanelAlign();\n    const cameraChilds = toArray(cameraElement.children);\n\n    this._panels = cameraChilds.map(\n      (el: HTMLElement, index: number) => new ElementPanel({ flicking, el, index, align })\n    );\n  }\n\n  protected _createPanel(el: HTMLElement, options: PanelOptions): ElementPanel {\n    return new ElementPanel({ el, ...options });\n  }\n\n  protected _insertPanelElements(panels: Panel[], nextSibling: Panel | null) {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const camera = flicking.camera;\n    const cameraElement = camera.element;\n    const nextSiblingElement = nextSibling?.element || null;\n    const fragment = document.createDocumentFragment();\n\n    panels.forEach(panel => fragment.appendChild(panel.element));\n    cameraElement.insertBefore(fragment, nextSiblingElement);\n\n    return this;\n  }\n\n  protected _removePanelElements(panels: Panel[]): this {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraElement = flicking.camera.element;\n\n    panels.forEach(panel => {\n      cameraElement.removeChild(panel.element);\n    });\n\n    return this;\n  }\n\n  private _resetPanelElementOrder(panels: Panel[]) {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraEl = flicking.camera.element;\n\n    // We're using reversed panels here as last panel should be the last element of camera element\n    const reversedPanels = [...panels].reverse();\n    reversedPanels.forEach((panel, idx) => {\n      const nextPanel = reversedPanels[idx - 1];\n      const nextPanelEl = nextPanel ? nextPanel.element : null;\n\n      if (panel.element.nextElementSibling !== nextPanelEl) {\n        cameraEl.insertBefore(panel.element, nextPanelEl);\n      }\n    });\n  }\n\n  private _removeAllChildsFromCamera() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraElement = flicking.camera.element;\n\n    // Remove other elements\n    while (cameraElement.firstChild) {\n      cameraElement.removeChild(cameraElement.firstChild);\n    }\n  }\n\n  private _getRenderingPanelsByOrder(): Panel[] {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const panels = flicking.renderer.panels;\n\n    return panels.filter(panel => panel.rendered)\n      .sort((a, b) => (a.position + a.offset) - (b.position + b.offset));\n  }\n}\n\nexport default VanillaRenderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\n\nimport Renderer from \"./Renderer\";\n\n/**\n *\n */\nabstract class ExternalRenderer extends Renderer {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _insertPanelElements(panels: Panel[], nextSibling: Panel | null): void {\n    // DO NOTHING\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _removePanelElements(panels: Panel[]): void {\n    // DO NOTHING\n  }\n}\n\nexport default ExternalRenderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\n\nimport RenderingStrategy from \"./RenderingStrategy\";\n\nclass VisibleRenderingStrategy implements RenderingStrategy {\n  public updateRenderingPanels(flicking: Flicking) {\n    const panels = flicking.renderer.panels;\n    const camera = flicking.camera;\n\n    const visibleIndexes = camera.visiblePanels.reduce((visibles, panel) => {\n      visibles[panel.index] = true;\n      return visibles;\n    }, {});\n\n    panels.forEach(panel => {\n      if (panel.index in visibleIndexes) {\n        panel.markForShow();\n      } else if (!flicking.holding) {\n        // During the input sequence,\n        // Do not remove panel elements as it won't trigger touchend event.\n        panel.markForHide();\n      }\n    });\n\n    camera.updateOffset();\n  }\n}\n\nexport default VisibleRenderingStrategy;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nimport FlickingError from \"./core/FlickingError\";\nimport Viewport from \"./core/Viewport\";\nimport { Panel } from \"./core/panel\";\nimport { Control, SnapControl, SnapControlOptions, FreeControl, StrictControl, FreeControlOptions, StrictControlOptions } from \"./control\";\nimport { BoundCamera, Camera, CircularCamera, LinearCamera } from \"./camera\";\nimport { Renderer, VanillaRenderer, ExternalRenderer, RawRenderingStrategy, VisibleRenderingStrategy } from \"./renderer\";\nimport { EVENTS, ALIGN, MOVE_TYPE, DIRECTION } from \"./const/external\";\nimport * as ERROR from \"./const/error\";\nimport { findIndex, getElement, includes, parseElement } from \"./utils\";\nimport { HoldStartEvent, HoldEndEvent, MoveStartEvent, SelectEvent, MoveEvent, MoveEndEvent, WillChangeEvent, WillRestoreEvent, NeedPanelEvent, VisibleChangeEvent, ReachEdgeEvent, ReadyEvent, AfterResizeEvent, BeforeResizeEvent, ChangedEvent, RestoredEvent, PanelChangeEvent } from \"./type/event\";\nimport { LiteralUnion, ValueOf } from \"./type/internal\";\nimport { ElementLike, Plugin, Status, MoveTypeOptions } from \"./type/external\";\n\n/**\n * @interface\n */\nexport interface FlickingEvents {\n  [EVENTS.READY]: ReadyEvent;\n  [EVENTS.BEFORE_RESIZE]: BeforeResizeEvent;\n  [EVENTS.AFTER_RESIZE]: AfterResizeEvent;\n  [EVENTS.HOLD_START]: HoldStartEvent;\n  [EVENTS.HOLD_END]: HoldEndEvent;\n  [EVENTS.MOVE_START]: MoveStartEvent;\n  [EVENTS.MOVE]: MoveEvent;\n  [EVENTS.MOVE_END]: MoveEndEvent;\n  [EVENTS.WILL_CHANGE]: WillChangeEvent;\n  [EVENTS.CHANGED]: ChangedEvent;\n  [EVENTS.WILL_RESTORE]: WillRestoreEvent;\n  [EVENTS.RESTORED]: RestoredEvent;\n  [EVENTS.SELECT]: SelectEvent;\n  [EVENTS.NEED_PANEL]: NeedPanelEvent;\n  [EVENTS.VISIBLE_CHANGE]: VisibleChangeEvent;\n  [EVENTS.REACH_EDGE]: ReachEdgeEvent;\n  [EVENTS.PANEL_CHANGE]: PanelChangeEvent;\n}\n\n/**\n * @interface\n */\nexport interface FlickingOptions {\n  // UI / LAYOUT\n  align: LiteralUnion<ValueOf<typeof ALIGN>> | number | { panel: number | string; camera: number | string };\n  defaultIndex: number;\n  horizontal: boolean;\n  circular: boolean;\n  bound: boolean;\n  adaptive: boolean;\n  // EVENT\n  needPanelThreshold: number;\n  preventEventsBeforeInit: boolean;\n  // ANIMATION\n  deceleration: number;\n  duration: number;\n  easing: (x: number) => number;\n  // INPUT\n  inputType: string[];\n  moveType: ValueOf<typeof MOVE_TYPE> | MoveTypeOptions<ValueOf<typeof MOVE_TYPE>>;\n  threshold: number;\n  interruptable: boolean;\n  bounce: number | string | [number | string, number | string];\n  iOSEdgeSwipeThreshold: number;\n  preventClickOnDrag: boolean;\n  disableOnInit: boolean;\n  // PERFORMANCE\n  renderOnlyVisible: boolean;\n  // OTHERS\n  autoInit: boolean;\n  autoResize: boolean;\n  renderExternal: {\n    renderer: typeof ExternalRenderer;\n    rendererOptions: {[key: string]: any};\n  } | null;\n}\n\n/**\n * @extends Component\n * @support {\"ie\": \"9+(with polyfill)\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|@egjs/component}\n * @requires {@link https://github.com/naver/egjs-axes|@egjs/axes}\n */\nclass Flicking extends Component<FlickingEvents> {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @type {string}\n   * @readonly\n   * @example\n   * ```ts\n   * Flicking.VERSION;  // ex) 4.0.0\n   * ```\n   */\n  public static VERSION = \"#__VERSION__#\";\n\n  // Core components\n  private _viewport: Viewport;\n  private _camera: Camera;\n  private _control: Control;\n  private _renderer: Renderer;\n\n  // Options\n  private _align: FlickingOptions[\"align\"];\n  private _defaultIndex: FlickingOptions[\"defaultIndex\"];\n  private _horizontal: FlickingOptions[\"horizontal\"];\n  private _circular: FlickingOptions[\"circular\"];\n  private _bound: FlickingOptions[\"bound\"];\n  private _adaptive: FlickingOptions[\"adaptive\"];\n  private _needPanelThreshold: FlickingOptions[\"needPanelThreshold\"];\n  private _preventEventsBeforeInit: FlickingOptions[\"preventEventsBeforeInit\"];\n  private _deceleration: FlickingOptions[\"deceleration\"];\n  private _duration: FlickingOptions[\"duration\"];\n  private _easing: FlickingOptions[\"easing\"];\n  private _inputType: FlickingOptions[\"inputType\"];\n  private _moveType: FlickingOptions[\"moveType\"];\n  private _threshold: FlickingOptions[\"threshold\"];\n  private _interruptable: FlickingOptions[\"interruptable\"];\n  private _bounce: FlickingOptions[\"bounce\"];\n  private _iOSEdgeSwipeThreshold: FlickingOptions[\"iOSEdgeSwipeThreshold\"];\n  private _preventClickOnDrag: FlickingOptions[\"preventClickOnDrag\"];\n  private _disableOnInit: FlickingOptions[\"disableOnInit\"];\n  private _renderOnlyVisible: FlickingOptions[\"renderOnlyVisible\"];\n  private _autoResize: FlickingOptions[\"autoResize\"];\n  private _autoInit: FlickingOptions[\"autoInit\"];\n  private _renderExternal: FlickingOptions[\"renderExternal\"];\n\n  // Internal State\n  private _initialized: boolean;\n  private _plugins: Plugin[];\n\n  // Components\n  /**\n   * {@link Control} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Control} 인스턴스\n   * @type {Control}\n   * @default SnapControl\n   * @readonly\n   * @see Control\n   * @see SnapControl\n   * @see FreeControl\n   */\n  public get control() { return this._control; }\n  /**\n   * {@link Camera} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Camera} 인스턴스\n   * @type {Camera}\n   * @default LinearCamera\n   * @readonly\n   * @see Camera\n   * @see LinearCamera\n   * @see BoundCamera\n   * @see CircularCamera\n   */\n  public get camera() { return this._camera; }\n  /**\n   * {@link Renderer} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Renderer} 인스턴스\n   * @type {Renderer}\n   * @default VanillaRenderer\n   * @readonly\n   * @see Renderer\n   * @see VanillaRenderer\n   * @see ExternalRenderer\n   */\n  public get renderer() { return this._renderer; }\n  /**\n   * A component that manages viewport size\n   * @ko 뷰포트 크기 정보를 담당하는 컴포넌트\n   * @type {Viewport}\n   * @readonly\n   * @see Viewport\n   */\n  public get viewport() { return this._viewport; }\n  // Internal States\n  /**\n   * Whether Flicking's {@link Flicking#init init()} is called.\n   * This is `true` when {@link Flicking#init init()} is called, and is `false` after calling {@link Flicking#destroy destroy()}.\n   * @ko Flicking의 {@link Flicking#init init()}이 호출되었는지를 나타내는 멤버 변수.\n   * 이 값은 {@link Flicking#init init()}이 호출되었으면 `true`로 변하고, {@link Flicking#destroy destroy()}호출 이후에 다시 `false`로 변경됩니다.\n   * @type {boolean}\n   * @default false\n   * @readonly\n   */\n  public get initialized() { return this._initialized; }\n  /**\n   * Whether the `circular` option is enabled.\n   * The {@link Flicking#circular circular} option can't be enabled when sum of the panel sizes are too small.\n   * @ko {@link Flicking#circular circular} 옵션이 활성화되었는지 여부를 나타내는 멤버 변수.\n   * {@link Flicking#circular circular} 옵션은 패널의 크기의 합이 충분하지 않을 경우 비활성화됩니다.\n   * @type {boolean}\n   * @default false\n   * @readonly\n   */\n  public get circularEnabled() { return this._camera.controlParams.circular; }\n  /**\n   * Index number of the {@link Flicking#currentPanel currentPanel}\n   * @ko {@link Flicking#currentPanel currentPanel}의 인덱스 번호\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get index() { return this._control.activeIndex; }\n  /**\n   * The root(`.flicking-viewport`) element\n   * @ko root(`.flicking-viewport`) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._viewport.element; }\n  /**\n   * Currently active panel\n   * @ko 현재 선택된 패널\n   * @type {Panel}\n   * @readonly\n   * @see Panel\n   */\n  public get currentPanel() { return this._control.activePanel; }\n  /**\n   * Array of panels\n   * @ko 전체 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get panels() { return this._renderer.panels; }\n  /**\n   * Count of panels\n   * @ko 전체 패널의 개수\n   * @type {number}\n   * @readonly\n   */\n  public get panelCount() { return this._renderer.panelCount; }\n  /**\n   * Array of panels that is visible at the current position\n   * @ko 현재 보이는 패널의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get visiblePanels() { return this._camera.visiblePanels; }\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get animating() { return this._control.animating; }\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get holding() { return this._control.holding; }\n  /**\n   * A current list of activated plugins\n   * @ko 현재 활성화된 플러그인 목록\n   * @type {Plugin[]}\n   * @readonly\n   */\n  public get activePlugins() { return this._plugins; }\n\n  // Options Getter\n  // UI / LAYOUT\n  /**\n   * Align position of the panels within viewport. You can set different values each for the panel and camera\n   * @ko 뷰포트 내에서 패널 정렬방식을 설정하는 옵션. 카메라와 패널 개별로 옵션을 설정할 수도 있습니다\n   * @type {ALIGN | string | number | { panel: string | number, camera: string | number }}\n   * @property {ALIGN | string | number} panel The align value for each {@link Panel}s<ko>개개의 {@link Panel}에 적용할 값</ko>\n   * @property {ALIGN | string | number} camera The align value for {@link Camera}<ko>{@link Camera}에 적용할 값</ko>\n   * @default \"center\"\n   * @example\n   * ```ts\n   * const possibleOptions = [\n   *   // Literal strings\n   *   \"prev\", \"center\", \"next\",\n   *   // % values, applied to both panel & camera\n   *   \"0%\", \"25%\", \"42%\",\n   *   // px values, arithmetic calculation with (+/-) is also allowed.\n   *   \"0px\", \"100px\", \"50% - 25px\",\n   *   // numbers, same to number + px (\"0px\", \"100px\")\n   *   0, 100, 1000,\n   *   // Setting a different value for panel & camera\n   *   { panel: \"10%\", camera: \"25%\" }\n   * ];\n   *\n   * possibleOptions.forEach(align => {\n   *   new Flicking(\"#el\", { align });\n   * });\n   * ```\n   */\n  public get align() { return this._align; }\n  /**\n   * Index of the panel to move when Flicking's {@link Flicking#init init()} is called. A zero-based integer\n   * @ko Flicking의 {@link Flicking#init init()}이 호출될 때 이동할 디폴트 패널의 인덱스로, 0부터 시작하는 정수입니다\n   * @type {number}\n   * @default 0\n   */\n  public get defaultIndex() { return this._defaultIndex; }\n  /**\n   * Direction of panel movement (true: horizontal, false: vertical)\n   * @ko 패널 이동 방향 (true: 가로방향, false: 세로방향)\n   * @type {boolean}\n   * @default true\n   */\n  public get horizontal() { return this._horizontal; }\n  /**\n   * Enables circular(continuous loop) mode, which connects first/last panel for continuous scrolling.\n   * @ko 순환 모드를 활성화합니다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능합니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get circular() { return this._circular; }\n  /**\n   * Prevent the view(camera element) from going out of the first/last panel, so it won't show empty spaces before/after the first/last panel\n   * Only can be enabled when `circular=false`\n   * @ko 뷰(카메라 엘리먼트)가 첫번째와 마지막 패널 밖으로 넘어가지 못하게 하여, 첫번째/마지막 패널 전/후의 빈 공간을 보이지 않도록 하는 옵션입니다\n   * `circular=false`인 경우에만 사용할 수 있습니다\n   * @type {boolean}\n   * @default false\n   */\n  public get bound() { return this._bound; }\n  /**\n   * Update height of the viewport element after movement same to the height of the panel below. This can be only enabled when `horizontal=true`\n   * @ko 이동한 후 뷰포트 엘리먼트의 크기를 현재 패널의 높이와 동일하게 설정합니다. `horizontal=true`인 경우에만 사용할 수 있습니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get adaptive() { return this._adaptive; }\n  // EVENTS\n  /**\n   * A Threshold from viewport edge before triggering `needPanel` event\n   * @ko `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리\n   * @type {number}\n   * @default 0\n   */\n  public get needPanelThreshold() { return this._needPanelThreshold; }\n  /**\n   * When enabled, events are not triggered before `ready` when initializing\n   * @ko 활성화할 경우 초기화시 `ready` 이벤트 이전의 이벤트가 발생하지 않습니다.\n   * @type {boolean}\n   * @default true\n   */\n  public get preventEventsBeforeInit() { return this._preventEventsBeforeInit; }\n  // ANIMATION\n  /**\n   * Deceleration value for panel movement animation which is triggered by user input. A higher value means a shorter animation time\n   * @ko 사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아집니다\n   * @type {number}\n   * @default 0.0075\n   */\n  public get deceleration() { return this._deceleration; }\n  /**\n   * An easing function applied to the panel movement animation. Default value is `easeOutCubic`\n   * @ko 패널 이동 애니메이션에 적용할 easing 함수. 기본값은 `easeOutCubic`이다\n   * @type {function}\n   * @default x => 1 - Math.pow(1 - x, 3)\n   * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n   */\n  public get easing() { return this._easing; }\n  /**\n   * Default duration of the animation (ms)\n   * @ko 디폴트 애니메이션 재생 시간 (ms)\n   * @type {number}\n   * @default 500\n   */\n  public get duration() { return this._duration; }\n  // INPUT\n  /**\n   * Types of input devices to enable\n   * @ko 활성화할 입력 장치 종류\n   * @type {string[]}\n   * @default [\"touch\", \"mouse\"]\n   * @see {@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Possible values (PanInputOption#inputType)}\n   * <ko>{@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 가능한 값들 (PanInputOption#inputType)}</ko>\n   */\n  public get inputType() { return this._inputType; }\n  /**\n   * Movement style by user input. This will change instance type of {@link Flicking#control}\n   * You can use the values of the constant {@link MOVE_TYPE}\n   * @ko 사용자 입력에 의한 이동 방식. 이 값에 따라 {@link Flicking#control}의 인스턴스 타입이 결정됩니다\n   * 상수 {@link MOVE_TYPE}에 정의된 값들을 이용할 수 있습니다\n   * @type {MOVE_TYPE | Pair<string, object>}\n   * @default \"snap\"\n   * @example\n   * |moveType|control|options|\n   * |:---:|:---:|:---:|\n   * |\"snap\"|{@link SnapControl}||\n   * |\"freeScroll\"|{@link FreeControl}|{@link FreeControlOptions}|\n   *\n   * ```ts\n   * import Flicking, { MOVE_TYPE } from \"@egjs/flicking\";\n   *\n   * const flicking = new Flicking({\n   *   moveType: MOVE_TYPE.SNAP\n   * });\n   * ```\n   *\n   * ```ts\n   * const flicking = new Flicking({\n   *   // If you want more specific settings for the moveType\n   *   // [moveType, options for that moveType]\n   *   // In this case, it's [\"freeScroll\", FreeControlOptions]\n   *   moveType: [MOVE_TYPE.FREE_SCROLL, { stopAtEdge: true }]\n   * });\n   * ```\n   */\n  public get moveType() { return this._moveType; }\n  /**\n   * Movement threshold to change panel (unit: px). It should be dragged above the threshold to change the current panel.\n   * @ko 패널 변경을 위한 이동 임계값 (단위: px). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.\n   * @type {number}\n   * @default 40\n   */\n  public get threshold() { return this._threshold; }\n  /**\n   * Set animation to be interruptable by click/touch.\n   * @ko 사용자의 클릭/터치로 인해 애니메이션을 도중에 멈출 수 있도록 설정합니다.\n   * @type {boolean}\n   * @default true\n   */\n  public get interruptable() { return this._interruptable; }\n  /**\n   * The size value of the bounce area. Only can be enabled when `circular=false`.\n   * You can set different bounce value for prev/next direction by using array.\n   * `number` for px value, and `string` for px, and % value relative to viewport size.\n   * You have to call {@link Control#updateInput} after changing this to take effect.\n   * @ko Flicking이 최대 영역을 넘어서 갈 수 있는 최대 크기. `circular=false`인 경우에만 사용할 수 있습니다.\n   * 배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정할 수 있습니다.\n   * `number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있습니다.\n   * 이 값을 변경시 {@link Control#updateInput}를 호출해야 합니다.\n   * @type {string | number | Array<string | number>}\n   * @default \"20%\"\n   * @example\n   * ```ts\n   * const possibleOptions = [\n   *   // % values, relative to viewport element(\".flicking-viewport\")'s size\n   *   \"0%\", \"25%\", \"42%\",\n   *   // px values, arithmetic calculation with (+/-) is also allowed.\n   *   \"0px\", \"100px\", \"50% - 25px\",\n   *   // numbers, same to number + px (\"0px\", \"100px\")\n   *   0, 100, 1000\n   * ];\n   * ```\n   *\n   * @example\n   * ```ts\n   * const flicking = new Flicking(\"#el\", { bounce: \"20%\" });\n   *\n   * flicking.bounce = \"100%\";\n   * flicking.control.updateInput(); // Call this to update!\n   * ```\n   */\n  public get bounce() { return this._bounce; }\n  /**\n   * Size of the area from the right edge in iOS safari (in px) which enables swipe-back or swipe-forward\n   * @ko iOS Safari에서 swipe를 통한 뒤로가기/앞으로가기를 활성화하는 오른쪽 끝으로부터의 영역의 크기 (px)\n   * @type {number}\n   * @default 30\n   */\n  public get iOSEdgeSwipeThreshold() { return this._iOSEdgeSwipeThreshold; }\n  /**\n   * Automatically prevent `click` event if the user has dragged at least a single pixel on the viewport element\n   * @ko 사용자가 뷰포트 영역을 1픽셀이라도 드래그했을 경우 자동으로 {@link https://developer.mozilla.org/ko/docs/Web/API/Element/click_event click} 이벤트를 취소합니다\n   * @type {boolean}\n   * @default true\n   */\n  public get preventClickOnDrag() { return this._preventClickOnDrag; }\n  /**\n   * Automatically call {@link Flicking#disableInput disableInput()} on initialization\n   * @ko Flicking init시에 {@link Flicking#disableInput disableInput()}을 바로 호출합니다\n   * @type {boolean}\n   * @default false\n   */\n  public get disableOnInit() { return this._disableOnInit; }\n  // PERFORMANCE\n  /**\n   * Whether to render visible panels only. This can dramatically increase performance when there're many panels.\n   * @ko 보이는 패널만 렌더링할지 여부를 설정합니다. 패널이 많을 경우에 퍼포먼스를 크게 향상시킬 수 있습니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get renderOnlyVisible() { return this._renderOnlyVisible; }\n  // OTHERS\n  /**\n   * Call {@link Flicking#init init()} automatically when creating Flicking's instance\n   * @ko Flicking 인스턴스를 생성할 때 자동으로 {@link Flicking#init init()}를 호출합니다\n   * @type {boolean}\n   * @default true\n   * @readonly\n   */\n  public get autoInit() { return this._autoInit; }\n  /**\n   * Attach Flicking's {@link Flicking#resize resize} method to window's resize event.\n   * Flicking will automatically call {@link Flicking#resize resize} window size and orientation change.\n   * @ko Flicking의 {@link Flicking#resize resize} 메소드를 window의 resize 이벤트 핸들러로 등록합니다.\n   * 설정시 window 창 크기 및 orientation 변경에 의해 자동으로 {@link Flicking#resize resize}를 호출합니다.\n   * @type {boolean}\n   * @default true\n   */\n  public get autoResize() { return this._autoResize; }\n  /**\n   * This is an option for the frameworks(React, Vue, Angular, ...). Don't set it as it's automatically managed by Flicking.\n   * @ko 프레임워크(React, Vue, Angular, ...)에서만 사용하는 옵션으로, 자동으로 설정되므로 따로 사용하실 필요 없습니다!\n   * @type {boolean}\n   * @default false\n   * @internal\n   * @readonly\n   */\n  public get renderExternal() { return this._renderExternal; }\n\n  // Options Setter\n  // UI / LAYOUT\n  public set align(val: FlickingOptions[\"align\"]) {\n    this._align = val;\n    this._renderer.align = val;\n    this._camera.align = val;\n  }\n\n  public set defaultIndex(val: FlickingOptions[\"defaultIndex\"]) { this._defaultIndex = val; }\n  public set horizontal(val: FlickingOptions[\"horizontal\"]) { this._horizontal = val; }\n  public set circular(val: FlickingOptions[\"circular\"]) { this._circular = val; }\n  public set bound(val: FlickingOptions[\"bound\"]) { this._bound = val; }\n  public set adaptive(val: FlickingOptions[\"adaptive\"]) { this._adaptive = val; }\n  // EVENTS\n  public set needPanelThreshold(val: FlickingOptions[\"needPanelThreshold\"]) { this._needPanelThreshold = val; }\n  public set preventEventsBeforeInit(val: FlickingOptions[\"preventEventsBeforeInit\"]) { this._preventEventsBeforeInit = val; }\n  // ANIMATION\n  public set deceleration(val: FlickingOptions[\"deceleration\"]) { this._deceleration = val; }\n  public set easing(val: FlickingOptions[\"easing\"]) { this._easing = val; }\n  public set duration(val: FlickingOptions[\"duration\"]) { this._duration = val; }\n  // INPUT\n  public set inputType(val: FlickingOptions[\"inputType\"]) { this._inputType = val; }\n  public set moveType(val: FlickingOptions[\"moveType\"]) { this._moveType = val; }\n  public set threshold(val: FlickingOptions[\"threshold\"]) { this._threshold = val; }\n  public set interruptable(val: FlickingOptions[\"interruptable\"]) { this._interruptable = val; }\n  public set bounce(val: FlickingOptions[\"bounce\"]) { this._bounce = val; }\n  public set iOSEdgeSwipeThreshold(val: FlickingOptions[\"iOSEdgeSwipeThreshold\"]) { this._iOSEdgeSwipeThreshold = val; }\n  public set preventClickOnDrag(val: FlickingOptions[\"preventClickOnDrag\"]) {\n    const prevVal = this._preventClickOnDrag;\n\n    if (val === prevVal) return;\n\n    const controller = this._control.controller;\n\n    if (val) {\n      controller.addPreventClickHandler();\n    } else {\n      controller.removePreventClickHandler();\n    }\n\n    this._preventClickOnDrag = val;\n  }\n\n  public set disableOnInit(val: FlickingOptions[\"disableOnInit\"]) { this._disableOnInit = val; }\n  // PERFORMANCE\n  public set renderOnlyVisible(val: FlickingOptions[\"renderOnlyVisible\"]) { this._renderOnlyVisible = val; }\n  // OTHERS\n  public set autoResize(val: FlickingOptions[\"autoResize\"]) { this._autoResize = val; }\n\n  /**\n   * @param root A root HTMLElement to initialize Flicking on it. When it's a typeof `string`, it should be a css selector string\n   * <ko>Flicking을 초기화할 HTMLElement로, `string` 타입으로 지정시 css 선택자 문자열을 지정해야 합니다.</ko>\n   * @param {object} [options={}] An options object for Flicking.<ko>Flicking에 적용할 옵션 오브젝트</ko>\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE WRONG_TYPE}|When the root is not either string or HTMLElement|\n   * |{@link ERROR_CODE ELEMENT_NOT_FOUND}|When the element with given CSS selector does not exist|\n   * <ko>\n   *\n   * |code|조건|\n   * |---|---|\n   * |{@link ERROR_CODE WRONG_TYPE}|루트 엘리먼트가 string이나 HTMLElement가 아닐 경우|\n   * |{@link ERROR_CODE ELEMENT_NOT_FOUND}|주어진 CSS selector로 엘리먼트를 찾지 못했을 경우|\n   *\n   * </ko>\n   * @example\n   * ```ts\n   * import Flicking from \"@egjs/flicking\";\n   *\n   * // Creating new instance of Flicking with HTMLElement\n   * const flicking = new Flicking(document.querySelector(\".flicking-viewport\"), { circular: true });\n   *\n   * // Creating new instance of Flicking with CSS selector\n   * const flicking2 = new Flicking(\".flicking-viewport\", { circular: true });\n   * ```\n   */\n  public constructor(root: HTMLElement | string, {\n    align = ALIGN.CENTER,\n    defaultIndex = 0,\n    horizontal = true,\n    circular = false,\n    bound = false,\n    adaptive = false,\n    needPanelThreshold = 0,\n    preventEventsBeforeInit = true,\n    deceleration = 0.0075,\n    duration = 500,\n    easing = x => 1 - Math.pow(1 - x, 3),\n    inputType = [\"mouse\", \"touch\"],\n    moveType = \"snap\",\n    threshold = 40,\n    interruptable = true,\n    bounce = \"20%\",\n    iOSEdgeSwipeThreshold = 30,\n    preventClickOnDrag = true,\n    disableOnInit = false,\n    renderOnlyVisible = false,\n    autoInit = true,\n    autoResize = true,\n    renderExternal = null\n  }: Partial<FlickingOptions> = {}) {\n    super();\n\n    // Internal states\n    this._initialized = false;\n    this._plugins = [];\n\n    // Bind options\n    this._align = align;\n    this._defaultIndex = defaultIndex;\n    this._horizontal = horizontal;\n    this._circular = circular;\n    this._bound = bound;\n    this._adaptive = adaptive;\n    this._needPanelThreshold = needPanelThreshold;\n    this._preventEventsBeforeInit = preventEventsBeforeInit;\n    this._deceleration = deceleration;\n    this._duration = duration;\n    this._easing = easing;\n    this._inputType = inputType;\n    this._moveType = moveType;\n    this._threshold = threshold;\n    this._interruptable = interruptable;\n    this._bounce = bounce;\n    this._iOSEdgeSwipeThreshold = iOSEdgeSwipeThreshold;\n    this._preventClickOnDrag = preventClickOnDrag;\n    this._disableOnInit = disableOnInit;\n    this._renderOnlyVisible = renderOnlyVisible;\n    this._autoResize = autoResize;\n    this._autoInit = autoInit;\n    this._renderExternal = renderExternal;\n\n    // Create core components\n    this._viewport = new Viewport(getElement(root));\n    this._renderer = this._createRenderer();\n    this._camera = this._createCamera();\n    this._control = this._createControl();\n\n    this.resize = this.resize.bind(this);\n\n    if (this._autoInit) {\n      void this.init();\n    }\n  }\n\n  /**\n   * Initialize Flicking and move to the default index\n   * This is automatically called on Flicking's constructor when `autoInit` is true(default)\n   * @ko Flicking을 초기화하고, 디폴트 인덱스로 이동합니다\n   * 이 메소드는 `autoInit` 옵션이 true(default)일 경우 Flicking이 생성될 때 자동으로 호출됩니다\n   * @fires Flicking#ready\n   * @return {this}\n   */\n  public async init(): Promise<void> {\n    if (this._initialized) return;\n\n    const camera = this._camera;\n    const renderer = this._renderer;\n    const control = this._control;\n    const originalTrigger = this.trigger;\n    const preventEventsBeforeInit = this._preventEventsBeforeInit;\n\n    camera.init(this);\n    renderer.init(this);\n    control.init(this);\n\n    if (preventEventsBeforeInit) {\n      this.trigger = () => this;\n    }\n\n    await this.resize();\n\n    // Look at initial panel\n    await this._moveToInitialPanel();\n\n    if (this._autoResize) {\n      window.addEventListener(\"resize\", this.resize);\n    }\n    if (this._preventClickOnDrag) {\n      control.controller.addPreventClickHandler();\n    }\n    if (this._disableOnInit) {\n      this.disableInput();\n    }\n\n    this._plugins.forEach(plugin => plugin.init(this));\n\n    // Done initializing & emit ready event\n    this._initialized = true;\n    if (preventEventsBeforeInit) {\n      this.trigger = originalTrigger;\n    }\n    this.trigger(new ComponentEvent(EVENTS.READY));\n\n    return;\n  }\n\n  /**\n   * Destroy Flicking and remove all event handlers\n   * @ko Flicking과 하위 컴포넌트들을 초기 상태로 되돌리고, 부착된 모든 이벤트 핸들러를 제거합니다\n   * @return {void}\n   */\n  public destroy(): void {\n    if (!this._initialized) return;\n\n    this.off();\n    window.removeEventListener(\"resize\", this.resize);\n\n    this._control.destroy();\n    this._camera.destroy();\n    this._renderer.destroy();\n\n    this._plugins.forEach(plugin => plugin.destroy());\n\n    this._initialized = false;\n  }\n\n  /**\n   * Move to the previous panel (current index - 1)\n   * @ko 이전 패널로 이동합니다 (현재 인덱스 - 1)\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the panel movement animation (unit: ms)<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the previous panel does not exist|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|이전 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the previous panel<ko>이전 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public prev(duration: number = this._duration): Promise<void> {\n    return this.moveTo(this._control.activePanel?.prev()?.index ?? -1, duration, DIRECTION.PREV);\n  }\n\n  /**\n   * Move to the next panel (current index + 1)\n   * @ko 다음 패널로 이동합니다 (현재 인덱스 + 1)\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the next panel does not exist|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|다음 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the next panel<ko>다음 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public next(duration: number = this._duration) {\n    return this.moveTo(this._control.activePanel?.next()?.index ?? this._renderer.panelCount, duration, DIRECTION.NEXT);\n  }\n\n  /**\n   * Move to the panel with given index\n   * @ko 주어진 인덱스에 해당하는 패널로 이동합니다\n   * @param {number} index The index of the panel to move<ko>이동할 패널의 인덱스</ko>\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {DIRECTION} [direction=DIRECTION.NONE] Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the root is not either string or HTMLElement|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|해당 인덱스를 가진 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public moveTo(index: number, duration: number = this._duration, direction: ValueOf<typeof DIRECTION> = DIRECTION.NONE) {\n    const renderer = this._renderer;\n    const panelCount = renderer.panelCount;\n\n    const panel = renderer.getPanel(index);\n\n    if (!panel) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.INDEX_OUT_OF_RANGE(index, 0, panelCount - 1), ERROR.CODE.INDEX_OUT_OF_RANGE));\n    }\n\n    if (this._control.animating) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.ANIMATION_ALREADY_PLAYING, ERROR.CODE.ANIMATION_ALREADY_PLAYING));\n    }\n\n    return this._control.moveToPanel(panel, {\n      duration,\n      direction\n    });\n  }\n\n  /**\n   * Return the {@link Panel} at the given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.\n   * @return {Panel | null} Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>\n   * @see Panel\n   * @example\n   * ```ts\n   * const panel = flicking.getPanel(0);\n   * // Which is a shorthand to...\n   * const samePanel = flicking.panels[0];\n   * ```\n   */\n  public getPanel(index: number): Panel | null {\n    return this._renderer.getPanel(index);\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @return {this}\n   */\n  public enableInput(): this {\n    this._control.enable();\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @return {this}\n   */\n  public disableInput(): this {\n    this._control.disable();\n    return this;\n  }\n\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to {@link Flicking#setStatus setStatus()}\n   * @ko 현재 상태를 반환합니다. 반환받은 값을 {@link Flicking#setStatus setStatus()} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있습니다\n   * @param {object} options Status retrieving options<ko>Status 반환 옵션</ko>\n   * @param {boolean} [options.index=true] Include current panel index to the returning status. Camera will automatically move to the given index when the {@link Flicking#setStatus setStatus} is called<ko>현재 패널 인덱스를 반환값에 포함시킵니다. {@link Flicking#setStatus setStatus} 호출시 자동으로 해당 인덱스로 카메라를 움직입니다</ko>\n   * @param {boolean} [options.position=true] Include camera position to the returning status. This works only when the {@link Flicking#moveType moveType} is `freeScroll`<ko>카메라의 현재 위치를 반환값에 포함시킵니다. 이 옵션은 {@link Flicking#moveType moveType}이 `freeScroll`일 경우에만 동작합니다</ko>\n   * @param {boolean} [options.includePanelHTML=false] Include panel's `outerHTML` to the returning status<ko>패널의 `outerHTML`을 반환값에 포함시킵니다</ko>\n   * @param {boolean} [options.visiblePanelsOnly=false] Include only {@link Flicking#visiblePanel visiblePanel}'s HTML. This option is available only when the `includePanelHTML` is true\n   * <ko>현재 보이는 패널({@link Flicking#visiblePanel visiblePanel})의 HTML만 반환합니다. `includePanelHTML`이 `true`일 경우에만 동작합니다.</ko>\n   * @return {Partial<Status>} An object with current status value information<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus({\n    index = true,\n    position = true,\n    includePanelHTML = false,\n    visiblePanelsOnly = false\n  }: Partial<{\n    index: boolean;\n    position: boolean;\n    includePanelHTML: boolean;\n    visiblePanelsOnly: boolean;\n  }> = {}): Status {\n    const camera = this._camera;\n    const panels = visiblePanelsOnly ? this.visiblePanels : this.panels;\n\n    const status: Status = {\n      panels: panels.map(panel => {\n        const panelInfo: Status[\"panels\"][0] = { index: panel.index };\n\n        if (includePanelHTML) {\n          panelInfo.html = panel.element.outerHTML;\n        }\n\n        return panelInfo;\n      })\n    };\n\n    if (index) {\n      status.index = this.index;\n    }\n    if (position) {\n      const nearestAnchor = camera.findNearestAnchor(camera.position);\n\n      if (nearestAnchor) {\n        status.position = {\n          panel: nearestAnchor.panel.index,\n          progressInPanel: camera.getProgressInPanel(nearestAnchor.panel)\n        };\n      }\n\n    }\n\n    if (visiblePanelsOnly) {\n      const visiblePanels = this.visiblePanels;\n\n      status.visibleOffset = visiblePanels[0]?.index ?? 0;\n    }\n\n    return status;\n  }\n\n  /**\n   * Restore to the state of the given {@link Status}\n   * @ko 주어진 {@link Status}의 상태로 복원합니다\n   * @param {Partial<Status>} status Status value to be restored. You should use the return value of the {@link Flicking#getStatus getStatus()} method<ko>복원할 상태 값. {@link Flicking#getStatus getStatus()} 메서드의 반환값을 지정하면 됩니다</ko>\n   * @return {void}\n   */\n  public setStatus(status: Status): void {\n    if (!this._initialized) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_INITIALIZED, ERROR.CODE.NOT_INITIALIZED);\n    }\n\n    const {\n      index,\n      position,\n      visibleOffset,\n      panels\n    } = status;\n\n    const renderer = this._renderer;\n    const control = this._control;\n\n    // Can't add/remove panels on external rendering\n    if (panels[0]?.html && !this._renderExternal) {\n      renderer.batchRemove({ index: 0, deleteCount: this.panels.length });\n      renderer.batchInsert({ index: 0, elements: parseElement(panels.map(panel => panel.html!)) });\n    }\n\n    if (index) {\n      const panelIndex = visibleOffset\n        ? index - visibleOffset\n        : index;\n\n      void this.moveTo(panelIndex, 0).catch(() => void 0);\n    }\n\n    if (position && this._moveType === MOVE_TYPE.FREE_SCROLL) {\n      const { panel, progressInPanel } = position;\n      const panelIndex = visibleOffset\n        ? panel - visibleOffset\n        : panel;\n      const panelRange = renderer.panels[panelIndex].range;\n      const newCameraPos = panelRange.min + (panelRange.max - panelRange.min) * progressInPanel;\n\n      void control.moveToPosition(newCameraPos, 0).catch(() => void 0);\n    }\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가합니다\n   * @param {...Plugin} plugins The plugin(s) to add<ko>추가할 플러그인(들)</ko>\n   * @return {this}\n   * @see https://github.com/naver/egjs-flicking-plugins\n   */\n  public addPlugins(...plugins: Plugin[]) {\n    if (this._initialized) {\n      plugins.forEach(item => item.init(this));\n    }\n\n    this._plugins.push(...plugins);\n\n    return this;\n  }\n\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거합니다.\n   * @param {...Plugin} plugin The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {this}\n   * @see https://github.com/naver/egjs-flicking-plugins\n   */\n  public removePlugins(...plugins: Plugin[]) {\n    plugins.forEach(item => {\n      const foundIndex = findIndex(this._plugins, val => val === item);\n\n      if (foundIndex >= 0) {\n        item.destroy();\n        this._plugins.splice(foundIndex, 1);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Update viewport/panel sizes\n   * @ko 패널 및 뷰포트의 크기를 갱신합니다\n   * @method\n   * @fires Flicking#beforeResize\n   * @fires Flicking#afterResize\n   * @return {this}\n   */\n  public async resize(): Promise<void> {\n    const viewport = this._viewport;\n    const renderer = this._renderer;\n    const camera = this._camera;\n    const control = this._control;\n\n    const activePanel = control.activePanel;\n    const prevWidth = viewport.width;\n    const prevHeight = viewport.height;\n    const prevProgressInPanel = activePanel\n      ? camera.getProgressInPanel(activePanel)\n      : 0;\n\n    this.trigger(new ComponentEvent(EVENTS.BEFORE_RESIZE, {\n      width: prevWidth,\n      height: prevHeight,\n      element: viewport.element\n    }));\n\n    viewport.resize();\n    await renderer.forceRenderAllPanels(); // Render all panel elements, to update sizes\n    renderer.updatePanelSize();\n    await renderer.render();\n    camera.updateAlignPos();\n    camera.updateRange();\n    camera.updateAnchors();\n\n    if (control.animating) {\n      // TODO:\n    } else {\n      await control.updatePosition(prevProgressInPanel);\n      control.updateInput();\n    }\n\n    const newWidth = viewport.width;\n    const newHeight = viewport.height;\n    const sizeChanged = newWidth !== prevWidth || newHeight !== prevHeight;\n\n    this.trigger(new ComponentEvent(EVENTS.AFTER_RESIZE, {\n      width: viewport.width,\n      height: viewport.height,\n      prev: {\n        width: prevWidth,\n        height: prevHeight\n      },\n      sizeChanged,\n      element: viewport.element\n    }));\n  }\n\n  /**\n   * Add new panels after the last panel\n   * @ko 패널 목록의 제일 끝에 새로운 패널들을 추가합니다\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of appended panels<ko>추가된 패널들의 배열</ko>\n   * @see Panel\n   * @see ElementLike\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new Flicking(\"#flick\");\n   * // These are possible parameters\n   * flicking.append(document.createElement(\"div\"));\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\");\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public append(element: ElementLike | ElementLike[]): Panel[] {\n    return this.insert(this._renderer.panelCount, element);\n  }\n\n  /**\n   * Add new panels before the first panel\n   * This will increase index of panels after by the number of panels added\n   * @ko 패널 목록의 제일 앞(index 0)에 새로운 패널들을 추가합니다\n   * 추가한 패널의 개수만큼 기존 패널들의 인덱스가 증가합니다.\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   * @see Panel\n   * @see ElementLike\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.prepend(document.createElement(\"div\"));\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\");\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.prepend(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public prepend(element: ElementLike | ElementLike[]): Panel[] {\n    return this.insert(0, element);\n  }\n\n  /**\n   * Insert new panels at given index\n   * This will increase index of panels after by the number of panels added\n   * @ko 주어진 인덱스에 새로운 패널들을 추가합니다\n   * 해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.\n   * @param {number} index Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.insert(0, document.createElement(\"div\"));\n   * flicking.insert(2, \"\\<div\\>Panel\\</div\\>\");\n   * flicking.insert(1, [\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.insert(3, \"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public insert(index: number, element: ElementLike | ElementLike[]): Panel[] {\n    if (this._renderExternal) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_ALLOWED_IN_FRAMEWORK, ERROR.CODE.NOT_ALLOWED_IN_FRAMEWORK);\n    }\n\n    return this._renderer.batchInsert({ index, elements: parseElement(element) });\n  }\n\n  /**\n   * Remove the panel at the given index\n   * This will decrease index of panels after by the number of panels removed\n   * @ko 주어진 인덱스의 패널을 제거합니다\n   * 해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다\n   * @param {number} index Index of panel to remove<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>\n   * @return {Panel[]} An array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    if (this._renderExternal) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_ALLOWED_IN_FRAMEWORK, ERROR.CODE.NOT_ALLOWED_IN_FRAMEWORK);\n    }\n\n    return this._renderer.batchRemove({ index, deleteCount });\n  }\n\n  private _createControl(): Control {\n    const moveType = this._moveType;\n    const moveTypes = Object.keys(MOVE_TYPE).map(key => MOVE_TYPE[key] as ValueOf<typeof MOVE_TYPE>);\n\n    const moveTypeStr = Array.isArray(moveType)\n      ? moveType[0]\n      : moveType;\n\n    const moveTypeOptions = Array.isArray(moveType)\n      ? moveType[1] ?? {}\n      : {};\n\n    if (!includes(moveTypes, moveTypeStr)) {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"moveType\", JSON.stringify(moveType)), ERROR.CODE.WRONG_OPTION);\n    }\n\n    switch (moveTypeStr) {\n      case MOVE_TYPE.SNAP:\n        return new SnapControl(moveTypeOptions as SnapControlOptions);\n      case MOVE_TYPE.FREE_SCROLL:\n        return new FreeControl(moveTypeOptions as FreeControlOptions);\n      case MOVE_TYPE.STRICT:\n        return new StrictControl(moveTypeOptions as StrictControlOptions);\n    }\n  }\n\n  private _createCamera(): Camera {\n    const cameraOption = { align: this._align };\n\n    if (this._circular) {\n      if (this._bound) {\n        // eslint-disable-next-line no-console\n        console.warn(\"\\\"circular\\\" and \\\"bound\\\" option cannot be used together, ignoring bound.\");\n      }\n      return new CircularCamera(cameraOption);\n    } else if (this._bound) {\n      return new BoundCamera(cameraOption);\n    } else {\n      return new LinearCamera(cameraOption);\n    }\n  }\n\n  private _createRenderer(): Renderer {\n    const renderingStrategy = this._renderOnlyVisible\n      ? new VisibleRenderingStrategy()\n      : new RawRenderingStrategy();\n\n    const rendererOptions = {\n      align: this._align,\n      strategy: renderingStrategy\n    };\n\n    const renderExternal = this._renderExternal;\n\n    return renderExternal\n      ? new (renderExternal.renderer as any)({ ...rendererOptions, ...renderExternal.rendererOptions })\n      : new VanillaRenderer(rendererOptions);\n  }\n\n  private async _moveToInitialPanel(): Promise<void> {\n    const renderer = this._renderer;\n    const control = this._control;\n    const initialPanel = renderer.getPanel(this._defaultIndex) || renderer.getPanel(0);\n\n    if (!initialPanel) return;\n\n    return control.moveToPanel(initialPanel, {\n      duration: 0\n    });\n  }\n}\n\nexport default Flicking;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel, { PanelOptions } from \"./Panel\";\n\nexport interface ExternalPanelOptions<T> extends PanelOptions {\n  externalComponent: T;\n}\n\n/**\n * An slide data component that holds information of a single HTMLElement\n * @ko 슬라이드 데이터 컴포넌트로, 단일 HTMLElement의 정보를 갖고 있습니다\n */\nabstract class ExternalPanel<T = any> extends Panel {\n  protected _externalComponent: T;\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {HTMLElement} [options.el] A `HTMLElement` panel's referencing<ko>패널이 참조하는 `HTMLElement`</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor(options: ExternalPanelOptions<T>) {\n    super(options);\n\n    this._externalComponent = options.externalComponent;\n  }\n}\n\nexport default ExternalPanel;\n","import Component from \"@egjs/component\";\n\nimport Flicking from \"../Flicking\";\n\n/**\n * Decorator that makes the method of flicking available in the framework.\n * @ko 프레임워크에서 플리킹의 메소드를 사용할 수 있게 하는 데코레이터.\n * @memberof eg.Flicking\n * @private\n * @example\n * ```js\n * import Flicking, { withFlickingMethods } from \"@egjs/flicking\";\n *\n * class Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>> {\n *   &#64;withFlickingMethods\n *   private flicking: Flicking;\n * }\n * ```\n */\nconst withFlickingMethods = (prototype: any, flickingName: string) => {\n  [Component.prototype, Flicking.prototype].forEach(proto => {\n    Object.getOwnPropertyNames(proto).filter(name => !prototype[name] && !name.startsWith(\"_\") && name !== \"constructor\")\n      .forEach((name: string) => {\n        const descriptor = Object.getOwnPropertyDescriptor(proto, name)!;\n\n        if (descriptor.value) {\n          // Public Function\n          Object.defineProperty(prototype, name, {\n            value: function(...args) {\n              return descriptor.value.call(this[flickingName], ...args);\n            }\n          });\n        } else {\n          const getterDescriptor: { get?: () => any; set?: (val: any) => void } = {};\n          if (descriptor.get) {\n            getterDescriptor.get = function() {\n              return descriptor.get?.call(this[flickingName]);\n            };\n          }\n          if (descriptor.set) {\n            getterDescriptor.set = function(...args) {\n              return descriptor.set?.call(this[flickingName], ...args);\n            };\n          }\n\n          Object.defineProperty(prototype, name, getterDescriptor);\n        }\n      });\n  });\n};\n\nexport default withFlickingMethods;\n","import { DiffResult } from \"@egjs/list-differ\";\n\nimport Flicking from \"../Flicking\";\nimport Renderer from \"../renderer/Renderer\";\n\nexport default (flicking: Flicking, diffResult: DiffResult<any>, rendered: any[]) => {\n  const renderer = flicking.renderer;\n\n  if (diffResult.removed.length > 0) {\n    let startIdx = -1;\n    let prevIdx = -1;\n\n    diffResult.removed.forEach((removedIdx, idx) => {\n      if (startIdx < 0) {\n        startIdx = idx;\n      }\n\n      if (prevIdx >= 0 && removedIdx !== prevIdx + 1) {\n        batchRemove(renderer, diffResult, startIdx, idx + 1);\n\n        startIdx = -1;\n        prevIdx = -1;\n      } else {\n        prevIdx = removedIdx;\n      }\n    });\n\n    if (startIdx >= 0) {\n      batchRemove(renderer, diffResult, startIdx);\n    }\n  }\n\n  diffResult.ordered.forEach(([prevIdx, newIdx]) => {\n    const prevPanel = renderer.panels[prevIdx];\n    const indexDiff = newIdx - prevIdx;\n\n    if (indexDiff > 0) {\n      prevPanel.increaseIndex(indexDiff);\n    } else {\n      prevPanel.decreaseIndex(-indexDiff);\n    }\n    // Update position\n    prevPanel.resize();\n  });\n\n  if (diffResult.added.length > 0) {\n    let startIdx = -1;\n    let prevIdx = -1;\n\n    diffResult.added.forEach((addedIdx, idx) => {\n      if (startIdx < 0) {\n        startIdx = idx;\n      }\n\n      if (prevIdx >= 0 && addedIdx !== prevIdx + 1) {\n        batchInsert(renderer, diffResult, rendered, startIdx, idx + 1);\n\n        startIdx = -1;\n        prevIdx = -1;\n      } else {\n        prevIdx = addedIdx;\n      }\n    });\n\n    if (startIdx >= 0) {\n      batchInsert(renderer, diffResult, rendered, startIdx);\n    }\n  }\n};\n\nconst batchInsert = (renderer: Renderer, diffResult: DiffResult<any>, rendered: any[], startIdx: number, endIdx?: number) => {\n  renderer.batchInsert(\n    ...diffResult.added.slice(startIdx, endIdx).map((index, elIdx) => ({ index, elements: [rendered[elIdx + diffResult.prevList.length]] }))\n  );\n};\n\nconst batchRemove = (renderer: Renderer, diffResult: DiffResult<any>, startIdx: number, endIdx?: number) => {\n  const removed = diffResult.removed.slice(startIdx, endIdx);\n\n  renderer.batchRemove({ index: startIdx, deleteCount: removed.length });\n};\n\n","import { DiffResult } from \"@egjs/list-differ\";\n\nimport Flicking from \"../Flicking\";\n\nexport default <T>(flicking: Flicking, diffResult: DiffResult<T>) => {\n  const removedPanels = diffResult.removed.reduce((map, idx) => {\n    map[idx] = true;\n    return map;\n  }, {});\n\n  return [\n    ...flicking.panels\n      .filter(panel => !removedPanels[panel.index])\n      // Sort panels by position\n      .sort((panel1, panel2) => (panel1.position + panel1.offset) - (panel2.position + panel2.offset))\n      .map(panel => diffResult.prevList[panel.index]),\n    ...diffResult.added.map(idx => diffResult.list[idx])\n  ];\n};\n\n","import { FlickingOptions } from \"../Flicking\";\nimport { ALIGN } from \"../const/external\";\nimport { parseArithmeticExpression } from \"../utils\";\n\nexport default (align: FlickingOptions[\"align\"] = ALIGN.CENTER, horizontal: boolean = true, firstPanelSize?: string) => {\n  const cameraAlign = getCameraAlign(align);\n  const panelAlign = getPanelAlign(align);\n\n  if (panelAlign == null) return \"\";\n\n  const camPosition = `calc(${cameraAlign} - (${firstPanelSize || \"0px\"} * ${panelAlign.percentage}) - ${panelAlign.absolute}px)`;\n\n  return horizontal\n    ? `translate(${camPosition})`\n    : `translate(0, ${camPosition})`;\n};\n\nconst getCameraAlign = (align: FlickingOptions[\"align\"]) => {\n  const alignVal = typeof align === \"object\"\n    ? (align as { camera: string | number }).camera\n    : align;\n\n  return parseAlign(alignVal);\n};\n\nconst getPanelAlign = (align: FlickingOptions[\"align\"]) => {\n  const alignVal = typeof align === \"object\"\n    ? (align as { panel: string | number }).panel\n    : align;\n\n  return parseArithmeticExpression(parseAlign(alignVal));\n};\n\nconst parseAlign = (alignVal: number | string) => {\n  if (typeof alignVal === \"number\") {\n    return `${alignVal}px`;\n  }\n\n  switch (alignVal) {\n    case ALIGN.CENTER:\n      return \"50%\";\n    case ALIGN.NEXT:\n      return \"100%\";\n    case ALIGN.PREV:\n      return \"0%\";\n    default:\n      return alignVal;\n  }\n};\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"./Flicking\";\n\nexport * from \"./exports\";\n\nexport default Flicking;\n"],"names":["__extends","message","code","_super","_this","Object","setPrototypeOf","FlickingError","prototype","name","Error","CODE","WRONG_TYPE","ELEMENT_NOT_FOUND","VAL_MUST_NOT_NULL","NOT_ATTACHED_TO_FLICKING","WRONG_OPTION","INDEX_OUT_OF_RANGE","POSITION_NOT_REACHABLE","TRANSFORM_NOT_SUPPORTED","STOP_CALLED_BY_USER","ANIMATION_INTERRUPTED","ANIMATION_ALREADY_PLAYING","NOT_ALLOWED_IN_FRAMEWORK","NOT_INITIALIZED","NO_ACTIVE","MESSAGE","wrongVal","correctTypes","map","type","join","selector","val","optionName","min","max","position","EVENTS","READY","BEFORE_RESIZE","AFTER_RESIZE","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","WILL_CHANGE","CHANGED","WILL_RESTORE","RESTORED","SELECT","NEED_PANEL","VISIBLE_CHANGE","REACH_EDGE","PANEL_CHANGE","ALIGN","PREV","CENTER","NEXT","DIRECTION","NONE","MOVE_TYPE","SNAP","FREE_SCROLL","STRICT","getElement","el","parent","targetEl","isString","parentEl","document","queryResult","querySelector","ERROR","nodeType","Node","ELEMENT_NODE","checkExistence","value","nameOnErrMsg","clamp","x","Math","getFlickingAttached","nameToThrowOnError","toArray","iterable","slice","call","parseAlign","align","size","alignPoint","parseArithmeticSize","parseBounce","bounce","parsedBounce","Array","isArray","parsedVal","cssValue","base","parsed","parseArithmeticExpression","percentage","absolute","cssRegex","idx","matchResult","exec","sign","unit","parsedValue","parseFloat","signMultiplier","getDirection","start","end","parseElement","element","elements","forEach","tempDiv","createElement","innerHTML","push","children","firstChild","removeChild","getMinusCompensatedIndex","includes","array","target","array_1","__values","circulatePosition","pos","offset","find","checker","array_2","findIndex","length","getProgress","prev","next","getStyle","window","getComputedStyle","currentStyle","isBetween","circulateIndex","index","_el","_width","_height","_padding","left","right","top","bottom","_isBorderBoxSizing","_a","width","height","padding","isBorderBoxSizing","style","newWidth","newHeight","resize","elStyle","clientWidth","clientHeight","paddingLeft","paddingRight","paddingTop","paddingBottom","boxSizing","EVENT","HOLD","CHANGE","RELEASE","ANIMATION_END","FINISH","POSITION_KEY","STATE_TYPE","_delta","prevState","ctx","flicking","axesEvent","transitTo","delta","AXES","camera","prevPosition","newPosition","circularEnabled","range","lookAt","moveEvent","ComponentEvent","isTrusted","holding","direction","trigger","isCanceled","DISABLED","renderer","panelCount","holdStartEvent","HOLDING","controller","control","animatingContext","moveStartEvent","ANIMATING","onChange","State","inputEvent","horizontal","offsetX","offsetY","DRAGGING","flick","setTo","IDLE","_releaseEvent","releaseEvent","srcEvent","clickedElement","touchEvent","touch","changedTouches","elementFromPoint","clientX","clientY","panels","clickedPanel","panels_1","panel","contains","cameraPosition","clickedPanelPosition","_moveToChangedPosition","destPos","duration","moveToPosition","updateInput","stop","nextStateType","nextState","IdleState","HoldingState","DraggingState","AnimatingState","DisabledState","onEnter","_state","eventType","externalCtx","currentState","onHold","onRelease","onAnimationEnd","onFinish","_dragged","e","preventDefault","stopPropagation","_resetInternalValues","_stateMachine","StateMachine","_axes","state","_animatingContext","axes","circular","axis","_panInput","isEnable","get","_flicking","Axes","deceleration","interruptable","easing","PanInput","viewport","inputType","iOSEdgeSwipeThreshold","scale","releaseOnScroll","connect","key","on","fire","removePreventClickHandler","destroy","enable","disable","controlParams","axm","set","cameraEl","_onAxesHold","_onAxesChange","addEventListener","_preventClickWhenDragged","off","removeEventListener","Promise","reject","startPos","animate","resetContext","once","_b","newPos","resolve","animationFinishHandler","interruptionHandler","_controller","AxesController","_activePanel","animating","init","_progressInPanel","activePanel","clampToReachablePosition","update","nearestAnchor","findNearestAnchor","removed","canReach","camPos_1","camRangeDiff","rangeDiff","possiblePositions","filter","reduce","nearestPosition","abs","Infinity","_triggerIndexChangeEvent","_animateToPosition","newActivePanel","triggeringEvent","event","currentPanel","animateTo","animation","_setActive","then","render","catch","err","prevActivePanel","updateAdaptiveHeight","prevIndex","prevPanel","_index","_pos","_panel","_c","count","_count","activeAnchor","findActiveAnchor","anchorAtCamera","snapThreshold","_calcSnapThreshold","posDelta","absPosDelta","snapDelta","targetAnchor","_findSnappedAnchor","threshold","_findAdjacentAnchor","currentPos","clampedPosition","anchorAtPosition","findAnchorIncludePosition","isFinite","anchors","anchorPoints","loopCount","floor","circularIndexOffset","anchorAtPositionIndex","anchor","AnchorPoint","loop","adjacentAnchor","getNextAnchor","getPrevAnchor","isNextDirection","panelSize","alignPos","alignPosition","margin","Control","stopAtEdge","_stopAtEdge","progressInPanel","panelRange","targetPos","targetPanel","_resetIndexRange","cameraRange","currentIndex","prevPanelIndex","nextPanelIndex","nextPanel","prevPos","nextPos","_indexRange","axesRange","indexRange","isOverThreshold","firstAnchor","lastAnchor","shouldBounceToFirst","shouldBounceToLast","transforms","supportedStyle","documentElement","transformName","transforms_1","prefixedTransform","_transform","_align","_position","_alignPos","_offset","_range","_visiblePanels","_anchors","NaN","nearestPanel","panelPos","bounceSize","prevRange","nextRange","nextPosition","viewportEl","firstElementChild","_checkTranslateSupport","_refreshVisiblePanels","_checkNeedPanel","_checkReachEnd","_applyTransform","anchorsIncludingPosition","includePosition","nearest","prevDist","anchorIdx","dist","activeIndex","visibleRange","includeRange","alignVal","adaptive","setSize","unRenderedPanels","rendered","sizeIncludingMargin","_needPanelTriggered","newVisiblePanels","canSee","prevVisiblePanels","added","visiblePanels","needPanelTriggered","cameraSize","needPanelThreshold","cameraPrev","cameraNext","firstPanel","lastPanel","firstPanelPrev","lastPanelNext","wasBetweenRange","isBetweenRange","actualPosition","getPanel","Camera","_circularOffset","_circularEnabled","positionInRange","anchorInRange","visibleInCurrentRange","visibleSize","panelSizeSum","canSetCircularMode","every","updateCircularToggleDirection","_updateCircularOffset","toggled","toggle","some","isToggled","sum","toggledPrev","toggledNext","toggleDirection","_calcPanelAreaSum","viewportSize","panelAreaSize","canSetBoundMode","reachablePanels","shouldPrependBoundAnchor","shouldAppendBoundAnchor","indexOffset_1","newAnchors","splice","nearestPanelAtMin","_findNearestPanel","panelAtMin","panelAtMax","panelIdx","markForShow","_d","strategy","RawRenderingStrategy","_renderingStrategy","_panels","panelAlign","_getPanelAlign","_collectPanels","_i","items","allPanelsInserted","addedPanels","item","insertingIdx","panelsPushed","panelsInserted","_createPanel","insertedSize","_getPanelSizeSum","increaseIndex","increasePosition","_insertPanelElements","_updateCameraAndControl","moveToPanel","updateOffset","allPanelsRemoved","deleteCount","removingIdx","panelsPulled","panelsRemoved","removedSize","decreaseIndex","decreasePosition","_removePanelElements","resetActive","marginDiff","updateRange","updateAnchors","resetNeedPanelHistory","_removed","_resetInternalStates","_size","_margin","_toggled","_toggleDirection","cameraRangeDiff","progress","camPos","disappearPosNext","disappearPosPrev","checkingRange","offsetWidth","offsetHeight","marginLeft","marginRight","marginTop","marginBottom","_updateAlignPos","includeMargin","moveTo","_moveBy","togglePosition","_togglePosition","prevToggled","camRange","camAlignPosition","camVisibleRange","camVisibleSize","minimumVisible","maximumVisible","shouldBeVisibleAtMin","shouldBeVisibleAtMax","options","_rendered","Panel","wasRenderedPanels","parentElement","updateRenderingPanels","renderingPanels","_getRenderingPanelsByOrder","_resetPanelElementOrder","cameraElement","fragment","createDocumentFragment","appendChild","_removeAllChildsFromCamera","childNodes","node","TEXT_NODE","cameraChilds","ElementPanel","nextSibling","nextSiblingElement","insertBefore","reversedPanels","__spreadArray","reverse","nextPanelEl","nextElementSibling","sort","a","b","Renderer","visibleIndexes","visibles","markForHide","root","defaultIndex","_e","_f","_g","bound","_h","_j","_k","preventEventsBeforeInit","_l","_m","_o","pow","_p","_q","moveType","_r","_s","_t","_u","_v","preventClickOnDrag","_w","disableOnInit","_x","renderOnlyVisible","_y","autoInit","_z","autoResize","_0","renderExternal","_initialized","_plugins","_defaultIndex","_horizontal","_circular","_bound","_adaptive","_needPanelThreshold","_preventEventsBeforeInit","_deceleration","_duration","_easing","_inputType","_moveType","_threshold","_interruptable","_bounce","_iOSEdgeSwipeThreshold","_preventClickOnDrag","_disableOnInit","_renderOnlyVisible","_autoResize","_autoInit","_renderExternal","_viewport","Viewport","_renderer","_createRenderer","_camera","_createCamera","_control","_createControl","bind","prevVal","addPreventClickHandler","originalTrigger","_moveToInitialPanel","disableInput","plugin","includePanelHTML","visiblePanelsOnly","status","panelInfo","html","outerHTML","getProgressInPanel","visibleOffset","batchRemove","batchInsert","panelIndex","newCameraPos","plugins","foundIndex","prevWidth","prevHeight","prevProgressInPanel","forceRenderAllPanels","updatePanelSize","updateAlignPos","updatePosition","sizeChanged","insert","moveTypes","keys","moveTypeStr","moveTypeOptions","JSON","stringify","SnapControl","FreeControl","StrictControl","cameraOption","console","warn","CircularCamera","BoundCamera","LinearCamera","renderingStrategy","VisibleRenderingStrategy","rendererOptions","VanillaRenderer","initialPanel","Flicking","Component","_externalComponent","externalComponent","withFlickingMethods","flickingName","proto","getOwnPropertyNames","startsWith","descriptor","getOwnPropertyDescriptor","defineProperty","args","getterDescriptor","diffResult","startIdx_1","prevIdx_1","removedIdx","ordered","__read","prevIdx","newIdx","indexDiff","startIdx_2","prevIdx_2","addedIdx","startIdx","endIdx","elIdx","prevList","removedPanels","panel1","panel2","list","firstPanelSize","cameraAlign","getCameraAlign","getPanelAlign","camPosition"],"mappings":"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"}