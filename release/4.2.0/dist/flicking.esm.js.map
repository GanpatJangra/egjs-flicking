{"version":3,"file":"flicking.esm.js","sources":["../src/core/FlickingError.ts","../src/const/error.ts","../src/const/external.ts","../src/utils.ts","../src/core/Viewport.ts","../src/const/axes.ts","../src/control/states/State.ts","../src/control/states/IdleState.ts","../src/control/states/HoldingState.ts","../src/control/states/DraggingState.ts","../src/control/states/AnimatingState.ts","../src/control/states/DisabledState.ts","../src/control/StateMachine.ts","../src/control/AxesController.ts","../src/control/Control.ts","../src/control/SnapControl.ts","../src/control/FreeControl.ts","../src/control/StrictControl.ts","../src/core/AnchorPoint.ts","../src/camera/Camera.ts","../src/camera/LinearCamera.ts","../src/camera/CircularCamera.ts","../src/camera/BoundCamera.ts","../src/renderer/RenderingStrategy/RawRenderingStrategy.ts","../src/renderer/Renderer.ts","../src/core/panel/Panel.ts","../src/core/panel/ElementPanel.ts","../src/renderer/VanillaRenderer.ts","../src/renderer/ExternalRenderer.ts","../src/renderer/RenderingStrategy/VisibleRenderingStrategy.ts","../src/Flicking.ts","../src/core/panel/ExternalPanel.ts","../src/cfc/withFlickingMethods.ts","../src/cfc/sync.ts","../src/cfc/getRenderingPanels.ts","../src/cfc/getDefaultCameraTransform.ts","../src/index.ts"],"sourcesContent":["/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n/**\n * Special type of known error that {@link Flicking} throws.\n * @ko Flicking 내부에서 알려진 오류 발생시 throw되는 에러\n * @property {number} code Error code<ko>에러 코드</ko>\n * @property {string} message Error message<ko>에러 메시지</ko>\n * @see {@link Constants.ERROR_CODE ERROR_CODE}\n * @example\n * ```ts\n * import Flicking, { FlickingError, ERROR_CODES } from \"@egjs/flicking\";\n * try {\n *   const flicking = new Flicking(\".flicking-viewport\")\n * } catch (e) {\n *   if (e instanceof FlickingError && e.code === ERROR_CODES.ELEMENT_NOT_FOUND) {\n *     console.error(\"Element not found\")\n *   }\n * }\n * ```\n */\nclass FlickingError extends Error {\n  /**\n   * @param message Error message<ko>에러 메시지</ko>\n   * @param code Error code<ko>에러 코드</ko>\n   */\n  public constructor(\n    public message: string,\n    public code: number) {\n    super(message);\n    Object.setPrototypeOf(this, FlickingError.prototype);\n    this.name = \"FlickingError\";\n  }\n}\n\nexport default FlickingError;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\n\n/**\n * Error codes of {@link FlickingError}. Below are the conditions where each error code occurs.\n * @ko {@link FlickingError}의 에러 코드. 아래는 각각의 에러 코드가 발생하는 조건입니다.\n * @name ERROR_CODE\n * @constant\n * @type object\n * @property {number} WRONG_TYPE Parameter type is wrong<ko>패러미터의 타입이 잘못되었을 경우</ko>\n * @property {number} ELEMENT_NOT_FOUND Element is not found inside page with the given CSS selector<ko>주어진 CSS selector로 페이지 내에서 해당 엘리먼트를 찾지 못했을 경우</ko>\n * @property {number} VAL_MUST_NOT_NULL Expected non-null value, but given `null` or `undefined`<ko>값을 기대했으나, `null`이나 `undefined`를 받은 경우</ko>\n * @property {number} NOT_ATTACHED_TO_FLICKING When Flicking's component is not initialized (i.e. {@link Flicking#init} is not called)<ko>Flicking 내부 컴포넌트가 초기화되지 않은 경우 ({@link Flicking#init}이 호출되지 않은 경우)</ko>\n * @property {number} WRONG_OPTION One of the options is wrong<ko>옵션들 중 잘못된 값이 있을 때</ko>\n * @property {number} INDEX_OUT_OF_RANGE When the given index is out of possible range<ko>인덱스가 주어진 범위를 벗어난 경우</ko>\n * @property {number} POSITION_NOT_REACHABLE When {@link Control#moveToPosition}'s position parameter is out of possible range.<ko>{@link Control#moveToPosition}의 `position` 패러미터가 도달 가능한 범위를 벗어난 경우</ko>\n * @property {number} TRANSFORM_NOT_SUPPORTED CSS `transform` property is not available(<=IE8) <ko>CSS `transform` 속성을 사용할 수 없는 경우(<=IE8)</ko>\n * @property {number} STOP_CALLED_BY_USER When the event's `stop()` is called by user.<ko>사용자에 의해 이벤트의 `stop()`이 호출된 경우</ko>\n * @property {number} ANIMATION_INTERRUPTED When the animation is interrupted by user.<ko>사용자에 의해 애니메이션이 중단된 경우</ko>\n * @property {number} ANIMATION_ALREADY_PLAYING When the animation is already playing.<ko>현재 애니메이션이 이미 진행중인 경우</ko>\n * @property {number} NOT_ALLOWED_IN_FRAMEWORK When the non-allowed method is called from frameworks (React, Angular, Vue...)\n * <ko>프레임워크(React, Angular, Vue ...)에서 사용 불가능한 메소드를 호출했을 경우</ko>\n * @property {number} NOT_INITIALIZED When the {@link Flicking#init} is not called before but is needed<ko>{@link Flicking#init}의 호출이 필요하나, 아직 호출되지 않았을 경우</ko>\n * @property {number} NO_ACTIVE When there're no active panel that flicking has selected. This may be due to the absence of any panels<ko>현재 Flicking이 선택한 패널이 없을 경우. 일반적으로 패널이 하나도 없는 경우에 발생할 수 있습니다</ko>\n */\nexport const CODE = {\n  WRONG_TYPE: 0,\n  ELEMENT_NOT_FOUND: 1,\n  VAL_MUST_NOT_NULL: 2,\n  NOT_ATTACHED_TO_FLICKING: 3,\n  WRONG_OPTION: 4,\n  INDEX_OUT_OF_RANGE: 5,\n  POSITION_NOT_REACHABLE: 6,\n  TRANSFORM_NOT_SUPPORTED: 7,\n  STOP_CALLED_BY_USER: 8,\n  ANIMATION_INTERRUPTED: 9,\n  ANIMATION_ALREADY_PLAYING: 10,\n  NOT_ALLOWED_IN_FRAMEWORK: 11,\n  NOT_INITIALIZED: 12,\n  NO_ACTIVE: 13\n} as const;\n\nexport const MESSAGE = {\n  WRONG_TYPE: (wrongVal: any, correctTypes: string[]) => `${wrongVal}(${typeof wrongVal}) is not a ${correctTypes.map(type => `\"${type}\"`).join(\" or \")}.`,\n  ELEMENT_NOT_FOUND: (selector: string) => `Element with selector \"${selector}\" not found.`,\n  VAL_MUST_NOT_NULL: (val: any, name: string) => `${name} should be provided. Given: ${val}`,\n  NOT_ATTACHED_TO_FLICKING: (name: string) => `${name} is not attached to the Flicking instance. \"init()\" should be called first.`,\n  WRONG_OPTION: (optionName: string, val: any) => `Option \"${optionName}\" is not in correct format, given: ${val}`,\n  INDEX_OUT_OF_RANGE: (val: number, min: number, max: number) => `Index \"${val}\" is out of range: should be between ${min} and ${max}.`,\n  POSITION_NOT_REACHABLE: (position: number) => `Position \"${position}\" is not reachable.`,\n  TRANSFORM_NOT_SUPPORTED: \"Browser does not support CSS transform.\",\n  STOP_CALLED_BY_USER: \"Event stop() is called by user.\",\n  ANIMATION_INTERRUPTED: \"Animation is interrupted by user input.\",\n  ANIMATION_ALREADY_PLAYING: \"Animation is already playing.\",\n  NOT_ALLOWED_IN_FRAMEWORK: \"This behavior is not allowed in the frameworks like React, Vue, or Angular.\",\n  NOT_INITIALIZED: \"Flicking is not initialized yet, call init() first.\",\n  NO_ACTIVE: \"There's no active panel that Flicking has selected. This may be due to the absence of any panels.\"\n} as const;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nexport { CODE as ERROR_CODE } from \"./error\";\n\n/**\n * Event type object with event name strings of {@link Flicking}\n * @ko {@link Flicking}의 이벤트 이름 문자열들을 담은 객체\n * @type {object}\n * @property {\"holdStart\"} HOLD_START holdStart event<ko>holdStart 이벤트</ko>\n * @property {\"holdEnd\"} HOLD_END holdEnd event<ko>holdEnd 이벤트</ko>\n * @property {\"moveStart\"} MOVE_START moveStart event<ko>moveStart 이벤트</ko>\n * @property {\"move\"} MOVE move event<ko>move 이벤트</ko>\n * @property {\"moveEnd\"} MOVE_END moveEnd event<ko>moveEnd 이벤트</ko>\n * @property {\"willChange\"} WILL_CHANGE willChange event<ko>willChange 이벤트</ko>\n * @property {\"changed\"} CHANGED changed event<ko>changed 이벤트</ko>\n * @property {\"willRestore\"} WILL_RESTORE willRestore event<ko>willRestore 이벤트</ko>\n * @property {\"restored\"} RESTORED restored event<ko>restored 이벤트</ko>\n * @property {\"select\"} SELECT select event<ko>select 이벤트</ko>\n * @property {\"needPanel\"} NEED_PANEL needPanel event<ko>needPanel 이벤트</ko>\n * @property {\"panelChange\"} PANEL_CHANGE panelChange event<ko>panelChange 이벤트</ko>\n * @example\n * ```ts\n * import { EVENTS } from \"@egjs/flicking\";\n * EVENTS.MOVE_START; // \"moveStart\"\n * ```\n */\nexport const EVENTS = {\n  READY: \"ready\",\n  BEFORE_RESIZE: \"beforeResize\",\n  AFTER_RESIZE: \"afterResize\",\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  WILL_CHANGE: \"willChange\",\n  CHANGED: \"changed\",\n  WILL_RESTORE: \"willRestore\",\n  RESTORED: \"restored\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n  VISIBLE_CHANGE: \"visibleChange\",\n  REACH_EDGE: \"reachEdge\",\n  PANEL_CHANGE: \"panelChange\"\n} as const;\n\n/**\n * An object with all possible predefined literal string for the {@link Flicking#align align} option\n * @ko {@link Flicking#align align} 옵션에 사용되는 미리 정의된 리터럴 상수들을 담고 있는 객체\n * @type {object}\n * @property {\"prev\"} PREV left/top align<ko>좌/상 정렬</ko>\n * @property {\"center\"} CENTER center align<ko>중앙 정렬</ko>\n * @property {\"next\"} NEXT right/bottom align<ko>우/하 정렬</ko>\n */\nexport const ALIGN = {\n  PREV: \"prev\",\n  CENTER: \"center\",\n  NEXT: \"next\"\n} as const;\n\n/**\n * An object of directions\n * @ko 방향을 나타내는 값들을 담고 있는 객체\n * @type {object}\n * @property {\"PREV\"} PREV \"left\" when {@link Flicking#horizontal horizontal} is true, and \"top\" when {@link Flicking#horizontal horizontal} is false\n * <ko>{@link Flicking#horizontal horizontal}가 `true`일 경우 왼쪽, {@link Flicking#horizontal horizontal}가 `false`일 경우 위쪽을 의미합니다</ko>\n * @property {\"NEXT\"} NEXT \"right\" when {@link Flicking#horizontal horizontal} is true, and \"bottom\" when {@link Flicking#horizontal horizontal} is false\n * <ko>{@link Flicking#horizontal horizontal}가 `true`일 경우 오른쪽, {@link Flicking#horizontal horizontal}가 `false`일 경우 아래쪽을 의미합니다</ko>\n * @property {null} NONE This value usually means it's the same position<ko>주로 제자리인 경우를 의미합니다</ko>\n */\nexport const DIRECTION = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n  NONE: null\n} as const;\n\n/**\n * An object with all possible {@link Flicking#moveType moveType}s\n * @ko Flicking이 제공하는 {@link Flicking#moveType moveType}들을 담고 있는 객체\n * @type {object}\n * @property {\"snap\"} SNAP Flicking's {@link Flicking#moveType moveType} that enables {@link SnapControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link SnapControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n * @property {\"freeScroll\"} FREE_SCROLL Flicking's {@link Flicking#moveType moveType} that enables {@link FreeControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link FreeControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n * @property {\"strict\"} STRICT Flicking's {@link Flicking#moveType moveType} that enables {@link StrictControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link StrictControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n */\nexport const MOVE_TYPE = {\n  SNAP: \"snap\",\n  FREE_SCROLL: \"freeScroll\",\n  STRICT: \"strict\"\n} as const;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking, { FlickingOptions } from \"./Flicking\";\nimport FlickingError from \"./core/FlickingError\";\nimport * as ERROR from \"./const/error\";\nimport { ALIGN, DIRECTION } from \"./const/external\";\nimport { LiteralUnion, Merged, ValueOf } from \"./type/internal\";\nimport { ElementLike } from \"./type/external\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const merge = <From extends object, To extends object>(target: From, ...sources: To[]): Merged<From, To> => {\n  sources.forEach(source => {\n    Object.keys(source).forEach(key => {\n      target[key] = source[key] as unknown;\n    });\n  });\n\n  return target as Merged<From, To>;\n};\n\nexport const getElement = (el: HTMLElement | string | null, parent?: HTMLElement): HTMLElement => {\n  let targetEl: HTMLElement | null = null;\n\n  if (isString(el)) {\n    const parentEl = parent ? parent : document;\n    const queryResult = parentEl.querySelector(el);\n    if (!queryResult) {\n      throw new FlickingError(ERROR.MESSAGE.ELEMENT_NOT_FOUND(el), ERROR.CODE.ELEMENT_NOT_FOUND);\n    }\n    targetEl = queryResult as HTMLElement;\n  } else if (el && el.nodeType === Node.ELEMENT_NODE) {\n    targetEl = el;\n  }\n\n  if (!targetEl) {\n    throw new FlickingError(ERROR.MESSAGE.WRONG_TYPE(el, [\"HTMLElement\", \"string\"]), ERROR.CODE.WRONG_TYPE);\n  }\n\n  return targetEl;\n};\n\nexport const checkExistence = (value: any, nameOnErrMsg: string) => {\n  if (value == null) {\n    throw new FlickingError(ERROR.MESSAGE.VAL_MUST_NOT_NULL(value, nameOnErrMsg), ERROR.CODE.VAL_MUST_NOT_NULL);\n  }\n};\n\nexport const clamp = (x: number, min: number, max: number) => Math.max(Math.min(x, max), min);\n\nexport const getFlickingAttached = (val: Flicking | null, nameToThrowOnError: string): Flicking => {\n  if (!val) {\n    throw new FlickingError(ERROR.MESSAGE.NOT_ATTACHED_TO_FLICKING(nameToThrowOnError), ERROR.CODE.NOT_ATTACHED_TO_FLICKING);\n  }\n\n  return val;\n};\n\nexport const toArray = <T>(iterable: ArrayLike<T>): T[] => [].slice.call(iterable) as T[];\n\nexport const parseAlign = (align: LiteralUnion<ValueOf<typeof ALIGN>> | number, size: number): number => {\n  let alignPoint: number | null;\n  if (isString(align)) {\n    switch (align) {\n      case ALIGN.PREV:\n        alignPoint = 0;\n        break;\n      case ALIGN.CENTER:\n        alignPoint = 0.5 * size;\n        break;\n      case ALIGN.NEXT:\n        alignPoint = size;\n        break;\n      default:\n        alignPoint = parseArithmeticSize(align, size);\n        if (alignPoint == null) {\n          throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"align\", align), ERROR.CODE.WRONG_OPTION);\n        }\n    }\n  } else {\n    alignPoint = align as number;\n  }\n\n  return alignPoint;\n};\n\nexport const parseBounce = (bounce: FlickingOptions[\"bounce\"], size: number): number[] => {\n  let parsedBounce: Array<number | null>;\n\n  if (Array.isArray(bounce)) {\n    parsedBounce = (bounce as string[]).map(val => parseArithmeticSize(val, size));\n  } else {\n    const parsedVal = parseArithmeticSize(bounce, size);\n\n    parsedBounce = [parsedVal, parsedVal];\n  }\n\n  return parsedBounce.map(val => {\n    if (val == null) {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"bounce\", bounce), ERROR.CODE.WRONG_OPTION);\n    }\n    return val;\n  });\n};\n\nexport const parseArithmeticSize = (cssValue: number | string, base: number): number | null => {\n  const parsed = parseArithmeticExpression(cssValue);\n\n  if (parsed == null) return null;\n\n  return parsed.percentage * base + parsed.absolute;\n};\n\nexport const parseArithmeticExpression = (cssValue: number | string): { percentage: number; absolute: number } | null => {\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return { percentage: 0, absolute: cssValue };\n  }\n\n  const parsed = {\n    percentage: 0,\n    absolute: 0\n  };\n  let idx = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n    const parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return null;\n    }\n\n    const signMultiplier = sign === \"+\" ? 1 : -1;\n\n    if (unit === \"%\") {\n      parsed.percentage += signMultiplier * (parsedValue / 100);\n    } else {\n      parsed.absolute += signMultiplier * parsedValue;\n    }\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return null;\n  }\n\n  return parsed;\n};\n\nexport const parseCSSSizeValue = (val: string | number): string => isString(val) ? val : `${val}px`;\n\nexport const getDirection = (start: number, end: number): ValueOf<typeof DIRECTION> => {\n  if (start === end) return DIRECTION.NONE;\n  return start < end ? DIRECTION.NEXT : DIRECTION.PREV;\n};\n\nexport const parseElement = (element: ElementLike | ElementLike[]): HTMLElement[] => {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n      while (tempDiv.firstChild) {\n        tempDiv.removeChild(tempDiv.firstChild);\n      }\n    } else if (el && el.nodeType === Node.ELEMENT_NODE) {\n      elements.push(el);\n    } else {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_TYPE(el, [\"HTMLElement\", \"string\"]), ERROR.CODE.WRONG_TYPE);\n    }\n  });\n\n  return elements;\n};\n\nexport const getMinusCompensatedIndex = (idx: number, max: number) => idx < 0 ? clamp(idx + max, 0, max) : clamp(idx, 0, max);\n\nexport const includes = <T>(array: T[], target: any): target is T => {\n  for (const val of array) {\n    if (val === target) return true;\n  }\n  return false;\n};\n\nexport const isString = (val: any): val is string => typeof val === \"string\";\n\nexport const circulatePosition = (pos: number, min: number, max: number) => {\n  const size = max - min;\n\n  if (pos < min) {\n    const offset = (min - pos) % size;\n    pos = max - offset;\n  } else if (pos > max) {\n    const offset = (pos - max) % size;\n    pos = min + offset;\n  }\n\n  return pos;\n};\n\nexport const find = <T>(array: T[], checker: (val: T) => boolean): T | null => {\n  for (const val of array) {\n    if (checker(val)) {\n      return val;\n    }\n  }\n\n  return null;\n};\n\nexport const findRight = <T>(array: T[], checker: (val: T) => boolean): T | null => {\n  for (let idx = array.length - 1; idx >= 0; idx--) {\n    const val = array[idx];\n    if (checker(val)) {\n      return val;\n    }\n  }\n\n  return null;\n};\n\nexport const findIndex = <T>(array: T[], checker: (val: T) => boolean): number => {\n  for (let idx = 0; idx < array.length; idx++) {\n    if (checker(array[idx])) {\n      return idx;\n    }\n  }\n\n  return -1;\n};\n\nexport const getProgress = (pos: number, prev: number, next: number) => (pos - prev) / (next - prev);\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nexport const getStyle = (el: HTMLElement): CSSStyleDeclaration => window.getComputedStyle(el) || (el as any).currentStyle as CSSStyleDeclaration;\n\nexport const isBetween = (val: number, min: number, max: number) => val >= min && val <= max;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getStyle, isString } from \"../utils\";\n\n/**\n * A component that manages viewport size\n * @ko 뷰포트 크기 정보를 담당하는 컴포넌트\n */\nclass Viewport {\n  private _el: HTMLElement;\n  private _width: number;\n  private _height: number;\n  private _isBorderBoxSizing: boolean;\n  private _padding: {\n    left: number;\n    right: number;\n    top: number;\n    bottom: number;\n  };\n\n  /**\n   * A viewport(root) element\n   * @ko 뷰포트(root) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n\n  /**\n   * Viewport width, without paddings\n   * @ko 뷰포트 너비\n   * @type {number}\n   * @readonly\n   */\n  public get width() { return this._width - this._padding.left - this._padding.right; }\n  /**\n   * Viewport height, without paddings\n   * @ko 뷰포트 높이\n   * @type {number}\n   * @readonly\n   */\n  public get height() { return this._height - this._padding.top - this._padding.bottom; }\n  /**\n   * Viewport paddings\n   * @ko 뷰포트 CSS padding 값\n   * @type {object}\n   * @property {number} left CSS `padding-left`\n   * @property {number} right CSS `padding-right`\n   * @property {number} top CSS `padding-top`\n   * @property {number} bottom CSS `padding-bottom`\n   * @readonly\n   */\n  public get padding() { return this._padding; }\n\n  /**\n   * @param el A viewport element<ko>뷰포트 엘리먼트</ko>\n   */\n  public constructor(el: HTMLElement) {\n    this._el = el;\n    this._width = 0;\n    this._height = 0;\n    this._padding = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this._isBorderBoxSizing = false;\n  }\n\n  /**\n   * Change viewport's size.\n   * This will change the actual size of `.flicking-viewport` element by changing its CSS width/height property\n   * @ko 뷰포트 크기를 변경합니다.\n   * `.flicking-viewport` 엘리먼트에 해당 크기의 CSS width/height를 적용합니다\n   * @param {object} [size] New viewport size<ko>새 뷰포트 크기</ko>\n   * @param {number|string} [size.width] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   * @param {number|string} [size.height] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   */\n  public setSize({\n    width,\n    height\n  }: Partial<{\n    width: number | string;\n    height: number | string;\n  }>) {\n    const el = this._el;\n    const padding = this._padding;\n    const isBorderBoxSizing = this._isBorderBoxSizing;\n\n    if (width != null) {\n      if (isString(width)) {\n        el.style.width = width;\n      } else {\n        const newWidth = isBorderBoxSizing\n          ? width + padding.left + padding.right\n          : width;\n        el.style.width = `${newWidth}px`;\n      }\n    }\n    if (height != null) {\n      if (isString(height)) {\n        el.style.height = height;\n      } else {\n        const newHeight = isBorderBoxSizing\n          ? height + padding.top + padding.bottom\n          : height;\n        el.style.height = `${newHeight}px`;\n      }\n    }\n    this.resize();\n  }\n\n  /**\n   * Update width/height to the current viewport element's size\n   * @ko 현재 뷰포트 엘리먼트의 크기로 너비/높이를 업데이트합니다\n   */\n  public resize() {\n    const el = this._el;\n    const elStyle = getStyle(el);\n\n    this._width = el.clientWidth;\n    this._height = el.clientHeight;\n    this._padding = {\n      left: parseFloat(elStyle.paddingLeft),\n      right: parseFloat(elStyle.paddingRight),\n      top: parseFloat(elStyle.paddingTop),\n      bottom: parseFloat(elStyle.paddingBottom)\n    };\n    this._isBorderBoxSizing = elStyle.boxSizing === \"border-box\";\n  }\n}\n\nexport default Viewport;\n","/**\n * All possible @egjs/axes event keys\n * @internal\n */\nexport const EVENT = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\"\n} as const;\n\n/**\n * An Axis key that Flicking uses\n * @internal\n */\nexport const POSITION_KEY = \"flick\";\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OnAnimationEnd, OnChange, OnFinish, OnHold, OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking from \"../../Flicking\";\nimport { EVENTS } from \"../../const/external\";\nimport * as AXES from \"../../const/axes\";\nimport { circulatePosition, getDirection } from \"../../utils\";\n\nexport enum STATE_TYPE {\n  IDLE,\n  HOLDING,\n  DRAGGING,\n  ANIMATING,\n  DISABLED\n}\n\n/**\n * A component that shows the current status of the user input or the animation\n * @ko 현재 사용자 입력 또는 애니메이션 상태를 나타내는 컴포넌트\n * @internal\n */\nabstract class State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract readonly holding: boolean;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract readonly animating: boolean;\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onHold(ctx: {\n    flicking: Flicking;\n    axesEvent: OnHold;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onChange(ctx: {\n    flicking: Flicking;\n    axesEvent: OnChange;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onRelease(ctx: {\n    flicking: Flicking;\n    axesEvent: OnRelease;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onAnimationEnd(ctx: {\n    flicking: Flicking;\n    axesEvent: OnAnimationEnd;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event of Axes<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onFinish(ctx: {\n    flicking: Flicking;\n    axesEvent: OnFinish;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  protected _moveToChangedPosition(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    if (!axesEvent.delta[AXES.POSITION_KEY]) {\n      return;\n    }\n\n    const camera = flicking.camera;\n    const prevPosition = camera.position;\n    const position = axesEvent.pos[AXES.POSITION_KEY];\n    const newPosition = flicking.circularEnabled\n      ? circulatePosition(position, camera.range.min, camera.range.max)\n      : position;\n\n    void camera.lookAt(newPosition);\n\n    const moveEvent = new ComponentEvent(EVENTS.MOVE, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(0, axesEvent.delta[AXES.POSITION_KEY]),\n      axesEvent\n    });\n\n    flicking.trigger(moveEvent);\n\n    if (moveEvent.isCanceled()) {\n      // Return to previous position\n      void camera.lookAt(prevPosition);\n      transitTo(STATE_TYPE.DISABLED);\n    }\n  }\n}\n\nexport default State;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A default state when there's no user input and no animation's playing\n * @ko 사용자의 입력이 없고, 애니메이션이 동작하고있지 않은 기본 상태\n * @internal\n */\nclass IdleState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly animating = false;\n\n  public onHold(ctx: Parameters<State[\"onHold\"]>[0]): void {\n    // Shouldn't do any action until any panels on flicking area\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    if (flicking.renderer.panelCount <= 0) {\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    const holdStartEvent = new ComponentEvent(EVENTS.HOLD_START, {\n      axesEvent\n    });\n\n    flicking.trigger(holdStartEvent);\n\n    if (holdStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      transitTo(STATE_TYPE.HOLDING);\n    }\n  }\n\n  // By methods call\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n    const controller = flicking.control.controller;\n    const animatingContext = controller.animatingContext;\n\n    const moveStartEvent = new ComponentEvent(EVENTS.MOVE_START, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(animatingContext.start, animatingContext.end),\n      axesEvent\n    });\n    flicking.trigger(moveStartEvent);\n\n    if (moveStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n      transitTo(STATE_TYPE.ANIMATING).onChange(ctx);\n    }\n  }\n}\n\nexport default IdleState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Panel from \"../../core/panel/Panel\";\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when user's holding the Flicking area, but not moved a single pixel yet\n * @ko 사용자의 입력이 시작되었으나, 아직 움직이지는 않은 상태\n * @internal\n */\nclass HoldingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly holding = true;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly animating = false;\n\n  private _releaseEvent: OnRelease | null = null;\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    const inputEvent = axesEvent.inputEvent as { offsetX: number; offsetY: number };\n\n    const offset = flicking.horizontal\n      ? inputEvent.offsetX\n      : inputEvent.offsetY;\n\n    const moveStartEvent = new ComponentEvent(EVENTS.MOVE_START, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(0, -offset),\n      axesEvent\n    });\n    flicking.trigger(moveStartEvent);\n\n    if (moveStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n      transitTo(STATE_TYPE.DRAGGING).onChange(ctx);\n    }\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    flicking.trigger(new ComponentEvent(EVENTS.HOLD_END, { axesEvent }));\n\n    if (axesEvent.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      axesEvent.setTo({ flick: flicking.camera.position }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't handle select event here,\n    // As \"finish\" axes event happens\n    this._releaseEvent = axesEvent;\n  }\n\n  public onFinish(ctx: Parameters<State[\"onFinish\"]>[0]): void {\n    const { flicking, transitTo } = ctx;\n\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this._releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this._releaseEvent;\n\n    // Static click\n    /* eslint-disable @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access */\n    const srcEvent = releaseEvent.inputEvent.srcEvent;\n\n    let clickedElement: HTMLElement;\n    if (srcEvent.type === \"touchend\") {\n      const touchEvent = srcEvent as TouchEvent;\n      const touch = touchEvent.changedTouches[0];\n      clickedElement = document.elementFromPoint(touch.clientX, touch.clientY) as HTMLElement;\n    } else {\n      clickedElement = srcEvent.target;\n    }\n    /* eslint-enable */\n\n    const panels = flicking.renderer.panels;\n    let clickedPanel: Panel | null = null;\n\n    for (const panel of panels) {\n      if (panel.contains(clickedElement)) {\n        clickedPanel = panel;\n        break;\n      }\n    }\n\n    if (clickedPanel) {\n      const cameraPosition = flicking.camera.position;\n      const clickedPanelPosition = clickedPanel.position;\n\n      flicking.trigger(new ComponentEvent(EVENTS.SELECT, {\n        index: clickedPanel.index,\n        panel: clickedPanel,\n        // Direction to the clicked panel\n        direction: getDirection(cameraPosition, clickedPanelPosition)\n      }));\n    }\n  }\n}\n\nexport default HoldingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport * as AXES from \"../../const/axes\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when user's dragging the Flicking area\n * @ko 사용자가 드래깅중인 상태\n * @internal\n */\nclass DraggingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly holding = true;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    this._moveToChangedPosition(ctx);\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n    flicking.trigger(new ComponentEvent(EVENTS.HOLD_END, {\n      axesEvent\n    }));\n\n    if (flicking.renderer.panelCount <= 0) {\n      // There're no panels\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    transitTo(STATE_TYPE.ANIMATING);\n\n    const control = flicking.control;\n    const position = axesEvent.destPos[AXES.POSITION_KEY];\n    const duration = Math.max(axesEvent.duration, flicking.duration);\n\n    void control.moveToPosition(position, duration, axesEvent);\n  }\n}\n\nexport default DraggingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when Flicking's animating by user input or method call\n * @ko 사용자 입력이나 메소드 호출에 의해 Flicking의 애니메이션이 동작중인 상태\n * @internal\n */\nclass AnimatingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onHold(ctx: Parameters<State[\"onHold\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    flicking.control.updateInput();\n    const holdStartEvent = new ComponentEvent(EVENTS.HOLD_START, { axesEvent });\n    flicking.trigger(holdStartEvent);\n\n    if (holdStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      transitTo(STATE_TYPE.DRAGGING);\n    }\n  }\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    this._moveToChangedPosition(ctx);\n  }\n\n  public onFinish(ctx: Parameters<State[\"onFinish\"]>[0]) {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    transitTo(STATE_TYPE.IDLE);\n\n    const controller = flicking.control.controller;\n    const animatingContext = controller.animatingContext;\n\n    flicking.trigger(new ComponentEvent(EVENTS.MOVE_END, {\n      isTrusted: axesEvent.isTrusted,\n      direction: getDirection(animatingContext.start, animatingContext.end),\n      axesEvent\n    }));\n  }\n}\n\nexport default AnimatingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when Flicking is stopped by event's `stop` method\n * @ko 이벤트의 `stop`호출에 의해 Flicking이 정지된 상태\n * @internal\n */\nclass DisabledState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onAnimationEnd(ctx: Parameters<State[\"onAnimationEnd\"]>[0]): void {\n    const { transitTo } = ctx;\n\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { axesEvent, transitTo } = ctx;\n\n    // Can stop Axes's change event\n    axesEvent.stop();\n\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { axesEvent, transitTo } = ctx;\n\n    // This is needed when stopped hold start event\n    if (axesEvent.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { AxesEvents } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport * as AXES from \"../const/axes\";\n\nimport IdleState from \"./states/IdleState\";\nimport HoldingState from \"./states/HoldingState\";\nimport DraggingState from \"./states/DraggingState\";\nimport AnimatingState from \"./states/AnimatingState\";\nimport DisabledState from \"./states/DisabledState\";\nimport State, { STATE_TYPE } from \"./states/State\";\n\n/**\n * @internal\n */\nclass StateMachine {\n  private _state: State;\n\n  public get state(): State { return this._state; }\n\n  public constructor() {\n    this._state = new IdleState();\n  }\n\n  public fire(eventType: keyof AxesEvents, externalCtx: {\n    flicking: Flicking;\n    axesEvent: any;\n  }) {\n    const currentState = this._state;\n    const ctx = { ...externalCtx, transitTo: this.transitTo };\n\n    switch (eventType) {\n      case AXES.EVENT.HOLD:\n        currentState.onHold(ctx);\n        break;\n      case AXES.EVENT.CHANGE:\n        currentState.onChange(ctx);\n        break;\n      case AXES.EVENT.RELEASE:\n        currentState.onRelease(ctx);\n        break;\n      case AXES.EVENT.ANIMATION_END:\n        currentState.onAnimationEnd(ctx);\n        break;\n      case AXES.EVENT.FINISH:\n        currentState.onFinish(ctx);\n        break;\n    }\n  }\n\n  public transitTo = (nextStateType: STATE_TYPE): State => {\n    let nextState: State;\n\n    switch (nextStateType) {\n      case STATE_TYPE.IDLE:\n        nextState = new IdleState();\n        break;\n      case STATE_TYPE.HOLDING:\n        nextState = new HoldingState();\n        break;\n      case STATE_TYPE.DRAGGING:\n        nextState = new DraggingState();\n        break;\n      case STATE_TYPE.ANIMATING:\n        nextState = new AnimatingState();\n        break;\n      case STATE_TYPE.DISABLED:\n        nextState = new DisabledState();\n        break;\n    }\n\n    this._state = nextState;\n\n    return this._state;\n  };\n}\n\nexport default StateMachine;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Axes, { PanInput, AxesEvents, OnRelease } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport * as AXES from \"../const/axes\";\nimport * as ERROR from \"../const/error\";\nimport { getFlickingAttached, parseBounce } from \"../utils\";\nimport { ControlParams } from \"../type/external\";\n\nimport StateMachine from \"./StateMachine\";\n\n/**\n * A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events\n * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트\n * @internal\n */\nclass AxesController {\n  private _flicking: Flicking | null;\n  private _axes: Axes | null;\n  private _panInput: PanInput | null;\n  private _stateMachine: StateMachine;\n\n  private _animatingContext: { start: number; end: number; offset: number };\n  private _dragged: boolean;\n\n  /**\n   * An {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes}의 인스턴스\n   * @type {Axes}\n   * @see https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html\n   * @readonly\n   */\n  public get axes() { return this._axes; }\n  /**\n   * A activated {@link State} that shows the current status of the user input or the animation\n   * @ko 현재 활성화된 {@link State} 인스턴스로 사용자 입력 또는 애니메이션 상태를 나타냅니다\n   * @type {State}\n   */\n  public get state() { return this._stateMachine.state; }\n  /**\n   * A context of the current animation playing\n   * @ko 현재 재생중인 애니메이션 정보\n   * @type {object}\n   * @property {number} start A start position of the animation<ko>애니메이션 시작 지점</ko>\n   * @property {number} end A end position of the animation<ko>애니메이션 끝 지점</ko>\n   * @property {number} offset camera offset<ko>카메라 오프셋</ko>\n   * @readonly\n   */\n  public get animatingContext() { return this._animatingContext; }\n  /**\n   * A current control parameters of the Axes instance\n   * @ko 활성화된 현재 Axes 패러미터들\n   * @type {ControlParams}\n   */\n  public get controlParams(): ControlParams {\n    const axes = this._axes;\n\n    if (!axes) {\n      return {\n        range: { min: 0, max: 0 },\n        position: 0,\n        circular: false\n      };\n    }\n\n    const axis = axes.axis[AXES.POSITION_KEY];\n\n    return {\n      range: { min: axis.range![0], max: axis.range![1] },\n      circular: (axis.circular as boolean[])[0],\n      position: this.position\n    };\n  }\n\n  /**\n   * A Boolean indicating whether the user input is enabled\n   * @ko 현재 사용자 입력이 활성화되었는지를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get enabled() { return this._panInput?.isEnable() ?? false; }\n  /**\n   * Current position value in {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} 인스턴스 내부의 현재 좌표 값\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._axes?.get([AXES.POSITION_KEY])[AXES.POSITION_KEY] ?? 0; }\n  /**\n   * Current range value in {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} 인스턴스 내부의 현재 이동 범위 값\n   * @type {number[]}\n   * @readonly\n   */\n  public get range() { return this._axes?.axis[AXES.POSITION_KEY].range ?? [0, 0]; }\n  /**\n   * Actual bounce size(px)\n   * @ko 적용된 bounce 크기(px 단위)\n   * @type {number[]}\n   * @readonly\n   */\n  public get bounce() { return this._axes?.axis[AXES.POSITION_KEY].bounce as number[] | undefined; }\n\n  /** */\n  public constructor() {\n    this._resetInternalValues();\n    this._stateMachine = new StateMachine();\n  }\n\n  /**\n   * Initialize AxesController\n   * @ko AxesController를 초기화합니다\n   * @param {Flicking} flicking An instance of Flicking\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n\n    this._axes = new Axes({\n      [AXES.POSITION_KEY]: {\n        range: [0, 0],\n        circular: false,\n        bounce: [0, 0]\n      }\n    }, {\n      deceleration: flicking.deceleration,\n      interruptable: flicking.interruptable,\n      easing: flicking.easing\n    });\n    this._panInput = new PanInput(flicking.viewport.element, {\n      inputType: flicking.inputType,\n      iOSEdgeSwipeThreshold: flicking.iOSEdgeSwipeThreshold,\n      scale: flicking.horizontal ? [-1, 0] : [0, -1],\n      releaseOnScroll: true\n    });\n\n    const axes = this._axes;\n\n    axes.connect(flicking.horizontal ? [AXES.POSITION_KEY, \"\"] : [\"\", AXES.POSITION_KEY], this._panInput);\n\n    for (const key in AXES.EVENT) {\n      const eventType = AXES.EVENT[key] as keyof AxesEvents;\n\n      axes.on(eventType, (e: AxesEvents[typeof eventType]) => {\n        this._stateMachine.fire(eventType, {\n          flicking,\n          axesEvent: e\n        });\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Destroy AxesController and return to initial state\n   * @ko AxesController를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this.removePreventClickHandler();\n\n    this._axes?.destroy();\n    this._panInput?.destroy();\n\n    this._resetInternalValues();\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @chainable\n   * @return {this}\n   */\n  public enable(): this {\n    this._panInput?.enable();\n\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @chainable\n   * @return {this}\n   */\n  public disable(): this {\n    this._panInput?.disable();\n\n    return this;\n  }\n\n  /**\n   * Update {@link https://naver.github.io/egjs-axes/ @egjs/axes}'s state\n   * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 상태를 갱신합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link AxesController#init init} is not called before\n   * <ko>{@link AxesController#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public update(controlParams: ControlParams): this {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const axes = this._axes!;\n    const axis = axes.axis[AXES.POSITION_KEY];\n\n    axis.circular = [controlParams.circular, controlParams.circular];\n    axis.range = [controlParams.range.min, controlParams.range.max];\n    axis.bounce = parseBounce(flicking.bounce, camera.size);\n\n    axes.axm.set({ [AXES.POSITION_KEY]: controlParams.position });\n\n    return this;\n  }\n\n  public addPreventClickHandler() {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const axes = this._axes!;\n    const cameraEl = flicking.camera.element;\n\n    axes.on(AXES.EVENT.HOLD, this._onAxesHold);\n    axes.on(AXES.EVENT.CHANGE, this._onAxesChange);\n    cameraEl.addEventListener(\"click\", this._preventClickWhenDragged, true);\n  }\n\n  public removePreventClickHandler() {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const axes = this._axes!;\n    const cameraEl = flicking.camera.element;\n\n    axes.off(AXES.EVENT.HOLD, this._onAxesHold);\n    axes.off(AXES.EVENT.CHANGE, this._onAxesChange);\n    cameraEl.removeEventListener(\"click\", this._preventClickWhenDragged, true);\n  }\n\n  /**\n   * Run Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#setTo setTo} using the given position\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#setTo setTo} 메소드를 주어진 좌표를 이용하여 수행합니다\n   * @param {number} position A position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {number} [axesEvent] If provided, it'll use its {@link https://naver#github#io/egjs-axes/release/latest/doc/eg#Axes#html#setTo setTo} method instead<ko>이 값이 주어졌을 경우, 해당 이벤트의 {@link https://naver#github#io/egjs-axes/release/latest/doc/eg#Axes#html#setTo setTo} 메소드를 대신해서 사용합니다.</ko>\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public animateTo(position: number, duration: number, axesEvent?: OnRelease): Promise<void> {\n    const axes = this._axes;\n\n    if (!axes) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.NOT_ATTACHED_TO_FLICKING(\"Control\"), ERROR.CODE.NOT_ATTACHED_TO_FLICKING));\n    }\n\n    const startPos = axes.get([AXES.POSITION_KEY])[AXES.POSITION_KEY];\n\n    if (startPos === position) {\n      const flicking = getFlickingAttached(this._flicking, \"Control\");\n\n      return flicking.camera.lookAt(position);\n    }\n\n    this._animatingContext = {\n      start: startPos,\n      end: position,\n      offset: 0\n    };\n\n    const animate = () => {\n      const resetContext = () => {\n        this._animatingContext = { start: 0, end: 0, offset: 0 };\n      };\n\n      axes.once(AXES.EVENT.FINISH, resetContext);\n\n      if (axesEvent) {\n        axesEvent.setTo({ [AXES.POSITION_KEY]: position }, duration);\n      } else {\n        axes.setTo({ [AXES.POSITION_KEY]: position }, duration);\n      }\n    };\n\n    if (duration === 0) {\n      animate();\n      axes.axm.set({ [AXES.POSITION_KEY]: position });\n\n      return Promise.resolve();\n    } else {\n      return new Promise((resolve, reject) => {\n        const animationFinishHandler = () => {\n          axes.off(AXES.EVENT.HOLD, interruptionHandler);\n          resolve();\n        };\n\n        const interruptionHandler = () => {\n          axes.off(AXES.EVENT.FINISH, animationFinishHandler);\n          reject(new FlickingError(ERROR.MESSAGE.ANIMATION_INTERRUPTED, ERROR.CODE.ANIMATION_INTERRUPTED));\n        };\n\n        axes.once(AXES.EVENT.FINISH, animationFinishHandler);\n        axes.once(AXES.EVENT.HOLD, interruptionHandler);\n\n        animate();\n      });\n    }\n  }\n\n  private _resetInternalValues() {\n    this._flicking = null;\n    this._axes = null;\n    this._panInput = null;\n    this._animatingContext = { start: 0, end: 0, offset: 0 };\n    this._dragged = false;\n  }\n\n  private _onAxesHold = () => {\n    this._dragged = false;\n  };\n\n  private _onAxesChange = () => {\n    this._dragged = true;\n  };\n\n  private _preventClickWhenDragged = (e: MouseEvent) => {\n    if (this._dragged) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    this._dragged = false;\n  };\n}\n\nexport default AxesController;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport Panel from \"../core/panel/Panel\";\nimport AxesController from \"../control/AxesController\";\nimport { DIRECTION, EVENTS } from \"../const/external\";\nimport * as ERROR from \"../const/error\";\nimport { getDirection, getFlickingAttached } from \"../utils\";\nimport { ValueOf } from \"../type/internal\";\n\n/**\n * A component that manages inputs and animation of Flicking\n * @ko Flicking의 입력 장치 & 애니메이션을 담당하는 컴포넌트\n */\nabstract class Control {\n  // Internal States\n  protected _flicking: Flicking | null;\n  protected _controller: AxesController;\n  protected _activePanel: Panel | null;\n\n  /**\n   * A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events\n   * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트\n   * @type {AxesController}\n   * @readonly\n   */\n  public get controller() { return this._controller; }\n  /**\n   * Index number of the {@link Flicking#currentPanel currentPanel}\n   * @ko {@link Flicking#currentPanel currentPanel}의 인덱스 번호\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get activeIndex() { return this._activePanel?.index ?? -1; }\n  /**\n   * An active panel\n   * @ko 현재 선택된 패널\n   * @type {Panel | null}\n   * @readonly\n   */\n  public get activePanel() { return this._activePanel; }\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get animating() { return this._controller.state.animating; }\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get holding() { return this._controller.state.holding; }\n\n  /** */\n  public constructor() {\n    this._flicking = null;\n    this._controller = new AxesController();\n    this._activePanel = null;\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @method\n   * @abstract\n   * @memberof Control\n   * @instance\n   * @name moveToPosition\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public abstract moveToPosition(position: number, duration: number, axesEvent?: OnRelease): Promise<void>;\n\n  /**\n   * Initialize Control\n   * @ko Control을 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n    this._controller.init(flicking);\n\n    return this;\n  }\n\n  /**\n   * Destroy Control and return to initial state\n   * @ko Control을 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this._controller.destroy();\n\n    this._flicking = null;\n    this._activePanel = null;\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @chainable\n   * @return {this}\n   */\n  public enable(): this {\n    this._controller.enable();\n\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @chainable\n   * @return {this}\n   */\n  public disable(): this {\n    this._controller.disable();\n\n    return this;\n  }\n\n  /**\n   * Update position after resizing\n   * @ko resize 이후에 position을 업데이트합니다\n   * @param {number} progressInPanel Previous camera's progress in active panel before resize<ko>Resize 이전 현재 선택된 패널 내에서의 카메라 progress 값</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {Promise<void>}\n   */\n  public async updatePosition(_progressInPanel: number): Promise<void> {   // eslint-disable-line @typescript-eslint/no-unused-vars\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    if (activePanel) {\n      await camera.lookAt(camera.clampToReachablePosition(activePanel.position));\n    }\n  }\n\n  /**\n   * Update {@link Control#controller controller}'s state\n   * @ko {@link Control#controller controller}의 내부 상태를 갱신합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateInput(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n\n    this._controller.update(camera.controlParams);\n\n    return this;\n  }\n\n  /**\n   * Reset {@link Control#activePanel activePanel} to `null`\n   * @ko {@link Control#activePanel activePanel}을 `null`로 초기화합니다\n   * @chainable\n   * @return {this}\n   */\n  public resetActive(): this {\n    this._activePanel = null;\n\n    return this;\n  }\n\n  /**\n   * Move {@link Camera} to the given panel\n   * @ko {@link Camera}를 해당 패널 위로 이동합니다\n   * @param {Panel} panel The target panel to move<ko>이동할 패널</ko>\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {number} duration Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @param {DIRECTION} [direction=DIRECTION.NONE] Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPanel(panel: Panel, {\n    duration,\n    direction = DIRECTION.NONE,\n    axesEvent\n  }: {\n    duration: number;\n    direction?: ValueOf<typeof DIRECTION>;\n    axesEvent?: OnRelease;\n  }) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n\n    let position = panel.position;\n    const nearestAnchor = camera.findNearestAnchor(position);\n\n    if (panel.removed || !nearestAnchor) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(panel.position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n    if (!camera.canReach(panel)) {\n      // Override position & panel if that panel is not reachable\n      position = nearestAnchor.position;\n      panel = nearestAnchor.panel;\n    } else if (flicking.circularEnabled) {\n      // Circular mode is enabled, find nearest distance to panel\n      const camPos = this._controller.position; // Actual position of the Axes\n      const camRangeDiff = camera.rangeDiff;\n      const possiblePositions = [position, position + camRangeDiff, position - camRangeDiff]\n        .filter(pos => {\n          if (direction === DIRECTION.NONE) return true;\n\n          return direction === DIRECTION.PREV\n            ? pos <= camPos\n            : pos >= camPos;\n        });\n\n      position = possiblePositions.reduce((nearestPosition, pos) => {\n        if (Math.abs(camPos - pos) < Math.abs(camPos - nearestPosition)) {\n          return pos;\n        } else {\n          return nearestPosition;\n        }\n      }, Infinity);\n    }\n\n    this._triggerIndexChangeEvent(panel, panel.position, axesEvent);\n\n    return this._animateToPosition({ position, duration, newActivePanel: panel, axesEvent });\n  }\n\n  protected _triggerIndexChangeEvent(panel: Panel, position: number, axesEvent?: OnRelease): void {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const triggeringEvent = panel !== this._activePanel ? EVENTS.WILL_CHANGE : EVENTS.WILL_RESTORE;\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    const event = new ComponentEvent(triggeringEvent, {\n      index: panel.index,\n      panel,\n      isTrusted: axesEvent?.isTrusted || false,\n      direction: getDirection(activePanel?.position ?? camera.position, position)\n    });\n    flicking.trigger(event);\n\n    if (event.isCanceled()) {\n      throw new FlickingError(ERROR.MESSAGE.STOP_CALLED_BY_USER, ERROR.CODE.STOP_CALLED_BY_USER);\n    }\n  }\n\n  protected async _animateToPosition({\n    position,\n    duration,\n    newActivePanel,\n    axesEvent\n  }: {\n    position: number;\n    duration: number;\n    newActivePanel: Panel;\n    axesEvent?: OnRelease;\n  }) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const currentPanel = this._activePanel;\n    const animate = () => this._controller.animateTo(position, duration, axesEvent);\n    const isTrusted = axesEvent?.isTrusted || false;\n\n    if (duration <= 0) {\n      const animation = animate();\n      this._setActive(newActivePanel, currentPanel, isTrusted);\n      return animation;\n    } else {\n      return animate().then(async () => {\n        this._setActive(newActivePanel, currentPanel, isTrusted);\n        await flicking.renderer.render();\n      }).catch(err => {\n        if (axesEvent && err instanceof FlickingError && err.code === ERROR.CODE.ANIMATION_INTERRUPTED) return;\n        throw err;\n      });\n    }\n  }\n\n  protected _setActive(newActivePanel: Panel, prevActivePanel: Panel | null, isTrusted: boolean) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n\n    this._activePanel = newActivePanel;\n\n    flicking.camera.updateAdaptiveHeight();\n\n    if (newActivePanel !== prevActivePanel) {\n      flicking.trigger(new ComponentEvent(EVENTS.CHANGED, {\n        index: newActivePanel.index,\n        panel: newActivePanel,\n        prevIndex: prevActivePanel?.index ?? -1,\n        prevPanel: prevActivePanel,\n        isTrusted,\n        direction: prevActivePanel ? getDirection(prevActivePanel.position, newActivePanel.position) : DIRECTION.NONE\n      }));\n    } else {\n      flicking.trigger(new ComponentEvent(EVENTS.RESTORED, {\n        isTrusted\n      }));\n    }\n  }\n}\n\nexport default Control;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport Panel from \"../core/panel/Panel\";\nimport FlickingError from \"../core/FlickingError\";\nimport { getFlickingAttached } from \"../utils\";\nimport * as ERROR from \"../const/error\";\n\nimport Control from \"./Control\";\n\n/**\n * A {@link Control} that uses a release momentum to choose destination panel\n * @ko 입력을 중단한 시점의 가속도에 영향받아 도달할 패널을 계산하는 이동 방식을 사용하는 {@link Control}\n */\nclass SnapControl extends Control {\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    const clampedPosition = camera.clampToReachablePosition(position);\n    const anchorAtPosition = camera.findNearestAnchor(clampedPosition);\n\n    if (!anchorAtPosition || !activePanel) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const prevPos = activePanel.position;\n\n    const isOverThreshold = Math.abs(position - prevPos) >= flicking.threshold;\n    const adjacentAnchor = (position > prevPos)\n      ? camera.getNextAnchor(anchorAtPosition)\n      : camera.getPrevAnchor(anchorAtPosition);\n\n    let targetPos: number;\n    let targetPanel: Panel;\n\n    if (isOverThreshold && anchorAtPosition.position !== activePanel.position) {\n      // Move to anchor at position\n      targetPanel = anchorAtPosition.panel;\n      targetPos = anchorAtPosition.position;\n    } else if (isOverThreshold && adjacentAnchor) {\n      // Move to adjacent anchor\n      targetPanel = adjacentAnchor.panel;\n      targetPos = adjacentAnchor.position;\n    } else {\n      // Restore to active panel\n      targetPos = camera.clampToReachablePosition(activePanel.position);\n      targetPanel = activePanel;\n    }\n\n    this._triggerIndexChangeEvent(targetPanel, position, axesEvent);\n\n    return this._animateToPosition({\n      position: targetPos,\n      duration,\n      newActivePanel: targetPanel,\n      axesEvent\n    });\n  }\n}\n\nexport default SnapControl;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport FlickingError from \"../core/FlickingError\";\nimport * as ERROR from \"../const/error\";\nimport { getFlickingAttached } from \"../utils\";\n\nimport Control from \"./Control\";\n\n/**\n * An options for the {@link FreeControl}\n * @ko {@link FreeControl} 생성시 사용되는 옵션\n * @interface\n * @property {boolean} stopAtEdge Make scroll animation to stop at the start/end of the scroll area, not going out the bounce area\n * <ko>스크롤 애니메이션을 스크롤 영역의 시작과 끝부분에서 멈추도록 하여, 바운스 영역을 넘어가지 않도록 합니다</ko>\n */\nexport interface FreeControlOptions {\n  stopAtEdge: boolean;\n}\n\n/**\n * A {@link Control} that can be scrolled freely without alignment\n * @ko 패널이 정해진 지점에 정렬되지 않고, 자유롭게 스크롤할 수 있는 이동 방식을 사용하는 {@link Control}\n */\nclass FreeControl extends Control {\n  private _stopAtEdge: FreeControlOptions[\"stopAtEdge\"];\n\n  /**\n   * Make scroll animation to stop at the start/end of the scroll area, not going out the bounce area\n   * @ko 스크롤 애니메이션을 스크롤 영역의 시작과 끝부분에서 멈추도록 하여, 바운스 영역을 넘어가지 않도록 합니다\n   * @type {boolean}\n   * @default true\n   */\n  public get stopAtEdge() { return this._stopAtEdge; }\n\n  public set stopAtEdge(val: FreeControlOptions[\"stopAtEdge\"]) { this._stopAtEdge = val; }\n\n  /** */\n  public constructor({\n    stopAtEdge = true\n  }: Partial<FreeControlOptions> = {}) {\n    super();\n\n    this._stopAtEdge = stopAtEdge;\n  }\n\n  /**\n   * Update position after resizing\n   * @ko resize 이후에 position을 업데이트합니다\n   * @param {number} progressInPanel Previous camera's progress in active panel before resize<ko>Resize 이전 현재 선택된 패널 내에서의 카메라 progress 값</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {Promise<void>}\n   */\n  public async updatePosition(progressInPanel: number): Promise<void> {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    if (activePanel) {\n      const panelRange = activePanel.range;\n      const newPosition = panelRange.min + (panelRange.max - panelRange.min) * progressInPanel;\n\n      await camera.lookAt(camera.clampToReachablePosition(newPosition));\n    }\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n\n    const camera = flicking.camera;\n    const targetPos = camera.clampToReachablePosition(position);\n\n    const anchorAtPosition = camera.findAnchorIncludePosition(targetPos);\n\n    if (!anchorAtPosition) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const targetPanel = anchorAtPosition.panel;\n\n    // Trigger only change event\n    if (targetPanel !== this._activePanel) {\n      this._triggerIndexChangeEvent(targetPanel, position, axesEvent);\n    }\n\n    return this._animateToPosition({ position: this._stopAtEdge ? targetPos : position, duration, newActivePanel: targetPanel, axesEvent });\n  }\n}\n\nexport default FreeControl;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport Panel from \"../core/panel/Panel\";\nimport FlickingError from \"../core/FlickingError\";\nimport { clamp, getFlickingAttached, getMinusCompensatedIndex, isBetween } from \"../utils\";\nimport * as ERROR from \"../const/error\";\n\nimport Control from \"./Control\";\n/**\n * An options for the {@link StrictControl}\n * @ko {@link StrictControl} 생성시 사용되는 옵션\n * @interface\n * @property {number} count Maximum number of panels that can be moved at a time<ko>최대로 움직일 수 있는 패널의 개수</ko>\n */\nexport interface StrictControlOptions {\n  count: number;\n}\n\n/**\n * A {@link Control} that allow you to select the maximum number of panels to move at a time\n * @ko 한번에 최대로 이동할 패널의 개수를 선택 가능한 {@link Control}\n */\nclass StrictControl extends Control {\n  private _count: number;\n  private _indexRange: { min: number; max: number };\n\n  /**\n   * Maximum number of panels that can be moved at a time\n   * @ko 최대로 움직일 수 있는 패널의 개수\n   * @type {number}\n   * @default 1\n   */\n  public get count() { return this._count; }\n\n  public set count(val: StrictControlOptions[\"count\"]) { this._count = val; }\n\n  /** */\n  public constructor({\n    count = 1\n  }: Partial<StrictControlOptions> = {}) {\n    super();\n\n    this._count = count;\n    this._resetIndexRange();\n  }\n\n  /**\n   * Destroy Control and return to initial state\n   * @ko Control을 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy() {\n    super.destroy();\n\n    this._resetIndexRange();\n  }\n\n  /**\n   * Update {@link Control#controller controller}'s state\n   * @ko {@link Control#controller controller}의 내부 상태를 갱신합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateInput(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const renderer = flicking.renderer;\n    const controller = this._controller;\n    const controlParams = camera.controlParams;\n    const count = this._count;\n\n    const activePanel = controller.state.animating\n      ? camera.findNearestAnchor(camera.position)?.panel\n      : this._activePanel;\n\n    if (!activePanel) {\n      controller.update(controlParams);\n      this._resetIndexRange();\n      return this;\n    }\n\n    const cameraRange = controlParams.range;\n    const currentPos = activePanel.position;\n    const currentIndex = activePanel.index;\n    const panelCount = renderer.panelCount;\n\n    let prevPanelIndex = currentIndex - count;\n    let nextPanelIndex = currentIndex + count;\n\n    if (prevPanelIndex < 0) {\n      prevPanelIndex = flicking.circularEnabled\n        ? getMinusCompensatedIndex((prevPanelIndex + 1) % panelCount - 1, panelCount)\n        : clamp(prevPanelIndex, 0, panelCount - 1);\n    }\n    if (nextPanelIndex >= panelCount) {\n      nextPanelIndex = flicking.circularEnabled\n        ? nextPanelIndex % panelCount\n        : clamp(nextPanelIndex, 0, panelCount - 1);\n    }\n\n    const prevPanel = renderer.panels[prevPanelIndex];\n    const nextPanel = renderer.panels[nextPanelIndex];\n\n    let prevPos = Math.max(prevPanel.position, cameraRange.min);\n    let nextPos = Math.min(nextPanel.position, cameraRange.max);\n\n    if (prevPos > currentPos) {\n      prevPos -= camera.rangeDiff;\n    }\n    if (nextPos < currentPos) {\n      nextPos += camera.rangeDiff;\n    }\n\n    controlParams.range = {\n      min: prevPos,\n      max: nextPos\n    };\n\n    if (controlParams.position < prevPos) {\n      controlParams.position += camera.rangeDiff;\n    }\n\n    if (controlParams.position > nextPos) {\n      controlParams.position -= camera.rangeDiff;\n    }\n\n    controlParams.circular = false;\n    controller.update(controlParams);\n\n    this._indexRange = {\n      min: prevPanel.index,\n      max: nextPanel.index\n    };\n\n    return this;\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n    const axesRange = this._controller.range;\n    const indexRange = this._indexRange;\n    const cameraRange = camera.range;\n\n    const clampedPosition = clamp(camera.clampToReachablePosition(position), axesRange[0], axesRange[1]);\n    const anchorAtPosition = camera.findAnchorIncludePosition(clampedPosition);\n\n    if (!anchorAtPosition || !activePanel) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const prevPos = activePanel.position;\n\n    const isOverThreshold = Math.abs(position - prevPos) >= flicking.threshold;\n    const adjacentAnchor = (position > prevPos)\n      ? camera.getNextAnchor(anchorAtPosition)\n      : camera.getPrevAnchor(anchorAtPosition);\n\n    let targetPos: number;\n    let targetPanel: Panel;\n\n    const anchors = camera.anchorPoints;\n    const firstAnchor = anchors[0];\n    const lastAnchor = anchors[anchors.length - 1];\n\n    const shouldBounceToFirst = position <= cameraRange.min && isBetween(firstAnchor.panel.index, indexRange.min, indexRange.max);\n    const shouldBounceToLast = position >= cameraRange.max && isBetween(lastAnchor.panel.index, indexRange.min, indexRange.max);\n\n    if (shouldBounceToFirst || shouldBounceToLast) {\n      // In bounce area\n      const targetAnchor = position < cameraRange.min ? firstAnchor : lastAnchor;\n\n      targetPanel = targetAnchor.panel;\n      targetPos = targetAnchor.position;\n    } else if (isOverThreshold && anchorAtPosition.position !== activePanel.position) {\n      // Move to anchor at position\n      targetPanel = anchorAtPosition.panel;\n      targetPos = anchorAtPosition.position;\n    } else if (isOverThreshold && adjacentAnchor && isBetween(adjacentAnchor.index, indexRange.min, indexRange.max)) {\n      // Move to adjacent anchor\n      targetPanel = adjacentAnchor.panel;\n      targetPos = adjacentAnchor.position;\n    } else {\n      // Restore to active panel\n      targetPos = camera.clampToReachablePosition(activePanel.position);\n      targetPanel = activePanel;\n    }\n\n    this._triggerIndexChangeEvent(targetPanel, position, axesEvent);\n\n    return this._animateToPosition({\n      position: targetPos,\n      duration,\n      newActivePanel: targetPanel,\n      axesEvent\n    });\n  }\n\n  protected _setActive = (newActivePanel: Panel, prevActivePanel: Panel | null, isTrusted: boolean) => {\n    super._setActive(newActivePanel, prevActivePanel, isTrusted);\n    this.updateInput();\n  };\n\n  private _resetIndexRange() {\n    this._indexRange = { min: 0, max: 0 };\n  }\n}\n\nexport default StrictControl;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"./panel/Panel\";\n\n/**\n * A data component that has actual position where the camera should be stopped at\n * @ko 카메라가 정지해야하는 실제 위치를 담고 있는 데이터 컴포넌트\n */\nclass AnchorPoint {\n  private _index: number;\n  private _pos: number;\n  private _panel: Panel;\n\n  /**\n   * Index of AnchorPoint\n   * @ko AnchorPoint의 인덱스\n   * @type {number}\n   * @readonly\n   */\n  public get index() { return this._index; }\n  /**\n   * Position of AnchorPoint\n   * @ko AnchorPoint의 좌표\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._pos; }\n  /**\n   * A {@link Panel} instance AnchorPoint is referencing to\n   * @ko AnchorPoint가 참조하고 있는 {@link Panel}\n   * @type {Panel}\n   * @readonly\n   */\n  public get panel() { return this._panel; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 객체</ko>\n   * @param {number} [options.index] Index of AnchorPoint<ko>AnchorPoint의 인덱스</ko>\n   * @param {number} [options.position] Position of AnchorPoint<ko>AnchorPoint의 좌표</ko>\n   * @param {Panel} [options.panel] A {@link Panel} instance AnchorPoint is referencing to<ko>AnchorPoint가 참조하고 있는 {@link Panel}</ko>\n   */\n  public constructor({\n    index,\n    position,\n    panel\n  }: {\n    index: number;\n    position: number;\n    panel: Panel;\n  }) {\n    this._index = index;\n    this._pos = position;\n    this._panel = panel;\n  }\n}\n\nexport default AnchorPoint;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking, { FlickingOptions } from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport * as ERROR from \"../const/error\";\nimport { ALIGN, DIRECTION, EVENTS } from \"../const/external\";\nimport { checkExistence, clamp, getFlickingAttached, getProgress, includes, parseAlign } from \"../utils\";\n\nexport interface CameraOptions {\n  align: FlickingOptions[\"align\"];\n}\n\n/**\n * A component that manages actual movement inside the viewport\n * @ko 뷰포트 내에서의 실제 움직임을 담당하는 컴포넌트\n */\nabstract class Camera {\n  // Options\n  protected _align: FlickingOptions[\"align\"];\n\n  // Internal states\n  protected _flicking: Flicking | null;\n  protected _el: HTMLElement;\n  protected _transform: string;\n  protected _position: number;\n  protected _alignPos: number;\n  protected _offset: number;\n  protected _range: { min: number; max: number };\n  protected _visiblePanels: Panel[];\n  protected _anchors: AnchorPoint[];\n  protected _needPanelTriggered: { prev: boolean; next: boolean };\n\n  // Internal states getter\n  /**\n   * The camera(`.flicking-camera`) element\n   * @ko 카메라(`.flicking-camera`) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n  /**\n   * Current position of the camera\n   * @ko Camera의 현재 좌표\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._position; }\n  /**\n   * Align position inside the viewport where {@link Panel}'s {@link Panel#alignPosition alignPosition} should be located at\n   * @ko 패널의 정렬 기준 위치. 뷰포트 내에서 {@link Panel}의 {@link Panel#alignPosition alignPosition}이 위치해야 하는 곳입니다\n   * @type {number}\n   * @readonly\n   */\n  public get alignPosition() { return this._alignPos; }\n  /**\n   * Position offset, used for the {@link Flicking#renderOnlyVisible renderOnlyVisible} option\n   * @ko Camera의 좌표 오프셋. {@link Flicking#renderOnlyVisible renderOnlyVisible} 옵션을 위해 사용됩니다.\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get offset() { return this._offset; }\n  /**\n   * A range that Camera's {@link Camera#position position} can reach\n   * @ko Camera의 {@link Camera#position position}이 도달 가능한 범위\n   * @type {object}\n   * @property {number} min A minimum position<ko>최소 위치</ko>\n   * @property {number} min A maximum position<ko>최대 위치</ko>\n   * @readonly\n   */\n  public get range() { return this._range; }\n  /**\n   * A difference between Camera's minimum and maximum position that can reach\n   * @ko Camera가 도달 가능한 최소/최대 좌표의 차이\n   * @type {number}\n   * @readonly\n   */\n  public get rangeDiff() { return this._range.max - this._range.min; }\n  /**\n   * An array of visible panels from the current position\n   * @ko 현재 보이는 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   */\n  public get visiblePanels() { return this._visiblePanels; }\n  /**\n   * A range of the visible area from the current position\n   * @ko 현재 위치에서 보이는 범위\n   * @type {object}\n   * @property {number} min A minimum position<ko>최소 위치</ko>\n   * @property {number} min A maximum position<ko>최대 위치</ko>\n   * @readonly\n   */\n  public get visibleRange() { return { min: this._position - this._alignPos, max: this._position - this._alignPos + this.size }; }\n  /**\n   * An array of {@link AnchorPoint}s that Camera can be stopped at\n   * @ko 카메라가 도달 가능한 {@link AnchorPoint}의 목록\n   * @type {AnchorPoint[]}\n   * @readonly\n   */\n  public get anchorPoints() { return this._anchors; }\n  /**\n   * A current parameters of the Camera for updating {@link AxesController}\n   * @ko {@link AxesController}를 업데이트하기 위한 현재 Camera 패러미터들\n   * @type {ControlParams}\n   * @readonly\n   */\n  public get controlParams() { return { range: this._range, position: this._position, circular: false }; }\n  /**\n   * A Boolean value indicating whether Camera's over the minimum or maximum position reachable\n   * @ko 현재 카메라가 도달 가능한 범위의 최소 혹은 최대점을 넘어섰는지를 나타냅니다\n   * @type {boolean}\n   * @readonly\n   */\n  public get atEdge() { return this._position <= this._range.min || this._position >= this._range.max; }\n  /**\n   * Return the size of the viewport\n   * @ko 뷰포트 크기를 반환합니다\n   * @type {number}\n   * @readonly\n   */\n  public get size() {\n    const flicking = this._flicking;\n    return flicking\n      ? flicking.horizontal\n        ? flicking.viewport.width\n        : flicking.viewport.height\n      : 0;\n  }\n\n  /**\n   * Return the camera's position progress from the first panel to last panel\n   * Range is from 0 to last panel's index\n   * @ko 첫번째 패널로부터 마지막 패널까지의 카메라 위치의 진행도를 반환합니다\n   * 범위는 0부터 마지막 패널의 인덱스까지입니다\n   * @type {number}\n   * @readonly\n   */\n  public get progress() {\n    const flicking = this._flicking;\n    const position = this._position + this._offset;\n    const nearestAnchor = this.findNearestAnchor(this._position);\n\n    if (!flicking || !nearestAnchor) {\n      return NaN;\n    }\n\n    const nearestPanel = nearestAnchor.panel;\n    const panelPos = nearestPanel.position + nearestPanel.offset;\n    const bounceSize = flicking.control.controller.bounce!;\n\n    const { min: prevRange, max: nextRange } = this.range;\n    const rangeDiff = this.rangeDiff;\n\n    if (position === panelPos) {\n      return nearestPanel.index;\n    }\n\n    if (position < panelPos) {\n      const prevPanel = nearestPanel.prev();\n      let prevPosition = prevPanel\n        ? prevPanel.position + prevPanel.offset\n        : prevRange - bounceSize[0];\n\n      // Looped\n      if (prevPosition > panelPos) {\n        prevPosition -= rangeDiff;\n      }\n\n      return nearestPanel.index - 1 + getProgress(position, prevPosition, panelPos);\n    } else {\n      const nextPanel = nearestPanel.next();\n      let nextPosition = nextPanel\n        ? nextPanel.position + nextPanel.offset\n        : nextRange + bounceSize[1];\n\n      // Looped\n      if (nextPosition < panelPos) {\n        nextPosition += rangeDiff;\n      }\n\n      return nearestPanel.index + getProgress(position, panelPos, nextPosition);\n    }\n  }\n\n  // Options Getter\n  /**\n   * A value indicating where the {@link Camera#alignPosition alignPosition} should be located at inside the viewport element\n   * @ko {@link Camera#alignPosition alignPosition}이 뷰포트 엘리먼트 내의 어디에 위치해야 하는지를 나타내는 값\n   * @type {ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Setter\n  public set align(val: FlickingOptions[\"align\"]) {\n    this._align = val;\n  }\n\n  /** */\n  public constructor({\n    align = ALIGN.CENTER\n  }: Partial<CameraOptions> = {}) {\n    this._flicking = null;\n    this._resetInternalValues();\n\n    // Options\n    this._align = align;\n  }\n\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @method\n   * @abstract\n   * @memberof Camera\n   * @instance\n   * @name updateRange\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public abstract updateRange(): this;\n\n  /**\n   * Initialize Camera\n   * @ko Camera를 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE VAL_MUST_NOT_NULL} If the camera element(`.flicking-camera`) does not exist inside viewport element\n   * <ko>{@link ERROR_CODE VAL_MUST_NOT_NULL} 뷰포트 엘리먼트 내부에 카메라 엘리먼트(`.flicking-camera`)가 존재하지 않을 경우</ko>\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n\n    const viewportEl = flicking.viewport.element;\n\n    checkExistence(viewportEl.firstElementChild, \"First element child of the viewport element\");\n    this._el = viewportEl.firstElementChild as HTMLElement;\n    this._checkTranslateSupport();\n\n    return this;\n  }\n\n  /**\n   * Destroy Camera and return to initial state\n   * @ko Camera를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): this {\n    this._flicking = null;\n    this._resetInternalValues();\n    return this;\n  }\n\n  /**\n   * Move to the given position and apply CSS transform\n   * @ko 해당 좌표로 이동하고, CSS transform을 적용합니다\n   * @param {number} pos A new position<ko>움직일 위치</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public async lookAt(pos: number): Promise<void> {\n    const prevPos = this._position;\n\n    this._position = pos;\n    await this._refreshVisiblePanels();\n    this._checkNeedPanel();\n    this._checkReachEnd(prevPos, pos);\n    this._applyTransform();\n  }\n\n  /**\n   * Return a previous {@link AnchorPoint} of given {@link AnchorPoint}\n   * If it does not exist, return `null` instead\n   * @ko 주어진 {@link AnchorPoint}의 이전 {@link AnchorPoint}를 반환합니다\n   * 존재하지 않을 경우 `null`을 반환합니다\n   * @param {AnchorPoint} anchor A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>\n   * @return {AnchorPoint | null} The previous {@link AnchorPoint}<ko>이전 {@link AnchorPoint}</ko>\n   */\n  public getPrevAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    return this._anchors[anchor.index - 1] || null;\n  }\n\n  /**\n   * Return a next {@link AnchorPoint} of given {@link AnchorPoint}\n   * If it does not exist, return `null` instead\n   * @ko 주어진 {@link AnchorPoint}의 다음 {@link AnchorPoint}를 반환합니다\n   * 존재하지 않을 경우 `null`을 반환합니다\n   * @param {AnchorPoint} anchor A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>\n   * @return {AnchorPoint | null} The next {@link AnchorPoint}<ko>다음 {@link AnchorPoint}</ko>\n   */\n  public getNextAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    return this._anchors[anchor.index + 1] || null;\n  }\n\n  /**\n   * Return the camera's position progress in the panel below\n   * Value is from 0 to 1 when the camera's inside panel\n   * Value can be lower than 0 or bigger than 1 when it's in the margin area\n   * @ko 현재 카메라 아래 패널에서의 위치 진행도를 반환합니다\n   * 반환값은 카메라가 패널 내부에 있을 경우 0부터 1까지의 값을 갖습니다\n   * 패널의 margin 영역에 있을 경우 0보다 작거나 1보다 큰 값을 반환할 수 있습니다\n   */\n  public getProgressInPanel(panel: Panel) {\n    const panelRange = panel.range;\n\n    return (this._position - panelRange.min) / (panelRange.max - panelRange.min);\n  }\n\n  /**\n   * Return {@link AnchorPoint} that includes given position\n   * If there's no {@link AnchorPoint} that includes the given position, return `null` instead\n   * @ko 주어진 좌표를 포함하는 {@link AnchorPoint}를 반환합니다\n   * 주어진 좌표를 포함하는 {@link AnchorPoint}가 없을 경우 `null`을 반환합니다\n   * @param {number} position A position to check<ko>확인할 좌표</ko>\n   * @return {AnchorPoint | null} The {@link AnchorPoint} that includes the given position<ko>해당 좌표를 포함하는 {@link AnchorPoint}</ko>\n   */\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    const anchors = this._anchors;\n    const anchorsIncludingPosition = anchors.filter(anchor => anchor.panel.includePosition(position, true));\n\n    return anchorsIncludingPosition.reduce((nearest: AnchorPoint | null, anchor) => {\n      if (!nearest) return anchor;\n\n      return Math.abs(nearest.position - position) < Math.abs(anchor.position - position)\n        ? nearest\n        : anchor;\n    }, null);\n  }\n\n  /**\n   * Return {@link AnchorPoint} nearest to given position\n   * If there're no {@link AnchorPoint}s, return `null` instead\n   * @ko 해당 좌표에서 가장 가까운 {@link AnchorPoint}를 반환합니다\n   * {@link AnchorPoint}가 하나도 없을 경우 `null`을 반환합니다\n   * @param {number} position A position to check<ko>확인할 좌표</ko>\n   * @return {AnchorPoint | null} The {@link AnchorPoint} nearest to the given position<ko>해당 좌표에 가장 인접한 {@link AnchorPoint}</ko>\n   */\n  public findNearestAnchor(position: number): AnchorPoint | null {\n    const anchors = this._anchors;\n\n    if (anchors.length <= 0) return null;\n\n    let prevDist = Infinity;\n    for (let anchorIdx = 0; anchorIdx < anchors.length; anchorIdx++) {\n      const anchor = anchors[anchorIdx];\n      const dist = Math.abs(anchor.position - position);\n\n      if (dist > prevDist) {\n        // Return previous anchor\n        return anchors[anchorIdx - 1];\n      }\n\n      prevDist = dist;\n    }\n\n    // Return last anchor\n    return anchors[anchors.length - 1];\n  }\n\n  /**\n   * Clamp the given position between camera's range\n   * @ko 주어진 좌표를 Camera가 도달 가능한 범위 사이의 값으로 만듭니다\n   * @param {number} position A position to clamp<ko>범위를 제한할 좌표</ko>\n   * @return {number} A clamped position<ko>범위 제한된 좌표</ko>\n   */\n  public clampToReachablePosition(position: number): number {\n    const range = this._range;\n    return clamp(position, range.min, range.max);\n  }\n\n  /**\n   * Check whether the given panel is inside of the Camera's range\n   * @ko 해당 {@link Panel}이 Camera가 도달 가능한 범위 내에 있는지를 반환합니다\n   * @param panel An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>\n   * @return {boolean} Whether the panel's inside Camera's range<ko>도달 가능한 범위 내에 해당 패널이 존재하는지 여부</ko>\n   */\n  public canReach(panel: Panel): boolean {\n    const range = this._range;\n\n    if (panel.removed) return false;\n\n    const panelPos = panel.position;\n\n    return panelPos >= range.min && panelPos <= range.max;\n  }\n\n  /**\n   * Check whether the given panel element is visible at the current position\n   * @ko 현재 좌표에서 해당 패널 엘리먼트를 볼 수 있는지 여부를 반환합니다\n   * @param panel An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>\n   * @return Whether the panel element is visible at the current position<ko>현재 위치에서 해당 패널 엘리먼트가 보이는지 여부</ko>\n   */\n  public canSee(panel: Panel): boolean {\n    const visibleRange = this.visibleRange;\n    // Should not include margin, as we don't declare what the margin is visible as what the panel is visible.\n    return panel.includeRange(visibleRange.min, visibleRange.max, false);\n  }\n\n  /**\n   * Update Camera's {@link Camera#alignPosition alignPosition}\n   * @ko Camera의 {@link Camera#alignPosition alignPosition}을 업데이트합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateAlignPos(): this {\n    const align = this._align;\n\n    const alignVal = typeof align === \"object\"\n      ? (align as { camera: string | number }).camera\n      : align;\n\n    this._alignPos = parseAlign(alignVal, this.size);\n\n    return this;\n  }\n\n  /**\n   * Update Camera's {@link Camera#anchorPoints anchorPoints}\n   * @ko Camera의 {@link Camera#anchorPoints anchorPoints}를 업데이트합니다\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {this}\n   */\n  public updateAnchors(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    this._anchors = panels.map((panel, index) => new AnchorPoint({\n      index,\n      position: panel.position,\n      panel\n    }));\n\n    return this;\n  }\n\n  /**\n   * Update Viewport's height to active panel's height\n   * @ko 현재 선택된 패널의 높이와 동일하도록 뷰포트의 높이를 업데이트합니다\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {this}\n   */\n  public updateAdaptiveHeight() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const activePanel = flicking.control.activePanel;\n\n    if (!flicking.horizontal || !flicking.adaptive || !activePanel) return;\n\n    flicking.viewport.setSize({\n      height: activePanel.height\n    });\n  }\n\n  public updateOffset() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const unRenderedPanels = flicking.panels.filter(panel => !panel.rendered);\n    const position = this._position;\n\n    this._offset = unRenderedPanels\n      .filter(panel => panel.position + panel.offset < position)\n      .reduce((offset, panel) => offset + panel.sizeIncludingMargin, 0);\n\n    this._applyTransform();\n  }\n\n  /**\n   * Reset the history of {@link Flicking#event:needPanel needPanel} events so it can be triggered again\n   * @ko 발생한 {@link Flicking#event:needPanel needPanel} 이벤트들을 초기화하여 다시 발생할 수 있도록 합니다\n   * @chainable\n   * @return {this}\n   */\n  public resetNeedPanelHistory(): this {\n    this._needPanelTriggered = { prev: false, next: false };\n    return this;\n  }\n\n  protected _resetInternalValues() {\n    this._position = 0;\n    this._alignPos = 0;\n    this._offset = 0;\n    this._range = { min: 0, max: 0 };\n    this._visiblePanels = [];\n    this._anchors = [];\n    this._needPanelTriggered = { prev: false, next: false };\n  }\n\n  protected async _refreshVisiblePanels() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    const newVisiblePanels = panels.filter(panel => this.canSee(panel));\n    const prevVisiblePanels = this._visiblePanels;\n    this._visiblePanels = newVisiblePanels;\n\n    const added: Panel[] = newVisiblePanels.filter(panel => !includes(prevVisiblePanels, panel));\n    const removed: Panel[] = prevVisiblePanels.filter(panel => !includes(newVisiblePanels, panel));\n\n    if (added.length > 0 || removed.length > 0) {\n      await flicking.renderer.render();\n\n      flicking.trigger(new ComponentEvent(EVENTS.VISIBLE_CHANGE, {\n        added,\n        removed,\n        visiblePanels: newVisiblePanels\n      }));\n    }\n  }\n\n  protected _checkNeedPanel(): void {\n    const needPanelTriggered = this._needPanelTriggered;\n\n    if (needPanelTriggered.prev && needPanelTriggered.next) return;\n\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    if (panels.length <= 0) {\n      if (!needPanelTriggered.prev) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.PREV }));\n        needPanelTriggered.prev = true;\n      }\n      if (!needPanelTriggered.next) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.NEXT }));\n        needPanelTriggered.next = true;\n      }\n\n      return;\n    }\n\n    const cameraPosition = this._position;\n    const cameraSize = this.size;\n    const cameraRange = this._range;\n    const needPanelThreshold = flicking.needPanelThreshold;\n\n    const cameraPrev = cameraPosition - this._alignPos;\n    const cameraNext = cameraPrev + cameraSize;\n\n    const firstPanel = panels[0];\n    const lastPanel = panels[panels.length - 1];\n\n    if (!needPanelTriggered.prev) {\n      const firstPanelPrev = firstPanel.range.min;\n\n      if (cameraPrev <= (firstPanelPrev + needPanelThreshold) || cameraPosition <= (cameraRange.min + needPanelThreshold)) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.PREV }));\n        needPanelTriggered.prev = true;\n      }\n    }\n\n    if (!needPanelTriggered.next) {\n      const lastPanelNext = lastPanel.range.max;\n\n      if (cameraNext >= (lastPanelNext - needPanelThreshold) || cameraPosition >= (cameraRange.max - needPanelThreshold)) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.NEXT }));\n        needPanelTriggered.next = true;\n      }\n    }\n  }\n\n  protected _checkReachEnd(prevPos: number, newPos: number): void {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const range = this._range;\n\n    const wasBetweenRange = prevPos > range.min && prevPos < range.max;\n    const isBetweenRange = newPos > range.min && newPos < range.max;\n\n    if (!wasBetweenRange || isBetweenRange) return;\n\n    const direction = newPos <= range.min ? DIRECTION.PREV : DIRECTION.NEXT;\n\n    flicking.trigger(new ComponentEvent(EVENTS.REACH_EDGE, {\n      direction\n    }));\n  }\n\n  protected _applyTransform(): void {\n    const el = this._el;\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n\n    const actualPosition = this._position - this._alignPos - this._offset;\n\n    el.style[this._transform] = flicking.horizontal\n      ? `translate(${-actualPosition}px)`\n      : `translate(0, ${-actualPosition}px)`;\n  }\n\n  protected _checkTranslateSupport = () => {\n    const transforms = [\"webkitTransform\", \"msTransform\", \"MozTransform\", \"OTransform\", \"transform\"];\n\n    const supportedStyle = document.documentElement.style;\n    let transformName = \"\";\n    for (const prefixedTransform of transforms) {\n      if (prefixedTransform in supportedStyle) {\n        transformName = prefixedTransform;\n      }\n    }\n\n    if (!transformName) {\n      throw new FlickingError(ERROR.MESSAGE.TRANSFORM_NOT_SUPPORTED, ERROR.CODE.TRANSFORM_NOT_SUPPORTED);\n    }\n\n    this._transform = transformName;\n  };\n}\n\nexport default Camera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getFlickingAttached } from \"../utils\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A {@link Camera} that can move from the position of the first panel to the position of the last panel\n * @ko 첫번째 패널의 좌표로부터 마지막 패널의 좌표로까지 이동할 수 있는 종류의 {@link Camera}\n */\nclass LinearCamera extends Camera {\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const renderer = flicking.renderer;\n\n    const firstPanel = renderer.getPanel(0);\n    const lastPanel = renderer.getPanel(renderer.panelCount - 1);\n\n    this._range = { min: firstPanel?.position ?? 0, max: lastPanel?.position ?? 0 };\n    return this;\n  }\n}\n\nexport default LinearCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport { DIRECTION } from \"../const/external\";\nimport { circulatePosition, getFlickingAttached } from \"../utils\";\nimport { ValueOf } from \"../type/internal\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A data of the position that changes order of the panel elements\n * @ko 패널 엘리먼트 순서가 변경되는 좌표의 데이터\n * @interface\n * @property {Panel} panel Toggling panel<ko>순서를 변경할 패널</ko>\n * @property {DIRECTION} direction Toggling position<ko>순서를 변경할 방향</ko>\n * @property {boolean} toggled Whether the panel has toggled its position to `direction`<ko>`direction` 방향으로 패널 위치를 변경했는지 여부를 나타내는 값</ko>\n */\nexport interface TogglePoint {\n  panel: Panel;\n  direction: ValueOf<typeof DIRECTION>;\n  toggled: boolean;\n}\n\n/**\n * A {@link Camera} that connects the last panel and the first panel, enabling continuous loop\n * @ko 첫번째 패널과 마지막 패널이 이어진 상태로, 무한히 회전할 수 있는 종류의 {@link Camera}\n */\nclass CircularCamera extends Camera {\n  private _circularOffset: number = 0;\n  private _circularEnabled: boolean = false;\n\n  public get offset() { return this._offset - this._circularOffset; }\n  public get controlParams() { return { range: this._range, position: this._position, circular: this._circularEnabled }; }\n\n  public getPrevAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    if (!this._circularEnabled || anchor.index !== 0) return super.getPrevAnchor(anchor);\n\n    const anchors = this._anchors;\n    const rangeDiff = this.rangeDiff;\n    const lastAnchor = anchors[anchors.length - 1];\n\n    return new AnchorPoint({\n      index: lastAnchor.index,\n      position: lastAnchor.position - rangeDiff,\n      panel: lastAnchor.panel\n    });\n  }\n\n  public getNextAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    const anchors = this._anchors;\n\n    if (!this._circularEnabled || anchor.index !== anchors.length - 1) return super.getNextAnchor(anchor);\n\n    const rangeDiff = this.rangeDiff;\n    const firstAnchor = anchors[0];\n\n    return new AnchorPoint({\n      index: firstAnchor.index,\n      position: firstAnchor.position + rangeDiff,\n      panel: firstAnchor.panel\n    });\n  }\n\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    if (!this._circularEnabled) return super.findAnchorIncludePosition(position);\n\n    const range = this._range;\n    const positionInRange = circulatePosition(position, range.min, range.max);\n    const anchorInRange = super.findAnchorIncludePosition(positionInRange);\n\n    if (!anchorInRange) return null;\n\n    const rangeDiff = this.rangeDiff;\n\n    if (position < range.min) {\n      const loopCount = -Math.floor((range.min - position) / rangeDiff) - 1;\n\n      return new AnchorPoint({\n        index: anchorInRange.index,\n        position: anchorInRange.position + rangeDiff * loopCount,\n        panel: anchorInRange.panel\n      });\n    } else if (position > range.max) {\n      const loopCount = Math.floor((position - range.max) / rangeDiff) + 1;\n\n      return new AnchorPoint({\n        index: anchorInRange.index,\n        position: anchorInRange.position + rangeDiff * loopCount,\n        panel: anchorInRange.panel\n      });\n    }\n\n    return anchorInRange;\n  }\n\n  public clampToReachablePosition(position: number): number {\n    // Basically all position is reachable for circular camera\n    return this._circularEnabled\n      ? position\n      : super.clampToReachablePosition(position);\n  }\n\n  public canReach(panel: Panel): boolean {\n    if (panel.removed) return false;\n\n    return this._circularEnabled\n      // Always reachable on circular mode\n      ? true\n      : super.canReach(panel);\n  }\n\n  public canSee(panel: Panel): boolean {\n    const range = this._range;\n    const rangeDiff = this.rangeDiff;\n    const visibleRange = this.visibleRange;\n    const visibleInCurrentRange = super.canSee(panel);\n\n    if (!this._circularEnabled) {\n      return visibleInCurrentRange;\n    }\n\n    // Check looped visible area for circular case\n    if (visibleRange.min < range.min) {\n      return visibleInCurrentRange || panel.includeRange(visibleRange.min + rangeDiff, visibleRange.max + rangeDiff, false);\n    } else if (visibleRange.max > range.max) {\n      return visibleInCurrentRange || panel.includeRange(visibleRange.min - rangeDiff, visibleRange.max - rangeDiff, false);\n    }\n\n    return visibleInCurrentRange;\n  }\n\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const renderer = flicking.renderer;\n\n    const panels = renderer.panels;\n    if (panels.length <= 0) {\n      this._resetInternalValues();\n      return this;\n    }\n\n    const firstPanel = panels[0]!;\n    const lastPanel = panels[panels.length - 1]!;\n    const firstPanelPrev = firstPanel.range.min - firstPanel.margin.prev;\n    const lastPanelNext = lastPanel.range.max + lastPanel.margin.next;\n\n    const visibleSize = this.size;\n    const panelSizeSum = lastPanelNext - firstPanelPrev;\n\n    const canSetCircularMode = panels\n      .every(panel => panelSizeSum - panel.size >= visibleSize);\n    this._circularEnabled = canSetCircularMode;\n\n    if (canSetCircularMode) {\n      this._range = { min: firstPanelPrev, max: lastPanelNext };\n\n      panels.forEach(panel => panel.updateCircularToggleDirection());\n    } else {\n      this._range = { min: firstPanel.position, max: lastPanel.position };\n    }\n\n    this._updateCircularOffset();\n\n    return this;\n  }\n\n  public async lookAt(pos: number) {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const prevPos = this._position;\n\n    if (pos === prevPos) return await super.lookAt(pos);\n\n    const panels = flicking.renderer.panels;\n    const toggled = panels.map(panel => panel.toggle(prevPos, pos));\n\n    this._position = pos;\n\n    if (toggled.some(isToggled => isToggled)) {\n      this._updateCircularOffset();\n      await flicking.renderer.render();\n    }\n\n    return await super.lookAt(pos);\n  }\n\n  protected _applyTransform(): void {\n    const el = this._el;\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n\n    const actualPosition = this._position - this._alignPos - this._offset + this._circularOffset;\n\n    el.style[this._transform] = flicking.horizontal\n      ? `translate(${-actualPosition}px)`\n      : `translate(0, ${-actualPosition}px)`;\n  }\n\n  protected _resetInternalValues() {\n    super._resetInternalValues();\n    this._circularOffset = 0;\n    this._circularEnabled = false;\n  }\n\n  private _calcPanelAreaSum(panels: Panel[]) {\n    return panels.reduce((sum: number, panel: Panel) => sum + panel.sizeIncludingMargin, 0);\n  }\n\n  private _updateCircularOffset() {\n    if (!this._circularEnabled) {\n      this._circularOffset = 0;\n      return;\n    }\n\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const toggledPrev: Panel[] = [];\n    const toggledNext: Panel[] = [];\n\n    flicking.panels\n      .filter(panel => panel.toggled)\n      .forEach(panel => {\n        if (panel.toggleDirection === DIRECTION.PREV) {\n          toggledPrev.push(panel);\n        } else {\n          toggledNext.push(panel);\n        }\n      });\n\n    this._circularOffset = this._calcPanelAreaSum(toggledPrev) - this._calcPanelAreaSum(toggledNext);\n  }\n}\n\nexport default CircularCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport { getFlickingAttached } from \"../utils\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A {@link Camera} that set range not to go out of the first/last panel, so it won't show empty spaces before/after the first/last panel\n * @ko 첫번째와 마지막 패널 밖으로 넘어가지 못하도록 범위를 설정하여, 첫번째/마지막 패널 전/후의 빈 공간을 보이지 않도록 하는 종류의 {@link Camera}\n */\nclass BoundCamera extends Camera {\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const renderer = flicking.renderer;\n    const alignPos = this._alignPos;\n\n    const firstPanel = renderer.getPanel(0);\n    const lastPanel = renderer.getPanel(renderer.panelCount - 1);\n\n    if (!firstPanel || !lastPanel) {\n      this._range = { min: 0, max: 0 };\n      return this;\n    }\n\n    const viewportSize = this.size;\n    const firstPanelPrev = firstPanel.range.min;\n    const lastPanelNext = lastPanel.range.max;\n    const panelAreaSize = lastPanelNext - firstPanelPrev;\n    const canSetBoundMode = viewportSize < panelAreaSize;\n\n    if (canSetBoundMode) {\n      this._range = { min: firstPanelPrev + alignPos, max: lastPanelNext - viewportSize + alignPos };\n    } else {\n      this._range = { min: firstPanel.position, max: lastPanel.position };\n    }\n\n    return this;\n  }\n\n  public updateAnchors(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    if (panels.length <= 0) {\n      this._anchors = [];\n      return this;\n    }\n\n    const range = this._range;\n    const reachablePanels = panels.filter(panel => this.canReach(panel));\n\n    if (reachablePanels.length > 0) {\n      const shouldPrependBoundAnchor = reachablePanels[0].position !== range.min;\n      const shouldAppendBoundAnchor = reachablePanels[reachablePanels.length - 1].position !== range.max;\n      const indexOffset = shouldPrependBoundAnchor ? 1 : 0;\n\n      const newAnchors = reachablePanels.map((panel, idx) => new AnchorPoint({\n        index: idx + indexOffset,\n        position: panel.position,\n        panel\n      }));\n\n      if (shouldPrependBoundAnchor) {\n        newAnchors.splice(0, 0, new AnchorPoint({\n          index: 0,\n          position: range.min,\n          panel: panels[reachablePanels[0].index - 1]\n        }));\n      }\n\n      if (shouldAppendBoundAnchor) {\n        newAnchors.push(new AnchorPoint({\n          index: newAnchors.length,\n          position: range.max,\n          panel: panels[reachablePanels[reachablePanels.length - 1].index + 1]\n        }));\n      }\n\n      this._anchors = newAnchors;\n    } else if (range.min !== range.max) {\n      // There're more than 2 panels\n      const nearestPanelAtMin = this._findNearestPanel(range.min, panels);\n      const panelAtMin = nearestPanelAtMin.index === panels.length - 1\n        ? nearestPanelAtMin.prev()!\n        : nearestPanelAtMin;\n      const panelAtMax = panelAtMin.next()!;\n\n      this._anchors = [\n        new AnchorPoint({\n          index: 0,\n          position: range.min,\n          panel: panelAtMin\n        }),\n        new AnchorPoint({\n          index: 1,\n          position: range.max,\n          panel: panelAtMax\n        })\n      ];\n    } else {\n      this._anchors = [new AnchorPoint({\n        index: 0,\n        position: range.min,\n        panel: this._findNearestPanel(range.min, panels)\n      })];\n    }\n\n    return this;\n  }\n\n  private _findNearestPanel(pos: number, panels: Panel[]): Panel {\n    let prevDist = Infinity;\n    for (let panelIdx = 0; panelIdx < panels.length; panelIdx++) {\n      const panel = panels[panelIdx];\n      const dist = Math.abs(panel.position - pos);\n\n      if (dist > prevDist) {\n        // Return previous anchor\n        return panels[panelIdx - 1];\n      }\n\n      prevDist = dist;\n    }\n\n    // Return last anchor\n    return panels[panels.length - 1];\n  }\n}\n\nexport default BoundCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\n\nimport RenderingStrategy from \"./RenderingStrategy\";\n\nclass RawRenderingStrategy implements RenderingStrategy {\n  public updateRenderingPanels(flicking: Flicking) {\n    // RawRenderingStrategy always renders all panel elements\n    flicking.panels.forEach(panel => panel.markForShow());\n  }\n}\n\nexport default RawRenderingStrategy;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking, { FlickingOptions } from \"../Flicking\";\nimport Panel, { PanelOptions } from \"../core/panel/Panel\";\nimport { ALIGN, EVENTS } from \"../const/external\";\nimport { getFlickingAttached, getMinusCompensatedIndex, includes } from \"../utils\";\n\nimport RenderingStrategy from \"./RenderingStrategy/RenderingStrategy\";\nimport RawRenderingStrategy from \"./RenderingStrategy/RawRenderingStrategy\";\n\nexport interface RendererOptions {\n  align: FlickingOptions[\"align\"];\n  strategy: RenderingStrategy;\n}\n\n/**\n * A component that manages {@link Panel} and its elements\n * @ko {@link Panel}과 그 엘리먼트들을 관리하는 컴포넌트\n */\nabstract class Renderer {\n  // Internal States\n  protected _flicking: Flicking | null;\n  protected _panels: Panel[];\n  protected _renderingStrategy: RenderingStrategy;\n\n  // Options\n  protected _align: RendererOptions[\"align\"];\n\n  // Internal states Getter\n  /**\n   * Array of panels\n   * @ko 전체 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get panels() { return this._panels; }\n  /**\n   * Count of panels\n   * @ko 전체 패널의 개수\n   * @type {number}\n   * @readonly\n   */\n  public get panelCount() { return this._panels.length; }\n\n  // Options Getter\n  /**\n   * A {@link Panel}'s {@link Panel#align align} value that applied to all panels\n   * @ko {@link Panel}에 공통적으로 적용할 {@link Panel#align align} 값\n   * @type {Constants.ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Setter\n  public set align(val: RendererOptions[\"align\"]) {\n    this._align = val;\n\n    const panelAlign = this._getPanelAlign();\n    this._panels.forEach(panel => { panel.align = panelAlign; });\n  }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An {@link Flicking#align align} value that will be applied to all panels<ko>전체 패널에 적용될 {@link Flicking#align align} 값</ko>\n   */\n  public constructor({\n    align = ALIGN.CENTER,\n    strategy = new RawRenderingStrategy()\n  }: Partial<RendererOptions> = {}) {\n    this._align = align;\n    this._flicking = null;\n    this._renderingStrategy = strategy;\n    this._panels = [];\n  }\n\n  /**\n   * Render panel elements inside the camera element\n   * @ko 패널 엘리먼트들을 카메라 엘리먼트 내부에 렌더링합니다\n   * @method\n   * @abstract\n   * @memberof Renderer\n   * @instance\n   * @name render\n   * @chainable\n   * @return {this}\n   */\n  public abstract render(): Promise<void>;\n  public abstract forceRenderAllPanels(): Promise<void>;\n\n  protected abstract _collectPanels(): void;\n  protected abstract _createPanel(el: any, options: PanelOptions): Panel;\n  protected abstract _insertPanelElements(panels: Panel[], nextSibling: Panel | null): void;\n  protected abstract _removePanelElements(panels: Panel[]): void;\n\n  /**\n   * Initialize Renderer\n   * @ko Renderer를 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n    this._collectPanels();\n\n    return this;\n  }\n\n  /**\n   * Destroy Renderer and return to initial state\n   * @ko Renderer를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this._flicking = null;\n    this._panels = [];\n  }\n\n  /**\n   * Return the {@link Panel} at the given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.\n   * @return {Panel | null} Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>\n   * @see Panel\n   */\n  public getPanel(index: number): Panel | null {\n    return this._panels[index] || null;\n  }\n\n  /**\n   * Update all panel sizes\n   * @ko 모든 패널의 크기를 업데이트합니다\n   * @chainable\n   * @return {this}\n   */\n  public updatePanelSize(): this {\n    this._panels.forEach(panel => panel.resize());\n    return this;\n  }\n\n  /**\n   * Insert new panels at given index\n   * This will increase index of panels after by the number of panels added\n   * @ko 주어진 인덱스에 새로운 패널들을 추가합니다\n   * 해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.\n   * @param {number} index Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>\n   * @param {any[]} elements An array of element or framework component with element in it<ko>엘리먼트의 배열 혹은 프레임워크에서 엘리먼트를 포함한 컴포넌트들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   */\n  public batchInsert(...items: Array<{\n    index: number;\n    elements: any[];\n  }>): Panel[] {\n    const panels = this._panels;\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    const { control } = flicking;\n    const align = this._getPanelAlign();\n\n    const allPanelsInserted = items.reduce((addedPanels, item) => {\n      const insertingIdx = getMinusCompensatedIndex(item.index, panels.length);\n      const panelsPushed = panels.slice(insertingIdx);\n      const panelsInserted = item.elements.map(el => this._createPanel(el, { index: insertingIdx, align, flicking }));\n\n      panels.splice(insertingIdx, 0, ...panelsInserted);\n\n      // Resize the newly added panels\n      panelsInserted.forEach(panel => panel.resize());\n\n      const insertedSize = this._getPanelSizeSum(panelsInserted);\n\n      // Update panel indexes & positions\n      panelsPushed.forEach(panel => {\n        panel.increaseIndex(panelsInserted.length);\n        panel.increasePosition(insertedSize);\n      });\n\n      // Insert the actual elements as camera element's children\n      this._insertPanelElements(panelsInserted, panelsPushed[0] ?? null);\n\n      return [...addedPanels, ...panelsInserted];\n    }, []);\n\n    if (allPanelsInserted.length <= 0) return [];\n\n    // Update camera & control\n    this._updateCameraAndControl();\n\n    void this.render();\n\n    // Move to the first panel added if no panels existed\n    // FIXME: fix for animating case\n    if (allPanelsInserted.length > 0 && !control.animating) {\n      void control.moveToPanel(control.activePanel || allPanelsInserted[0], {\n        duration: 0\n      }).catch(() => void 0);\n    }\n\n    flicking.camera.updateOffset();\n\n    flicking.trigger(new ComponentEvent(EVENTS.PANEL_CHANGE, {\n      added: allPanelsInserted,\n      removed: []\n    }));\n\n    return allPanelsInserted;\n  }\n\n  /**\n   * Remove the panel at the given index\n   * This will decrease index of panels after by the number of panels removed\n   * @ko 주어진 인덱스의 패널을 제거합니다\n   * 해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다\n   * @param {number} index Index of panel to remove<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>\n   * @return An array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public batchRemove(...items: Array<{ index: number; deleteCount: number }>): Panel[] {\n    const panels = this._panels;\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    const { camera, control } = flicking;\n    const activePanel = control.activePanel;\n    const activeIndex = control.activeIndex;\n\n    const allPanelsRemoved = items.reduce((removed, item) => {\n      const { index, deleteCount } = item;\n      const removingIdx = getMinusCompensatedIndex(index, panels.length);\n\n      const panelsPulled = panels.slice(removingIdx + deleteCount);\n      const panelsRemoved = panels.splice(removingIdx, deleteCount);\n\n      if (panelsRemoved.length <= 0) return [];\n\n      // Update panel indexes & positions\n      const removedSize = this._getPanelSizeSum(panelsRemoved);\n      panelsPulled.forEach(panel => {\n        panel.decreaseIndex(panelsRemoved.length);\n        panel.decreasePosition(removedSize);\n      });\n\n      this._removePanelElements(panelsRemoved);\n\n      // Remove panel elements\n      panelsRemoved.forEach(panel => panel.destroy());\n\n      // Update camera & control\n      this._updateCameraAndControl();\n\n      if (includes(panelsRemoved, activePanel)) {\n        control.resetActive();\n      }\n\n      return [...removed, ...panelsRemoved];\n    }, []);\n\n    void this.render();\n\n    // FIXME: fix for animating case\n    if (allPanelsRemoved.length > 0 && !control.animating) {\n      const targetPanel = includes(allPanelsRemoved, activePanel)\n        ? (panels[activeIndex] || panels[panels.length - 1])\n        : activePanel;\n\n      if (targetPanel) {\n        void control.moveToPanel(targetPanel, {\n          duration: 0\n        }).catch(() => void 0);\n      } else {\n        // All panels removed\n        void camera.lookAt(0);\n      }\n    }\n\n    flicking.camera.updateOffset();\n\n    flicking.trigger(new ComponentEvent(EVENTS.PANEL_CHANGE, {\n      added: [],\n      removed: allPanelsRemoved\n    }));\n\n    return allPanelsRemoved;\n  }\n\n  protected _getPanelAlign() {\n    const align = this._align;\n\n    return typeof align === \"object\"\n      ? (align as { panel: string | number }).panel\n      : align;\n  }\n\n  protected _getPanelSizeSum(panels: Panel[]): number {\n    const firstPanel = panels[0];\n    const lastPanel = panels[panels.length - 1];\n\n    const marginDiff = lastPanel.margin.next - firstPanel.margin.prev;\n\n    return (lastPanel.range.max - firstPanel.range.min) + marginDiff;\n  }\n\n  protected _updateCameraAndControl() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const { camera, control } = flicking;\n\n    camera.updateRange();\n    camera.updateAnchors();\n    camera.resetNeedPanelHistory();\n    control.updateInput();\n  }\n}\n\nexport default Renderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\nimport { getProgress, getStyle, parseAlign } from \"../../utils\";\nimport { ALIGN, DIRECTION } from \"../../const/external\";\nimport { LiteralUnion, ValueOf } from \"../../type/internal\";\n\nexport interface PanelOptions {\n  index: number;\n  align: LiteralUnion<ValueOf<typeof ALIGN>> | number;\n  flicking: Flicking;\n}\n\nabstract class Panel {\n  // Internal States\n  protected _flicking: Flicking;\n  protected _index: number;\n  protected _pos: number;\n  protected _size: number;\n  protected _height: number;\n  protected _margin: { prev: number; next: number };\n  protected _alignPos: number; // Actual align pos\n  protected _removed: boolean;\n  protected _toggleDirection: ValueOf<typeof DIRECTION>;\n  protected _toggled: boolean;\n  protected _togglePosition: number;\n\n  // Options\n  protected _align: PanelOptions[\"align\"];\n\n  // Internal States Getter\n  /**\n   * `HTMLElement` that panel's referencing\n   * @ko 패널이 참조하고 있는 `HTMLElement`\n   * @type {HTMLElement}\n   * @readonly\n   */\n  abstract get element(): HTMLElement;\n  /**\n   * Index of the panel\n   * @ko 패널의 인덱스\n   * @type {number}\n   * @readonly\n   */\n  public get index() { return this._index; }\n  /**\n   * Position of the panel, including {@link Panel#alignPosition alignPosition}\n   * @ko 패널의 현재 좌표, {@link Panel#alignPosition alignPosition}을 포함하고 있습니다\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._pos + this._alignPos; }\n  /**\n   * Cached size of the panel element\n   * This is equal to {@link Panel#element element}'s `offsetWidth` if {@link Flicking#horizontal horizontal} is `true`, and `offsetHeight` else\n   * @ko 패널 엘리먼트의 캐시된 크기\n   * 이 값은 {@link Flicking#horizontal horizontal}이 `true`일 경우 {@link Panel#element element}의 `offsetWidth`와 동일하고, `false`일 경우 `offsetHeight`와 동일합니다\n   * @type {number}\n   * @readonly\n   */\n  public get size() { return this._size; }\n  /**\n   * Panel's size including CSS `margin`\n   * This value includes {@link Panel#element element}'s margin left/right if {@link Flicking#horizontal horizontal} is `true`, and margin top/bottom else\n   * @ko CSS `margin`을 포함한 패널의 크기\n   * 이 값은 {@link Flicking#horizontal horizontal}이 `true`일 경우 margin left/right을 포함하고, `false`일 경우 margin top/bottom을 포함합니다\n   * @type {number}\n   * @readonly\n   */\n  public get sizeIncludingMargin() { return this._size + this._margin.prev + this._margin.next; }\n  /**\n   * Height of the panel element\n   * @ko 패널 엘리먼트의 높이\n   * @type {number}\n   * @readonly\n   */\n  public get height() { return this._height; }\n  /**\n   * Cached CSS `margin` value of the panel element\n   * @ko 패널 엘리먼트의 CSS `margin` 값\n   * @type {object}\n   * @property {number} prev CSS `margin-left` when the {@link Flicking#horizontal horizontal} is `true`, and `margin-top` else\n   * <ko>{@link Flicking#horizontal horizontal}이 `true`일 경우 `margin-left`, `false`일 경우 `margin-top`에 해당하는 값</ko>\n   * @property {number} next CSS `margin-right` when the {@link Flicking#horizontal horizontal} is `true`, and `margin-bottom` else\n   * <ko>{@link Flicking#horizontal horizontal}이 `true`일 경우 `margin-right`, `false`일 경우 `margin-bottom`에 해당하는 값</ko>\n   * @readonly\n   */\n  public get margin() { return this._margin; }\n  /**\n   * Align position inside the panel where {@link Camera}'s {@link Camera#alignPosition alignPosition} inside viewport should be located at\n   * @ko 패널의 정렬 기준 위치. {@link Camera}의 뷰포트 내에서의 {@link Camera#alignPosition alignPosition}이 위치해야 하는 곳입니다\n   * @type {number}\n   * @readonly\n   */\n  public get alignPosition() { return this._alignPos; }\n  /**\n   * A value indicating whether the panel's {@link Flicking#remove remove}d\n   * @ko 패널이 {@link Flicking#remove remove}되었는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get removed() { return this._removed; }\n  /**\n   * A value indicating whether the panel's element is being rendered on the screen\n   * @ko 패널의 엘리먼트가 화면상에 렌더링되고있는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract get rendered();\n  /**\n   * Panel element's range of the bounding box\n   * @ko 패널 엘리먼트의 Bounding box 범위\n   * @type {object}\n   * @property {number} [min] Bounding box's left({@link Flicking#horizontal horizontal}: true) / top({@link Flicking#horizontal horizontal}: false)\n   * @property {number} [max] Bounding box's right({@link Flicking#horizontal horizontal}: true) / bottom({@link Flicking#horizontal horizontal}: false)\n   * @readonly\n   */\n  public get range() { return { min: this._pos, max: this._pos + this._size }; }\n  /**\n   * A value indicating whether the panel's position is toggled by circular behavior\n   * @ko 패널의 위치가 circular 동작에 의해 토글되었는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get toggled() { return this._toggled; }\n  /**\n   * A direction where the panel's position is toggled\n   * @ko 패널의 위치가 circular 동작에 의해 토글되는 방향\n   * @type {DIRECTION}\n   * @readonly\n   */\n  public get toggleDirection() { return this._toggleDirection; }\n  /**\n   * Actual position offset determined by {@link Panel#order}\n   * @ko {@link Panel#order}에 의한 실제 위치 변경값\n   * @type {number}\n   * @readonly\n   */\n  public get offset() {\n    const toggleDirection = this._toggleDirection;\n    const cameraRangeDiff = this._flicking.camera.rangeDiff;\n\n    return toggleDirection === DIRECTION.NONE || !this._toggled\n      ? 0\n      : toggleDirection === DIRECTION.PREV\n        ? -cameraRangeDiff\n        : cameraRangeDiff;\n  }\n\n  /**\n   * Progress of movement between previous or next panel relative to current panel\n   * @ko 이 패널로부터 이전/다음 패널으로의 이동 진행률\n   * @type {number}\n   * @readonly\n   */\n  public get progress() {\n    const flicking = this._flicking;\n\n    return this.index - flicking.camera.progress;\n  }\n\n  /**\n   * Progress of movement between points that panel is completely invisible outside of viewport(prev direction: -1, selected point: 0, next direction: 1)\n   * @ko 현재 패널이 뷰포트 영역 밖으로 완전히 사라지는 지점을 기준으로 하는 진행도(prev방향: -1, 선택 지점: 0, next방향: 1)\n   * @type {number}\n   * @readonly\n   */\n  public get outsetProgress() {\n    const position = this.position + this.offset;\n    const alignPosition = this._alignPos;\n    const camera = this._flicking.camera;\n    const camPos = camera.position;\n\n    if (camPos === position) {\n      return 0;\n    }\n\n    if (camPos < position) {\n      const disappearPosNext = position + (camera.size - camera.alignPosition) + alignPosition;\n\n      return -getProgress(camPos, position, disappearPosNext);\n    } else {\n      const disappearPosPrev = position - (camera.alignPosition + this._size - alignPosition);\n\n      return 1 - getProgress(camPos, disappearPosPrev, position);\n    }\n  }\n\n  /**\n   * Percentage of area where panel is visible in the viewport\n   * @ko 뷰포트 안에서 패널이 보이는 영역의 비율\n   * @type {number}\n   * @readonly\n   */\n  public get visibleRatio() {\n    const range = this.range;\n    const size = this._size;\n    const offset = this.offset;\n    const visibleRange = this._flicking.camera.visibleRange;\n\n    const checkingRange = {\n      min: range.min + offset,\n      max: range.max + offset\n    };\n\n    if (checkingRange.max <= visibleRange.min || checkingRange.min >= visibleRange.max) {\n      return 0;\n    }\n\n    let visibleSize = size;\n\n    if (visibleRange.min > checkingRange.min) {\n      visibleSize -= visibleRange.min - checkingRange.min;\n    }\n    if (visibleRange.max < checkingRange.max) {\n      visibleSize -= checkingRange.max - visibleRange.max;\n    }\n\n    return visibleSize / size;\n  }\n\n  // Options Getter\n  /**\n   * A value indicating where the {@link Panel#alignPosition alignPosition} should be located at inside the panel element\n   * @ko {@link Panel#alignPosition alignPosition}이 패널 내의 어디에 위치해야 하는지를 나타내는 값\n   * @type {Constants.ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Getter\n  public set align(val: PanelOptions[\"align\"]) { this._align = val; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor({\n    index,\n    align,\n    flicking\n  }: PanelOptions) {\n    this._index = index;\n    this._flicking = flicking;\n\n    this._align = align;\n\n    this._removed = false;\n    this._resetInternalStates();\n  }\n\n  /**\n   * Mark panel element to be appended on the camera element\n   * @internal\n   */\n  public abstract markForShow();\n\n  /**\n   * Mark panel element to be removed from the camera element\n   * @internal\n   */\n  public abstract markForHide();\n\n  /**\n   * Update size of the panel\n   * @ko 패널의 크기를 갱신합니다\n   * @chainable\n   * @return {this}\n   */\n  public resize(): this {\n    const el = this.element;\n    const elStyle = getStyle(el);\n    const flicking = this._flicking;\n    const horizontal = flicking.horizontal;\n    const prevPanel = flicking.renderer.panels[this._index - 1];\n\n    this._size = horizontal ? el.offsetWidth : el.offsetHeight;\n\n    this._margin = horizontal\n      ? {\n        prev: parseFloat(elStyle.marginLeft || \"0\"),\n        next: parseFloat(elStyle.marginRight || \"0\")\n      } : {\n        prev: parseFloat(elStyle.marginTop || \"0\"),\n        next: parseFloat(elStyle.marginBottom || \"0\")\n      };\n\n    this._pos = prevPanel\n      ? prevPanel.range.max + prevPanel.margin.next + this._margin.prev\n      : this._margin.prev;\n\n    this._height = horizontal ? el.offsetHeight : this._size;\n\n    this._updateAlignPos();\n\n    return this;\n  }\n\n  /**\n   * Check whether the given element is inside of this panel's {@link Panel#element element}\n   * @ko 해당 엘리먼트가 이 패널의 {@link Panel#element element} 내에 포함되어 있는지를 반환합니다\n   * @param {HTMLElement} element The HTMLElement to check<ko>확인하고자 하는 HTMLElement</ko>\n   * @return {boolean} A Boolean value indicating the element is inside of this panel {@link Panel#element element}<ko>패널의 {@link Panel#element element}내에 해당 엘리먼트 포함 여부</ko>\n   */\n  public contains(element: HTMLElement): boolean {\n    return !!this.element?.contains(element);\n  }\n\n  /**\n   * Reset internal state and set {@link Panel#removed removed} to `true`\n   * @ko 내부 상태를 초기화하고 {@link Panel#removed removed}를 `true`로 설정합니다.\n   * @return {void}\n   */\n  public destroy(): void {\n    this._resetInternalStates();\n    this._removed = true;\n  }\n\n  /**\n   * Check whether the given position is inside of this panel's {@link Panel#range range}\n   * @ko 주어진 좌표가 현재 패널의 {@link Panel#range range}내에 속해있는지를 반환합니다.\n   * @param {number} pos A position to check<ko>확인하고자 하는 좌표</ko>\n   * @param {boolean} [includeMargin=false] Include {@link Panel#margin margin} to the range<ko>패널 영역에 {@link Panel#margin margin}값을 포함시킵니다</ko>\n   * @return {boolean} A Boolean value indicating whether the given position is included in the panel range<ko>해당 좌표가 패널 영역 내에 속해있는지 여부</ko>\n   */\n  public includePosition(pos: number, includeMargin: boolean = false): boolean {\n    return this.includeRange(pos, pos, includeMargin);\n  }\n\n  /**\n   * Check whether the given range is fully included in this panel's area\n   * @ko 주어진 범위가 이 패널 내부에 완전히 포함되는지를 반환합니다\n   * @param {number} min Minimum value of the range to check<ko>확인하고자 하는 최소 범위</ko>\n   * @param {number} max Maximum value of the range to check<ko>확인하고자 하는 최대 범위</ko>\n   * @param {boolean} [includeMargin=false] Include {@link Panel#margin margin} to the range<ko>패널 영역에 {@link Panel#margin margin}값을 포함시킵니다</ko>\n   * @returns {boolean} A Boolean value indicating whether the given range is fully included in the panel range<ko>해당 범위가 패널 영역 내에 완전히 속해있는지 여부</ko>\n   */\n  public includeRange(min: number, max: number, includeMargin: boolean = false): boolean {\n    const margin = this._margin;\n    const panelRange = this.range;\n\n    if (includeMargin) {\n      panelRange.min -= margin.prev;\n      panelRange.max += margin.next;\n    }\n\n    return max >= panelRange.min && min <= panelRange.max;\n  }\n\n  /**\n   * Move {@link Camera} to this panel\n   * @ko {@link Camera}를 이 패널로 이동합니다\n   * @param {number} [duration] Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @returns {Promise<void>} A Promise which will be resolved after reaching the panel<ko>패널 도달시에 resolve되는 Promise</ko>\n   */\n  public focus(duration?: number) {\n    return this._flicking.moveTo(this._index, duration);\n  }\n\n  /**\n   * Get previous(`index - 1`) panel. When the previous panel does not exist, this will return `null` instead\n   * If the {@link Flicking#circularEnabled circular} is enabled, this will return the last panel if called from the first panel\n   * @ko 이전(`index - 1`) 패널을 반환합니다. 이전 패널이 없을 경우 `null`을 반환합니다\n   * {@link Flicking#circularEnabled circular} 모드가 활성화되었을 때 첫번째 패널에서 이 메소드를 호출할 경우 마지막 패널을 반환합니다\n   * @returns {Panel | null} The previous panel<ko>이전 패널</ko>\n   */\n  public prev(): Panel | null {\n    const index = this._index;\n    const flicking = this._flicking;\n    const renderer = flicking.renderer;\n    const panelCount = renderer.panelCount;\n\n    if (panelCount === 1) return null;\n\n    return flicking.circularEnabled\n      ? renderer.getPanel(index === 0 ? panelCount - 1 : index - 1)\n      : renderer.getPanel(index - 1);\n  }\n\n  /**\n   * Get next(`index + 1`) panel. When the next panel does not exist, this will return `null` instead\n   * If the {@link Flicking#circularEnabled circular} is enabled, this will return the first panel if called from the last panel\n   * @ko 다음(`index + 1`) 패널을 반환합니다. 다음 패널이 없을 경우 `null`을 반환합니다\n   * {@link Flicking#circularEnabled circular} 모드가 활성화되었을 때 마지막 패널에서 이 메소드를 호출할 경우 첫번째 패널을 반환합니다\n   * @returns {Panel | null} The previous panel<ko>다음 패널</ko>\n   */\n  public next(): Panel | null {\n    const index = this._index;\n    const flicking = this._flicking;\n    const renderer = flicking.renderer;\n    const panelCount = renderer.panelCount;\n\n    if (panelCount === 1) return null;\n\n    return flicking.circularEnabled\n      ? renderer.getPanel(index === panelCount - 1 ? 0 : index + 1)\n      : renderer.getPanel(index + 1);\n  }\n\n  /**\n   * Increase panel's index by the given value\n   * @ko 패널의 인덱스를 주어진 값만큼 증가시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public increaseIndex(val: number): this {\n    this._index += Math.max(val, 0);\n    return this;\n  }\n\n  /**\n   * Decrease panel's index by the given value\n   * @ko 패널의 인덱스를 주어진 값만큼 감소시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public decreaseIndex(val: number): this {\n    this._index -= Math.max(val, 0);\n    return this;\n  }\n\n  /**\n   * Increase panel's position by the given value\n   * @ko 패널의 위치를 주어진 값만큼 증가시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public increasePosition(val: number): this {\n    this._moveBy(Math.max(val, 0));\n    return this;\n  }\n\n  /**\n   * Decrease panel's position by the given value\n   * @ko 패널의위치를 주어진 값만큼 감소시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public decreasePosition(val: number): this {\n    this._moveBy(-Math.max(val, 0));\n    return this;\n  }\n\n  /**\n   * @internal\n   * @return {boolean} toggled\n   */\n  public toggle(prevPos: number, newPos: number): boolean {\n    const toggleDirection = this._toggleDirection;\n    const togglePosition = this._togglePosition;\n\n    if (toggleDirection === DIRECTION.NONE || newPos === prevPos) return false;\n\n    const prevToggled = this._toggled;\n\n    if (newPos > prevPos) {\n      if (togglePosition >= prevPos && togglePosition <= newPos) {\n        this._toggled = toggleDirection === DIRECTION.NEXT;\n      }\n    } else {\n      if (togglePosition <= prevPos && togglePosition >= newPos) {\n        this._toggled = toggleDirection !== DIRECTION.NEXT;\n      }\n    }\n\n    return prevToggled !== this._toggled;\n  }\n\n  /**\n   * @internal\n   */\n  public updateCircularToggleDirection(): this {\n    const flicking = this._flicking;\n\n    if (!flicking.circularEnabled) {\n      this._toggleDirection = DIRECTION.NONE;\n      this._toggled = false;\n      return this;\n    }\n\n    const camera = flicking.camera;\n    const camRange = camera.range;\n    const camAlignPosition = camera.alignPosition;\n    const camVisibleRange = camera.visibleRange;\n    const camVisibleSize = camVisibleRange.max - camVisibleRange.min;\n\n    const minimumVisible = camRange.min - camAlignPosition;\n    const maximumVisible = camRange.max - camAlignPosition + camVisibleSize;\n\n    const shouldBeVisibleAtMin = this.includeRange(maximumVisible - camVisibleSize, maximumVisible, false);\n    const shouldBeVisibleAtMax = this.includeRange(minimumVisible, minimumVisible + camVisibleSize, false);\n\n    this._toggled = false;\n    if (shouldBeVisibleAtMin) {\n      this._toggleDirection = DIRECTION.PREV;\n      this._togglePosition = this.range.max + camRange.min - camRange.max + camAlignPosition;\n      this.toggle(Infinity, camera.position);\n    } else if (shouldBeVisibleAtMax) {\n      this._toggleDirection = DIRECTION.NEXT;\n      this._togglePosition = this.range.min + camRange.max - camVisibleSize + camAlignPosition;\n      this.toggle(-Infinity, camera.position);\n    } else {\n      this._toggleDirection = DIRECTION.NONE;\n      this._togglePosition = 0;\n    }\n\n    return this;\n  }\n\n  private _moveBy(val: number): this {\n    this._pos += val;\n\n    return this;\n  }\n\n  private _updateAlignPos() {\n    this._alignPos = parseAlign(this._align, this._size);\n  }\n\n  private _resetInternalStates() {\n    this._size = 0;\n    this._pos = 0;\n    this._margin = { prev: 0, next: 0 };\n    this._height = 0;\n    this._alignPos = 0;\n    this._toggled = false;\n    this._togglePosition = 0;\n    this._toggleDirection = DIRECTION.NONE;\n  }\n}\n\nexport default Panel;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel, { PanelOptions } from \"./Panel\";\n\nexport interface ElementPanelOptions extends PanelOptions {\n  el: HTMLElement;\n}\n\n/**\n * An slide data component that holds information of a single HTMLElement\n * @ko 슬라이드 데이터 컴포넌트로, 단일 HTMLElement의 정보를 갖고 있습니다\n */\nclass ElementPanel extends Panel {\n  private _el: HTMLElement;\n  private _rendered: boolean;\n\n  /**\n   * `HTMLElement` that panel's referencing\n   * @ko 패널이 참조하고 있는 `HTMLElement`\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n\n  public get rendered() { return this._rendered; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {HTMLElement} [options.el] A `HTMLElement` panel's referencing<ko>패널이 참조하는 `HTMLElement`</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor(options: ElementPanelOptions) {\n    super(options);\n\n    this._el = options.el;\n    this._rendered = true;\n  }\n\n  public markForShow() {\n    this._rendered = true;\n  }\n\n  public markForHide() {\n    this._rendered = false;\n  }\n}\n\nexport default ElementPanel;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getFlickingAttached, toArray } from \"../utils\";\nimport Panel, { PanelOptions } from \"../core/panel/Panel\";\nimport ElementPanel from \"../core/panel/ElementPanel\";\n\nimport Renderer from \"./Renderer\";\n\n/**\n *\n */\nclass VanillaRenderer extends Renderer {\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async render() {\n    const strategy = this._renderingStrategy;\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraEl = flicking.camera.element;\n    const wasRenderedPanels = this._panels.filter(panel => panel.element.parentElement === cameraEl);\n\n    strategy.updateRenderingPanels(flicking);\n    const renderingPanels = this._getRenderingPanelsByOrder();\n\n    this._removePanelElements(wasRenderedPanels.filter(panel => !panel.rendered));\n    this._insertPanelElements(renderingPanels.filter(panel => panel.element.parentElement !== cameraEl), null);\n    this._resetPanelElementOrder(renderingPanels);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async forceRenderAllPanels() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const camera = flicking.camera;\n    const cameraElement = camera.element;\n    const fragment = document.createDocumentFragment();\n\n    this._panels.forEach(panel => fragment.appendChild(panel.element));\n\n    this._removeAllChildsFromCamera();\n\n    cameraElement.appendChild(fragment);\n  }\n\n  protected _collectPanels() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    const cameraElement = flicking.camera.element;\n\n    // Remove all text nodes in the camera element\n    toArray(cameraElement.childNodes).forEach(node => {\n      if (node.nodeType === Node.TEXT_NODE) {\n        cameraElement.removeChild(node);\n      }\n    });\n\n    const align = this._getPanelAlign();\n    const cameraChilds = toArray(cameraElement.children);\n\n    this._panels = cameraChilds.map(\n      (el: HTMLElement, index: number) => new ElementPanel({ flicking, el, index, align })\n    );\n  }\n\n  protected _createPanel(el: HTMLElement, options: PanelOptions): ElementPanel {\n    return new ElementPanel({ el, ...options });\n  }\n\n  protected _insertPanelElements(panels: Panel[], nextSibling: Panel | null) {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const camera = flicking.camera;\n    const cameraElement = camera.element;\n    const nextSiblingElement = nextSibling?.element || null;\n    const fragment = document.createDocumentFragment();\n\n    panels.forEach(panel => fragment.appendChild(panel.element));\n    cameraElement.insertBefore(fragment, nextSiblingElement);\n\n    return this;\n  }\n\n  protected _removePanelElements(panels: Panel[]): this {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraElement = flicking.camera.element;\n\n    panels.forEach(panel => {\n      cameraElement.removeChild(panel.element);\n    });\n\n    return this;\n  }\n\n  private _resetPanelElementOrder(panels: Panel[]) {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraEl = flicking.camera.element;\n\n    // We're using reversed panels here as last panel should be the last element of camera element\n    const reversedPanels = [...panels].reverse();\n    reversedPanels.forEach((panel, idx) => {\n      const nextPanel = reversedPanels[idx - 1];\n      const nextPanelEl = nextPanel ? nextPanel.element : null;\n\n      if (panel.element.nextElementSibling !== nextPanelEl) {\n        cameraEl.insertBefore(panel.element, nextPanelEl);\n      }\n    });\n  }\n\n  private _removeAllChildsFromCamera() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraElement = flicking.camera.element;\n\n    // Remove other elements\n    while (cameraElement.firstChild) {\n      cameraElement.removeChild(cameraElement.firstChild);\n    }\n  }\n\n  private _getRenderingPanelsByOrder(): Panel[] {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const panels = flicking.renderer.panels;\n\n    return panels.filter(panel => panel.rendered)\n      .sort((a, b) => (a.position + a.offset) - (b.position + b.offset));\n  }\n}\n\nexport default VanillaRenderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\n\nimport Renderer from \"./Renderer\";\n\n/**\n *\n */\nabstract class ExternalRenderer extends Renderer {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _insertPanelElements(panels: Panel[], nextSibling: Panel | null): void {\n    // DO NOTHING\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _removePanelElements(panels: Panel[]): void {\n    // DO NOTHING\n  }\n}\n\nexport default ExternalRenderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\n\nimport RenderingStrategy from \"./RenderingStrategy\";\n\nclass VisibleRenderingStrategy implements RenderingStrategy {\n  public updateRenderingPanels(flicking: Flicking) {\n    const panels = flicking.renderer.panels;\n    const camera = flicking.camera;\n\n    const visibleIndexes = camera.visiblePanels.reduce((visibles, panel) => {\n      visibles[panel.index] = true;\n      return visibles;\n    }, {});\n\n    panels.forEach(panel => {\n      if (panel.index in visibleIndexes) {\n        panel.markForShow();\n      } else if (!flicking.holding) {\n        // During the input sequence,\n        // Do not remove panel elements as it won't trigger touchend event.\n        panel.markForHide();\n      }\n    });\n\n    camera.updateOffset();\n  }\n}\n\nexport default VisibleRenderingStrategy;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nimport FlickingError from \"./core/FlickingError\";\nimport Viewport from \"./core/Viewport\";\nimport { Panel } from \"./core/panel\";\nimport { Control, SnapControl, FreeControl, StrictControl, FreeControlOptions, StrictControlOptions } from \"./control\";\nimport { BoundCamera, Camera, CircularCamera, LinearCamera } from \"./camera\";\nimport { Renderer, VanillaRenderer, ExternalRenderer, RawRenderingStrategy, VisibleRenderingStrategy } from \"./renderer\";\nimport { EVENTS, ALIGN, MOVE_TYPE, DIRECTION } from \"./const/external\";\nimport * as ERROR from \"./const/error\";\nimport { findIndex, getElement, includes, parseElement } from \"./utils\";\nimport { HoldStartEvent, HoldEndEvent, MoveStartEvent, SelectEvent, MoveEvent, MoveEndEvent, WillChangeEvent, WillRestoreEvent, NeedPanelEvent, VisibleChangeEvent, ReachEdgeEvent, ReadyEvent, AfterResizeEvent, BeforeResizeEvent, ChangedEvent, RestoredEvent, PanelChangeEvent } from \"./type/event\";\nimport { LiteralUnion, ValueOf } from \"./type/internal\";\nimport { ElementLike, Plugin, Status, MoveTypeOptions } from \"./type/external\";\n\n/**\n * @interface\n */\nexport interface FlickingEvents {\n  [EVENTS.READY]: ReadyEvent;\n  [EVENTS.BEFORE_RESIZE]: BeforeResizeEvent;\n  [EVENTS.AFTER_RESIZE]: AfterResizeEvent;\n  [EVENTS.HOLD_START]: HoldStartEvent;\n  [EVENTS.HOLD_END]: HoldEndEvent;\n  [EVENTS.MOVE_START]: MoveStartEvent;\n  [EVENTS.MOVE]: MoveEvent;\n  [EVENTS.MOVE_END]: MoveEndEvent;\n  [EVENTS.WILL_CHANGE]: WillChangeEvent;\n  [EVENTS.CHANGED]: ChangedEvent;\n  [EVENTS.WILL_RESTORE]: WillRestoreEvent;\n  [EVENTS.RESTORED]: RestoredEvent;\n  [EVENTS.SELECT]: SelectEvent;\n  [EVENTS.NEED_PANEL]: NeedPanelEvent;\n  [EVENTS.VISIBLE_CHANGE]: VisibleChangeEvent;\n  [EVENTS.REACH_EDGE]: ReachEdgeEvent;\n  [EVENTS.PANEL_CHANGE]: PanelChangeEvent;\n}\n\n/**\n * @interface\n */\nexport interface FlickingOptions {\n  // UI / LAYOUT\n  align: LiteralUnion<ValueOf<typeof ALIGN>> | number | { panel: number | string; camera: number | string };\n  defaultIndex: number;\n  horizontal: boolean;\n  circular: boolean;\n  bound: boolean;\n  adaptive: boolean;\n  // EVENT\n  needPanelThreshold: number;\n  preventEventsBeforeInit: boolean;\n  // ANIMATION\n  deceleration: number;\n  duration: number;\n  easing: (x: number) => number;\n  // INPUT\n  inputType: string[];\n  moveType: ValueOf<typeof MOVE_TYPE> | MoveTypeOptions<ValueOf<typeof MOVE_TYPE>>;\n  threshold: number;\n  interruptable: boolean;\n  bounce: number | string | [number | string, number | string];\n  iOSEdgeSwipeThreshold: number;\n  preventClickOnDrag: boolean;\n  disableOnInit: boolean;\n  // PERFORMANCE\n  renderOnlyVisible: boolean;\n  // OTHERS\n  autoInit: boolean;\n  autoResize: boolean;\n  renderExternal: {\n    renderer: typeof ExternalRenderer;\n    rendererOptions: {[key: string]: any};\n  } | null;\n}\n\n/**\n * @extends Component\n * @support {\"ie\": \"9+(with polyfill)\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|@egjs/component}\n * @requires {@link https://github.com/naver/egjs-axes|@egjs/axes}\n */\nclass Flicking extends Component<FlickingEvents> {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @type {string}\n   * @readonly\n   * @example\n   * ```ts\n   * Flicking.VERSION;  // ex) 4.0.0\n   * ```\n   */\n  public static VERSION = \"#__VERSION__#\";\n\n  // Core components\n  private _viewport: Viewport;\n  private _camera: Camera;\n  private _control: Control;\n  private _renderer: Renderer;\n\n  // Options\n  private _align: FlickingOptions[\"align\"];\n  private _defaultIndex: FlickingOptions[\"defaultIndex\"];\n  private _horizontal: FlickingOptions[\"horizontal\"];\n  private _circular: FlickingOptions[\"circular\"];\n  private _bound: FlickingOptions[\"bound\"];\n  private _adaptive: FlickingOptions[\"adaptive\"];\n  private _needPanelThreshold: FlickingOptions[\"needPanelThreshold\"];\n  private _preventEventsBeforeInit: FlickingOptions[\"preventEventsBeforeInit\"];\n  private _deceleration: FlickingOptions[\"deceleration\"];\n  private _duration: FlickingOptions[\"duration\"];\n  private _easing: FlickingOptions[\"easing\"];\n  private _inputType: FlickingOptions[\"inputType\"];\n  private _moveType: FlickingOptions[\"moveType\"];\n  private _threshold: FlickingOptions[\"threshold\"];\n  private _interruptable: FlickingOptions[\"interruptable\"];\n  private _bounce: FlickingOptions[\"bounce\"];\n  private _iOSEdgeSwipeThreshold: FlickingOptions[\"iOSEdgeSwipeThreshold\"];\n  private _preventClickOnDrag: FlickingOptions[\"preventClickOnDrag\"];\n  private _disableOnInit: FlickingOptions[\"disableOnInit\"];\n  private _renderOnlyVisible: FlickingOptions[\"renderOnlyVisible\"];\n  private _autoResize: FlickingOptions[\"autoResize\"];\n  private _autoInit: FlickingOptions[\"autoInit\"];\n  private _renderExternal: FlickingOptions[\"renderExternal\"];\n\n  // Internal State\n  private _initialized: boolean;\n  private _plugins: Plugin[];\n\n  // Components\n  /**\n   * {@link Control} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Control} 인스턴스\n   * @type {Control}\n   * @default SnapControl\n   * @readonly\n   * @see Control\n   * @see SnapControl\n   * @see FreeControl\n   */\n  public get control() { return this._control; }\n  /**\n   * {@link Camera} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Camera} 인스턴스\n   * @type {Camera}\n   * @default LinearCamera\n   * @readonly\n   * @see Camera\n   * @see LinearCamera\n   * @see BoundCamera\n   * @see CircularCamera\n   */\n  public get camera() { return this._camera; }\n  /**\n   * {@link Renderer} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Renderer} 인스턴스\n   * @type {Renderer}\n   * @default VanillaRenderer\n   * @readonly\n   * @see Renderer\n   * @see VanillaRenderer\n   * @see ExternalRenderer\n   */\n  public get renderer() { return this._renderer; }\n  /**\n   * A component that manages viewport size\n   * @ko 뷰포트 크기 정보를 담당하는 컴포넌트\n   * @type {Viewport}\n   * @readonly\n   * @see Viewport\n   */\n  public get viewport() { return this._viewport; }\n  // Internal States\n  /**\n   * Whether Flicking's {@link Flicking#init init()} is called.\n   * This is `true` when {@link Flicking#init init()} is called, and is `false` after calling {@link Flicking#destroy destroy()}.\n   * @ko Flicking의 {@link Flicking#init init()}이 호출되었는지를 나타내는 멤버 변수.\n   * 이 값은 {@link Flicking#init init()}이 호출되었으면 `true`로 변하고, {@link Flicking#destroy destroy()}호출 이후에 다시 `false`로 변경됩니다.\n   * @type {boolean}\n   * @default false\n   * @readonly\n   */\n  public get initialized() { return this._initialized; }\n  /**\n   * Whether the `circular` option is enabled.\n   * The {@link Flicking#circular circular} option can't be enabled when sum of the panel sizes are too small.\n   * @ko {@link Flicking#circular circular} 옵션이 활성화되었는지 여부를 나타내는 멤버 변수.\n   * {@link Flicking#circular circular} 옵션은 패널의 크기의 합이 충분하지 않을 경우 비활성화됩니다.\n   * @type {boolean}\n   * @default false\n   * @readonly\n   */\n  public get circularEnabled() { return this._camera.controlParams.circular; }\n  /**\n   * Index number of the {@link Flicking#currentPanel currentPanel}\n   * @ko {@link Flicking#currentPanel currentPanel}의 인덱스 번호\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get index() { return this._control.activeIndex; }\n  /**\n   * The root(`.flicking-viewport`) element\n   * @ko root(`.flicking-viewport`) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._viewport.element; }\n  /**\n   * Currently active panel\n   * @ko 현재 선택된 패널\n   * @type {Panel}\n   * @readonly\n   * @see Panel\n   */\n  public get currentPanel() { return this._control.activePanel; }\n  /**\n   * Array of panels\n   * @ko 전체 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get panels() { return this._renderer.panels; }\n  /**\n   * Count of panels\n   * @ko 전체 패널의 개수\n   * @type {number}\n   * @readonly\n   */\n  public get panelCount() { return this._renderer.panelCount; }\n  /**\n   * Array of panels that is visible at the current position\n   * @ko 현재 보이는 패널의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get visiblePanels() { return this._camera.visiblePanels; }\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get animating() { return this._control.animating; }\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get holding() { return this._control.holding; }\n  /**\n   * A current list of activated plugins\n   * @ko 현재 활성화된 플러그인 목록\n   * @type {Plugin[]}\n   * @readonly\n   */\n  public get activePlugins() { return this._plugins; }\n\n  // Options Getter\n  // UI / LAYOUT\n  /**\n   * Align position of the panels within viewport. You can set different values each for the panel and camera\n   * @ko 뷰포트 내에서 패널 정렬방식을 설정하는 옵션. 카메라와 패널 개별로 옵션을 설정할 수도 있습니다\n   * @type {ALIGN | string | number | { panel: string | number, camera: string | number }}\n   * @property {ALIGN | string | number} panel The align value for each {@link Panel}s<ko>개개의 {@link Panel}에 적용할 값</ko>\n   * @property {ALIGN | string | number} camera The align value for {@link Camera}<ko>{@link Camera}에 적용할 값</ko>\n   * @default \"center\"\n   * @example\n   * ```ts\n   * const possibleOptions = [\n   *   // Literal strings\n   *   \"prev\", \"center\", \"next\",\n   *   // % values, applied to both panel & camera\n   *   \"0%\", \"25%\", \"42%\",\n   *   // px values, arithmetic calculation with (+/-) is also allowed.\n   *   \"0px\", \"100px\", \"50% - 25px\",\n   *   // numbers, same to number + px (\"0px\", \"100px\")\n   *   0, 100, 1000,\n   *   // Setting a different value for panel & camera\n   *   { panel: \"10%\", camera: \"25%\" }\n   * ];\n   *\n   * possibleOptions.forEach(align => {\n   *   new Flicking(\"#el\", { align });\n   * });\n   * ```\n   */\n  public get align() { return this._align; }\n  /**\n   * Index of the panel to move when Flicking's {@link Flicking#init init()} is called. A zero-based integer\n   * @ko Flicking의 {@link Flicking#init init()}이 호출될 때 이동할 디폴트 패널의 인덱스로, 0부터 시작하는 정수입니다\n   * @type {number}\n   * @default 0\n   */\n  public get defaultIndex() { return this._defaultIndex; }\n  /**\n   * Direction of panel movement (true: horizontal, false: vertical)\n   * @ko 패널 이동 방향 (true: 가로방향, false: 세로방향)\n   * @type {boolean}\n   * @default true\n   */\n  public get horizontal() { return this._horizontal; }\n  /**\n   * Enables circular(continuous loop) mode, which connects first/last panel for continuous scrolling.\n   * @ko 순환 모드를 활성화합니다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능합니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get circular() { return this._circular; }\n  /**\n   * Prevent the view(camera element) from going out of the first/last panel, so it won't show empty spaces before/after the first/last panel\n   * Only can be enabled when `circular=false`\n   * @ko 뷰(카메라 엘리먼트)가 첫번째와 마지막 패널 밖으로 넘어가지 못하게 하여, 첫번째/마지막 패널 전/후의 빈 공간을 보이지 않도록 하는 옵션입니다\n   * `circular=false`인 경우에만 사용할 수 있습니다\n   * @type {boolean}\n   * @default false\n   */\n  public get bound() { return this._bound; }\n  /**\n   * Update height of the viewport element after movement same to the height of the panel below. This can be only enabled when `horizontal=true`\n   * @ko 이동한 후 뷰포트 엘리먼트의 크기를 현재 패널의 높이와 동일하게 설정합니다. `horizontal=true`인 경우에만 사용할 수 있습니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get adaptive() { return this._adaptive; }\n  // EVENTS\n  /**\n   * A Threshold from viewport edge before triggering `needPanel` event\n   * @ko `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리\n   * @type {number}\n   * @default 0\n   */\n  public get needPanelThreshold() { return this._needPanelThreshold; }\n  /**\n   * When enabled, events are not triggered before `ready` when initializing\n   * @ko 활성화할 경우 초기화시 `ready` 이벤트 이전의 이벤트가 발생하지 않습니다.\n   * @type {boolean}\n   * @default true\n   */\n  public get preventEventsBeforeInit() { return this._preventEventsBeforeInit; }\n  // ANIMATION\n  /**\n   * Deceleration value for panel movement animation which is triggered by user input. A higher value means a shorter animation time\n   * @ko 사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아집니다\n   * @type {number}\n   * @default 0.0075\n   */\n  public get deceleration() { return this._deceleration; }\n  /**\n   * An easing function applied to the panel movement animation. Default value is `easeOutCubic`\n   * @ko 패널 이동 애니메이션에 적용할 easing 함수. 기본값은 `easeOutCubic`이다\n   * @type {function}\n   * @default x => 1 - Math.pow(1 - x, 3)\n   * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n   */\n  public get easing() { return this._easing; }\n  /**\n   * Default duration of the animation (ms)\n   * @ko 디폴트 애니메이션 재생 시간 (ms)\n   * @type {number}\n   * @default 500\n   */\n  public get duration() { return this._duration; }\n  // INPUT\n  /**\n   * Types of input devices to enable\n   * @ko 활성화할 입력 장치 종류\n   * @type {string[]}\n   * @default [\"touch\", \"mouse\"]\n   * @see {@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Possible values (PanInputOption#inputType)}\n   * <ko>{@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 가능한 값들 (PanInputOption#inputType)}</ko>\n   */\n  public get inputType() { return this._inputType; }\n  /**\n   * Movement style by user input. This will change instance type of {@link Flicking#control}\n   * You can use the values of the constant {@link MOVE_TYPE}\n   * @ko 사용자 입력에 의한 이동 방식. 이 값에 따라 {@link Flicking#control}의 인스턴스 타입이 결정됩니다\n   * 상수 {@link MOVE_TYPE}에 정의된 값들을 이용할 수 있습니다\n   * @type {MOVE_TYPE | Pair<string, object>}\n   * @default \"snap\"\n   * @example\n   * |moveType|control|options|\n   * |:---:|:---:|:---:|\n   * |\"snap\"|{@link SnapControl}||\n   * |\"freeScroll\"|{@link FreeControl}|{@link FreeControlOptions}|\n   *\n   * ```ts\n   * import Flicking, { MOVE_TYPE } from \"@egjs/flicking\";\n   *\n   * const flicking = new Flicking({\n   *   moveType: MOVE_TYPE.SNAP\n   * });\n   * ```\n   *\n   * ```ts\n   * const flicking = new Flicking({\n   *   // If you want more specific settings for the moveType\n   *   // [moveType, options for that moveType]\n   *   // In this case, it's [\"freeScroll\", FreeControlOptions]\n   *   moveType: [MOVE_TYPE.FREE_SCROLL, { stopAtEdge: true }]\n   * });\n   * ```\n   */\n  public get moveType() { return this._moveType; }\n  /**\n   * Movement threshold to change panel (unit: px). It should be dragged above the threshold to change the current panel.\n   * @ko 패널 변경을 위한 이동 임계값 (단위: px). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.\n   * @type {number}\n   * @default 40\n   */\n  public get threshold() { return this._threshold; }\n  /**\n   * Set animation to be interruptable by click/touch.\n   * @ko 사용자의 클릭/터치로 인해 애니메이션을 도중에 멈출 수 있도록 설정합니다.\n   * @type {boolean}\n   * @default true\n   */\n  public get interruptable() { return this._interruptable; }\n  /**\n   * The size value of the bounce area. Only can be enabled when `circular=false`.\n   * You can set different bounce value for prev/next direction by using array.\n   * `number` for px value, and `string` for px, and % value relative to viewport size.\n   * You have to call {@link Control#updateInput} after changing this to take effect.\n   * @ko Flicking이 최대 영역을 넘어서 갈 수 있는 최대 크기. `circular=false`인 경우에만 사용할 수 있습니다.\n   * 배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정할 수 있습니다.\n   * `number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있습니다.\n   * 이 값을 변경시 {@link Control#updateInput}를 호출해야 합니다.\n   * @type {string | number | Array<string | number>}\n   * @default \"20%\"\n   * @example\n   * ```ts\n   * const possibleOptions = [\n   *   // % values, relative to viewport element(\".flicking-viewport\")'s size\n   *   \"0%\", \"25%\", \"42%\",\n   *   // px values, arithmetic calculation with (+/-) is also allowed.\n   *   \"0px\", \"100px\", \"50% - 25px\",\n   *   // numbers, same to number + px (\"0px\", \"100px\")\n   *   0, 100, 1000\n   * ];\n   * ```\n   *\n   * @example\n   * ```ts\n   * const flicking = new Flicking(\"#el\", { bounce: \"20%\" });\n   *\n   * flicking.bounce = \"100%\";\n   * flicking.control.updateInput(); // Call this to update!\n   * ```\n   */\n  public get bounce() { return this._bounce; }\n  /**\n   * Size of the area from the right edge in iOS safari (in px) which enables swipe-back or swipe-forward\n   * @ko iOS Safari에서 swipe를 통한 뒤로가기/앞으로가기를 활성화하는 오른쪽 끝으로부터의 영역의 크기 (px)\n   * @type {number}\n   * @default 30\n   */\n  public get iOSEdgeSwipeThreshold() { return this._iOSEdgeSwipeThreshold; }\n  /**\n   * Automatically prevent `click` event if the user has dragged at least a single pixel on the viewport element\n   * @ko 사용자가 뷰포트 영역을 1픽셀이라도 드래그했을 경우 자동으로 {@link https://developer.mozilla.org/ko/docs/Web/API/Element/click_event click} 이벤트를 취소합니다\n   * @type {boolean}\n   * @default true\n   */\n  public get preventClickOnDrag() { return this._preventClickOnDrag; }\n  /**\n   * Automatically call {@link Flicking#disableInput disableInput()} on initialization\n   * @ko Flicking init시에 {@link Flicking#disableInput disableInput()}을 바로 호출합니다\n   * @type {boolean}\n   * @default false\n   */\n  public get disableOnInit() { return this._disableOnInit; }\n  // PERFORMANCE\n  /**\n   * Whether to render visible panels only. This can dramatically increase performance when there're many panels.\n   * @ko 보이는 패널만 렌더링할지 여부를 설정합니다. 패널이 많을 경우에 퍼포먼스를 크게 향상시킬 수 있습니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get renderOnlyVisible() { return this._renderOnlyVisible; }\n  // OTHERS\n  /**\n   * Call {@link Flicking#init init()} automatically when creating Flicking's instance\n   * @ko Flicking 인스턴스를 생성할 때 자동으로 {@link Flicking#init init()}를 호출합니다\n   * @type {boolean}\n   * @default true\n   * @readonly\n   */\n  public get autoInit() { return this._autoInit; }\n  /**\n   * Attach Flicking's {@link Flicking#resize resize} method to window's resize event.\n   * Flicking will automatically call {@link Flicking#resize resize} window size and orientation change.\n   * @ko Flicking의 {@link Flicking#resize resize} 메소드를 window의 resize 이벤트 핸들러로 등록합니다.\n   * 설정시 window 창 크기 및 orientation 변경에 의해 자동으로 {@link Flicking#resize resize}를 호출합니다.\n   * @type {boolean}\n   * @default true\n   */\n  public get autoResize() { return this._autoResize; }\n  /**\n   * This is an option for the frameworks(React, Vue, Angular, ...). Don't set it as it's automatically managed by Flicking.\n   * @ko 프레임워크(React, Vue, Angular, ...)에서만 사용하는 옵션으로, 자동으로 설정되므로 따로 사용하실 필요 없습니다!\n   * @type {boolean}\n   * @default false\n   * @internal\n   * @readonly\n   */\n  public get renderExternal() { return this._renderExternal; }\n\n  // Options Setter\n  // UI / LAYOUT\n  public set align(val: FlickingOptions[\"align\"]) {\n    this._align = val;\n    this._renderer.align = val;\n    this._camera.align = val;\n  }\n\n  public set defaultIndex(val: FlickingOptions[\"defaultIndex\"]) { this._defaultIndex = val; }\n  public set horizontal(val: FlickingOptions[\"horizontal\"]) { this._horizontal = val; }\n  public set circular(val: FlickingOptions[\"circular\"]) { this._circular = val; }\n  public set bound(val: FlickingOptions[\"bound\"]) { this._bound = val; }\n  public set adaptive(val: FlickingOptions[\"adaptive\"]) { this._adaptive = val; }\n  // EVENTS\n  public set needPanelThreshold(val: FlickingOptions[\"needPanelThreshold\"]) { this._needPanelThreshold = val; }\n  public set preventEventsBeforeInit(val: FlickingOptions[\"preventEventsBeforeInit\"]) { this._preventEventsBeforeInit = val; }\n  // ANIMATION\n  public set deceleration(val: FlickingOptions[\"deceleration\"]) { this._deceleration = val; }\n  public set easing(val: FlickingOptions[\"easing\"]) { this._easing = val; }\n  public set duration(val: FlickingOptions[\"duration\"]) { this._duration = val; }\n  // INPUT\n  public set inputType(val: FlickingOptions[\"inputType\"]) { this._inputType = val; }\n  public set moveType(val: FlickingOptions[\"moveType\"]) { this._moveType = val; }\n  public set threshold(val: FlickingOptions[\"threshold\"]) { this._threshold = val; }\n  public set interruptable(val: FlickingOptions[\"interruptable\"]) { this._interruptable = val; }\n  public set bounce(val: FlickingOptions[\"bounce\"]) { this._bounce = val; }\n  public set iOSEdgeSwipeThreshold(val: FlickingOptions[\"iOSEdgeSwipeThreshold\"]) { this._iOSEdgeSwipeThreshold = val; }\n  public set preventClickOnDrag(val: FlickingOptions[\"preventClickOnDrag\"]) {\n    const prevVal = this._preventClickOnDrag;\n\n    if (val === prevVal) return;\n\n    const controller = this._control.controller;\n\n    if (val) {\n      controller.addPreventClickHandler();\n    } else {\n      controller.removePreventClickHandler();\n    }\n\n    this._preventClickOnDrag = val;\n  }\n\n  public set disableOnInit(val: FlickingOptions[\"disableOnInit\"]) { this._disableOnInit = val; }\n  // PERFORMANCE\n  public set renderOnlyVisible(val: FlickingOptions[\"renderOnlyVisible\"]) { this._renderOnlyVisible = val; }\n  // OTHERS\n  public set autoResize(val: FlickingOptions[\"autoResize\"]) { this._autoResize = val; }\n\n  /**\n   * @param root A root HTMLElement to initialize Flicking on it. When it's a typeof `string`, it should be a css selector string\n   * <ko>Flicking을 초기화할 HTMLElement로, `string` 타입으로 지정시 css 선택자 문자열을 지정해야 합니다.</ko>\n   * @param {object} [options={}] An options object for Flicking.<ko>Flicking에 적용할 옵션 오브젝트</ko>\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE WRONG_TYPE}|When the root is not either string or HTMLElement|\n   * |{@link ERROR_CODE ELEMENT_NOT_FOUND}|When the element with given CSS selector does not exist|\n   * <ko>\n   *\n   * |code|조건|\n   * |---|---|\n   * |{@link ERROR_CODE WRONG_TYPE}|루트 엘리먼트가 string이나 HTMLElement가 아닐 경우|\n   * |{@link ERROR_CODE ELEMENT_NOT_FOUND}|주어진 CSS selector로 엘리먼트를 찾지 못했을 경우|\n   *\n   * </ko>\n   * @example\n   * ```ts\n   * import Flicking from \"@egjs/flicking\";\n   *\n   * // Creating new instance of Flicking with HTMLElement\n   * const flicking = new Flicking(document.querySelector(\".flicking-viewport\"), { circular: true });\n   *\n   * // Creating new instance of Flicking with CSS selector\n   * const flicking2 = new Flicking(\".flicking-viewport\", { circular: true });\n   * ```\n   */\n  public constructor(root: HTMLElement | string, {\n    align = ALIGN.CENTER,\n    defaultIndex = 0,\n    horizontal = true,\n    circular = false,\n    bound = false,\n    adaptive = false,\n    needPanelThreshold = 0,\n    preventEventsBeforeInit = true,\n    deceleration = 0.0075,\n    duration = 500,\n    easing = x => 1 - Math.pow(1 - x, 3),\n    inputType = [\"mouse\", \"touch\"],\n    moveType = \"snap\",\n    threshold = 40,\n    interruptable = true,\n    bounce = \"20%\",\n    iOSEdgeSwipeThreshold = 30,\n    preventClickOnDrag = true,\n    disableOnInit = false,\n    renderOnlyVisible = false,\n    autoInit = true,\n    autoResize = true,\n    renderExternal = null\n  }: Partial<FlickingOptions> = {}) {\n    super();\n\n    // Internal states\n    this._initialized = false;\n    this._plugins = [];\n\n    // Bind options\n    this._align = align;\n    this._defaultIndex = defaultIndex;\n    this._horizontal = horizontal;\n    this._circular = circular;\n    this._bound = bound;\n    this._adaptive = adaptive;\n    this._needPanelThreshold = needPanelThreshold;\n    this._preventEventsBeforeInit = preventEventsBeforeInit;\n    this._deceleration = deceleration;\n    this._duration = duration;\n    this._easing = easing;\n    this._inputType = inputType;\n    this._moveType = moveType;\n    this._threshold = threshold;\n    this._interruptable = interruptable;\n    this._bounce = bounce;\n    this._iOSEdgeSwipeThreshold = iOSEdgeSwipeThreshold;\n    this._preventClickOnDrag = preventClickOnDrag;\n    this._disableOnInit = disableOnInit;\n    this._renderOnlyVisible = renderOnlyVisible;\n    this._autoResize = autoResize;\n    this._autoInit = autoInit;\n    this._renderExternal = renderExternal;\n\n    // Create core components\n    this._viewport = new Viewport(getElement(root));\n    this._renderer = this._createRenderer();\n    this._camera = this._createCamera();\n    this._control = this._createControl();\n\n    this.resize = this.resize.bind(this);\n\n    if (this._autoInit) {\n      void this.init();\n    }\n  }\n\n  /**\n   * Initialize Flicking and move to the default index\n   * This is automatically called on Flicking's constructor when `autoInit` is true(default)\n   * @ko Flicking을 초기화하고, 디폴트 인덱스로 이동합니다\n   * 이 메소드는 `autoInit` 옵션이 true(default)일 경우 Flicking이 생성될 때 자동으로 호출됩니다\n   * @fires Flicking#ready\n   * @return {this}\n   */\n  public async init(): Promise<void> {\n    if (this._initialized) return;\n\n    const camera = this._camera;\n    const renderer = this._renderer;\n    const control = this._control;\n    const originalTrigger = this.trigger;\n    const preventEventsBeforeInit = this._preventEventsBeforeInit;\n\n    camera.init(this);\n    renderer.init(this);\n    control.init(this);\n\n    if (preventEventsBeforeInit) {\n      this.trigger = () => this;\n    }\n\n    await this.resize();\n\n    // Look at initial panel\n    this._moveToInitialPanel();\n\n    if (this._autoResize) {\n      window.addEventListener(\"resize\", this.resize);\n    }\n    if (this._preventClickOnDrag) {\n      control.controller.addPreventClickHandler();\n    }\n    if (this._disableOnInit) {\n      this.disableInput();\n    }\n\n    this._plugins.forEach(plugin => plugin.init(this));\n\n    // Done initializing & emit ready event\n    this._initialized = true;\n    if (preventEventsBeforeInit) {\n      this.trigger = originalTrigger;\n    }\n    this.trigger(new ComponentEvent(EVENTS.READY));\n\n    return;\n  }\n\n  /**\n   * Destroy Flicking and remove all event handlers\n   * @ko Flicking과 하위 컴포넌트들을 초기 상태로 되돌리고, 부착된 모든 이벤트 핸들러를 제거합니다\n   * @return {void}\n   */\n  public destroy(): void {\n    if (!this._initialized) return;\n\n    this.off();\n    window.removeEventListener(\"resize\", this.resize);\n\n    this._control.destroy();\n    this._camera.destroy();\n    this._renderer.destroy();\n\n    this._plugins.forEach(plugin => plugin.destroy());\n\n    this._initialized = false;\n  }\n\n  /**\n   * Move to the previous panel (current index - 1)\n   * @ko 이전 패널로 이동합니다 (현재 인덱스 - 1)\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the panel movement animation (unit: ms)<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the previous panel does not exist|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|이전 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the previous panel<ko>이전 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public prev(duration: number = this._duration): Promise<void> {\n    return this.moveTo(this._control.activePanel?.prev()?.index ?? -1, duration, DIRECTION.PREV);\n  }\n\n  /**\n   * Move to the next panel (current index + 1)\n   * @ko 다음 패널로 이동합니다 (현재 인덱스 + 1)\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the next panel does not exist|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|다음 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the next panel<ko>다음 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public next(duration: number = this._duration) {\n    return this.moveTo(this._control.activePanel?.next()?.index ?? this._renderer.panelCount, duration, DIRECTION.NEXT);\n  }\n\n  /**\n   * Move to the panel with given index\n   * @ko 주어진 인덱스에 해당하는 패널로 이동합니다\n   * @param {number} index The index of the panel to move<ko>이동할 패널의 인덱스</ko>\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {DIRECTION} [direction=DIRECTION.NONE] Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the root is not either string or HTMLElement|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|해당 인덱스를 가진 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public moveTo(index: number, duration: number = this._duration, direction: ValueOf<typeof DIRECTION> = DIRECTION.NONE) {\n    const renderer = this._renderer;\n    const panelCount = renderer.panelCount;\n\n    const panel = renderer.getPanel(index);\n\n    if (!panel) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.INDEX_OUT_OF_RANGE(index, 0, panelCount - 1), ERROR.CODE.INDEX_OUT_OF_RANGE));\n    }\n\n    if (this._control.animating) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.ANIMATION_ALREADY_PLAYING, ERROR.CODE.ANIMATION_ALREADY_PLAYING));\n    }\n\n    return this._control.moveToPanel(panel, {\n      duration,\n      direction\n    });\n  }\n\n  /**\n   * Return the {@link Panel} at the given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.\n   * @return {Panel | null} Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>\n   * @see Panel\n   * @example\n   * ```ts\n   * const panel = flicking.getPanel(0);\n   * // Which is a shorthand to...\n   * const samePanel = flicking.panels[0];\n   * ```\n   */\n  public getPanel(index: number): Panel | null {\n    return this._renderer.getPanel(index);\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @return {this}\n   */\n  public enableInput(): this {\n    this._control.enable();\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @return {this}\n   */\n  public disableInput(): this {\n    this._control.disable();\n    return this;\n  }\n\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to {@link Flicking#setStatus setStatus()}\n   * @ko 현재 상태를 반환합니다. 반환받은 값을 {@link Flicking#setStatus setStatus()} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있습니다\n   * @param {object} options Status retrieving options<ko>Status 반환 옵션</ko>\n   * @param {boolean} [options.index=true] Include current panel index to the returning status. Camera will automatically move to the given index when the {@link Flicking#setStatus setStatus} is called<ko>현재 패널 인덱스를 반환값에 포함시킵니다. {@link Flicking#setStatus setStatus} 호출시 자동으로 해당 인덱스로 카메라를 움직입니다</ko>\n   * @param {boolean} [options.position=true] Include camera position to the returning status. This works only when the {@link Flicking#moveType moveType} is `freeScroll`<ko>카메라의 현재 위치를 반환값에 포함시킵니다. 이 옵션은 {@link Flicking#moveType moveType}이 `freeScroll`일 경우에만 동작합니다</ko>\n   * @param {boolean} [options.includePanelHTML=false] Include panel's `outerHTML` to the returning status<ko>패널의 `outerHTML`을 반환값에 포함시킵니다</ko>\n   * @param {boolean} [options.visiblePanelsOnly=false] Include only {@link Flicking#visiblePanel visiblePanel}'s HTML. This option is available only when the `includePanelHTML` is true\n   * <ko>현재 보이는 패널({@link Flicking#visiblePanel visiblePanel})의 HTML만 반환합니다. `includePanelHTML`이 `true`일 경우에만 동작합니다.</ko>\n   * @return {Partial<Status>} An object with current status value information<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus({\n    index = true,\n    position = true,\n    includePanelHTML = false,\n    visiblePanelsOnly = false\n  }: Partial<{\n    index: boolean;\n    position: boolean;\n    includePanelHTML: boolean;\n    visiblePanelsOnly: boolean;\n  }> = {}): Status {\n    const camera = this._camera;\n    const panels = visiblePanelsOnly ? this.visiblePanels : this.panels;\n\n    const status: Status = {\n      panels: panels.map(panel => {\n        const panelInfo: Status[\"panels\"][0] = { index: panel.index };\n\n        if (includePanelHTML) {\n          panelInfo.html = panel.element.outerHTML;\n        }\n\n        return panelInfo;\n      })\n    };\n\n    if (index) {\n      status.index = this.index;\n    }\n    if (position) {\n      const nearestAnchor = camera.findNearestAnchor(camera.position);\n\n      if (nearestAnchor) {\n        status.position = {\n          panel: nearestAnchor.panel.index,\n          progressInPanel: camera.getProgressInPanel(nearestAnchor.panel)\n        };\n      }\n\n    }\n\n    if (visiblePanelsOnly) {\n      const visiblePanels = this.visiblePanels;\n\n      status.visibleOffset = visiblePanels[0]?.index ?? 0;\n    }\n\n    return status;\n  }\n\n  /**\n   * Restore to the state of the given {@link Status}\n   * @ko 주어진 {@link Status}의 상태로 복원합니다\n   * @param {Partial<Status>} status Status value to be restored. You should use the return value of the {@link Flicking#getStatus getStatus()} method<ko>복원할 상태 값. {@link Flicking#getStatus getStatus()} 메서드의 반환값을 지정하면 됩니다</ko>\n   * @return {void}\n   */\n  public setStatus(status: Status): void {\n    if (!this._initialized) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_INITIALIZED, ERROR.CODE.NOT_INITIALIZED);\n    }\n\n    const {\n      index,\n      position,\n      visibleOffset,\n      panels\n    } = status;\n\n    const renderer = this._renderer;\n    const control = this._control;\n\n    // Can't add/remove panels on external rendering\n    if (panels[0]?.html && !this._renderExternal) {\n      renderer.batchRemove({ index: 0, deleteCount: this.panels.length });\n      renderer.batchInsert({ index: 0, elements: parseElement(panels.map(panel => panel.html!)) });\n    }\n\n    if (index) {\n      const panelIndex = visibleOffset\n        ? index - visibleOffset\n        : index;\n\n      void this.moveTo(panelIndex, 0).catch(() => void 0);\n    }\n\n    if (position && this._moveType === MOVE_TYPE.FREE_SCROLL) {\n      const { panel, progressInPanel } = position;\n      const panelIndex = visibleOffset\n        ? panel - visibleOffset\n        : panel;\n      const panelRange = renderer.panels[panelIndex].range;\n      const newCameraPos = panelRange.min + (panelRange.max - panelRange.min) * progressInPanel;\n\n      void control.moveToPosition(newCameraPos, 0).catch(() => void 0);\n    }\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가합니다\n   * @param {...Plugin} plugins The plugin(s) to add<ko>추가할 플러그인(들)</ko>\n   * @return {this}\n   * @see https://github.com/naver/egjs-flicking-plugins\n   */\n  public addPlugins(...plugins: Plugin[]) {\n    if (this._initialized) {\n      plugins.forEach(item => item.init(this));\n    }\n\n    this._plugins.push(...plugins);\n\n    return this;\n  }\n\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거합니다.\n   * @param {...Plugin} plugin The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {this}\n   * @see https://github.com/naver/egjs-flicking-plugins\n   */\n  public removePlugins(...plugins: Plugin[]) {\n    plugins.forEach(item => {\n      const foundIndex = findIndex(this._plugins, val => val === item);\n\n      if (foundIndex >= 0) {\n        item.destroy();\n        this._plugins.splice(foundIndex, 1);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Update viewport/panel sizes\n   * @ko 패널 및 뷰포트의 크기를 갱신합니다\n   * @method\n   * @fires Flicking#beforeResize\n   * @fires Flicking#afterResize\n   * @return {this}\n   */\n  public async resize(): Promise<void> {\n    const viewport = this._viewport;\n    const renderer = this._renderer;\n    const camera = this._camera;\n    const control = this._control;\n\n    const activePanel = control.activePanel;\n    const prevWidth = viewport.width;\n    const prevHeight = viewport.height;\n    const prevProgressInPanel = activePanel\n      ? camera.getProgressInPanel(activePanel)\n      : 0;\n\n    this.trigger(new ComponentEvent(EVENTS.BEFORE_RESIZE, {\n      width: prevWidth,\n      height: prevHeight,\n      element: viewport.element\n    }));\n\n    viewport.resize();\n    await renderer.forceRenderAllPanels(); // Render all panel elements, to update sizes\n    renderer.updatePanelSize();\n    await renderer.render();\n    camera.updateAlignPos();\n    camera.updateRange();\n    camera.updateAnchors();\n\n    if (control.animating) {\n      // TODO:\n    } else {\n      await control.updatePosition(prevProgressInPanel);\n      control.updateInput();\n    }\n\n    const newWidth = viewport.width;\n    const newHeight = viewport.height;\n    const sizeChanged = newWidth !== prevWidth || newHeight !== prevHeight;\n\n    this.trigger(new ComponentEvent(EVENTS.AFTER_RESIZE, {\n      width: viewport.width,\n      height: viewport.height,\n      prev: {\n        width: prevWidth,\n        height: prevHeight\n      },\n      sizeChanged,\n      element: viewport.element\n    }));\n  }\n\n  /**\n   * Add new panels after the last panel\n   * @ko 패널 목록의 제일 끝에 새로운 패널들을 추가합니다\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of appended panels<ko>추가된 패널들의 배열</ko>\n   * @see Panel\n   * @see ElementLike\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new Flicking(\"#flick\");\n   * // These are possible parameters\n   * flicking.append(document.createElement(\"div\"));\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\");\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public append(element: ElementLike | ElementLike[]): Panel[] {\n    return this.insert(this._renderer.panelCount, element);\n  }\n\n  /**\n   * Add new panels before the first panel\n   * This will increase index of panels after by the number of panels added\n   * @ko 패널 목록의 제일 앞(index 0)에 새로운 패널들을 추가합니다\n   * 추가한 패널의 개수만큼 기존 패널들의 인덱스가 증가합니다.\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   * @see Panel\n   * @see ElementLike\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.prepend(document.createElement(\"div\"));\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\");\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.prepend(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public prepend(element: ElementLike | ElementLike[]): Panel[] {\n    return this.insert(0, element);\n  }\n\n  /**\n   * Insert new panels at given index\n   * This will increase index of panels after by the number of panels added\n   * @ko 주어진 인덱스에 새로운 패널들을 추가합니다\n   * 해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.\n   * @param {number} index Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.insert(0, document.createElement(\"div\"));\n   * flicking.insert(2, \"\\<div\\>Panel\\</div\\>\");\n   * flicking.insert(1, [\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.insert(3, \"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public insert(index: number, element: ElementLike | ElementLike[]): Panel[] {\n    if (this._renderExternal) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_ALLOWED_IN_FRAMEWORK, ERROR.CODE.NOT_ALLOWED_IN_FRAMEWORK);\n    }\n\n    return this._renderer.batchInsert({ index, elements: parseElement(element) });\n  }\n\n  /**\n   * Remove the panel at the given index\n   * This will decrease index of panels after by the number of panels removed\n   * @ko 주어진 인덱스의 패널을 제거합니다\n   * 해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다\n   * @param {number} index Index of panel to remove<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>\n   * @return {Panel[]} An array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    if (this._renderExternal) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_ALLOWED_IN_FRAMEWORK, ERROR.CODE.NOT_ALLOWED_IN_FRAMEWORK);\n    }\n\n    return this._renderer.batchRemove({ index, deleteCount });\n  }\n\n  private _createControl(): Control {\n    const moveType = this._moveType;\n    const moveTypes = Object.keys(MOVE_TYPE).map(key => MOVE_TYPE[key] as ValueOf<typeof MOVE_TYPE>);\n\n    const moveTypeStr = Array.isArray(moveType)\n      ? moveType[0]\n      : moveType;\n\n    const moveTypeOptions = Array.isArray(moveType)\n      ? moveType[1] ?? {}\n      : {};\n\n    if (!includes(moveTypes, moveTypeStr)) {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"moveType\", JSON.stringify(moveType)), ERROR.CODE.WRONG_OPTION);\n    }\n\n    switch (moveTypeStr) {\n      case MOVE_TYPE.SNAP:\n        return new SnapControl();\n      case MOVE_TYPE.FREE_SCROLL:\n        return new FreeControl(moveTypeOptions as FreeControlOptions);\n      case MOVE_TYPE.STRICT:\n        return new StrictControl(moveTypeOptions as StrictControlOptions);\n    }\n  }\n\n  private _createCamera(): Camera {\n    const cameraOption = { align: this._align };\n\n    if (this._circular) {\n      if (this._bound) {\n        // eslint-disable-next-line no-console\n        console.warn(\"\\\"circular\\\" and \\\"bound\\\" option cannot be used together, ignoring bound.\");\n      }\n      return new CircularCamera(cameraOption);\n    } else if (this._bound) {\n      return new BoundCamera(cameraOption);\n    } else {\n      return new LinearCamera(cameraOption);\n    }\n  }\n\n  private _createRenderer(): Renderer {\n    const renderingStrategy = this._renderOnlyVisible\n      ? new VisibleRenderingStrategy()\n      : new RawRenderingStrategy();\n\n    const rendererOptions = {\n      align: this._align,\n      strategy: renderingStrategy\n    };\n\n    const renderExternal = this._renderExternal;\n\n    return renderExternal\n      ? new (renderExternal.renderer as any)({ ...rendererOptions, ...renderExternal.rendererOptions })\n      : new VanillaRenderer(rendererOptions);\n  }\n\n  private _moveToInitialPanel(): void {\n    const renderer = this._renderer;\n    const control = this._control;\n    const initialPanel = renderer.getPanel(this._defaultIndex) || renderer.getPanel(0);\n\n    if (!initialPanel) return;\n\n    void control.moveToPanel(initialPanel, {\n      duration: 0\n    });\n  }\n}\n\nexport default Flicking;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel, { PanelOptions } from \"./Panel\";\n\nexport interface ExternalPanelOptions<T> extends PanelOptions {\n  externalComponent: T;\n}\n\n/**\n * An slide data component that holds information of a single HTMLElement\n * @ko 슬라이드 데이터 컴포넌트로, 단일 HTMLElement의 정보를 갖고 있습니다\n */\nabstract class ExternalPanel<T = any> extends Panel {\n  protected _externalComponent: T;\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {HTMLElement} [options.el] A `HTMLElement` panel's referencing<ko>패널이 참조하는 `HTMLElement`</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor(options: ExternalPanelOptions<T>) {\n    super(options);\n\n    this._externalComponent = options.externalComponent;\n  }\n}\n\nexport default ExternalPanel;\n","import Component from \"@egjs/component\";\n\nimport Flicking from \"../Flicking\";\n\n/**\n * Decorator that makes the method of flicking available in the framework.\n * @ko 프레임워크에서 플리킹의 메소드를 사용할 수 있게 하는 데코레이터.\n * @memberof eg.Flicking\n * @private\n * @example\n * ```js\n * import Flicking, { withFlickingMethods } from \"@egjs/flicking\";\n *\n * class Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>> {\n *   &#64;withFlickingMethods\n *   private flicking: Flicking;\n * }\n * ```\n */\nconst withFlickingMethods = (prototype: any, flickingName: string) => {\n  [Component.prototype, Flicking.prototype].forEach(proto => {\n    Object.getOwnPropertyNames(proto).filter(name => !prototype[name] && !name.startsWith(\"_\") && name !== \"constructor\")\n      .forEach((name: string) => {\n        const descriptor = Object.getOwnPropertyDescriptor(proto, name)!;\n\n        if (descriptor.value) {\n          // Public Function\n          Object.defineProperty(prototype, name, {\n            value: function(...args) {\n              return descriptor.value.call(this[flickingName], ...args);\n            }\n          });\n        } else {\n          const getterDescriptor: { get?: () => any; set?: (val: any) => void } = {};\n          if (descriptor.get) {\n            getterDescriptor.get = function() {\n              return descriptor.get?.call(this[flickingName]);\n            };\n          }\n          if (descriptor.set) {\n            getterDescriptor.set = function(...args) {\n              return descriptor.set?.call(this[flickingName], ...args);\n            };\n          }\n\n          Object.defineProperty(prototype, name, getterDescriptor);\n        }\n      });\n  });\n};\n\nexport default withFlickingMethods;\n","import { DiffResult } from \"@egjs/list-differ\";\n\nimport Flicking from \"../Flicking\";\nimport Renderer from \"../renderer/Renderer\";\n\nexport default (flicking: Flicking, diffResult: DiffResult<any>, rendered: any[]) => {\n  const renderer = flicking.renderer;\n\n  if (diffResult.removed.length > 0) {\n    let startIdx = -1;\n    let prevIdx = -1;\n\n    diffResult.removed.forEach((removedIdx, idx) => {\n      if (startIdx < 0) {\n        startIdx = idx;\n      }\n\n      if (prevIdx >= 0 && removedIdx !== prevIdx + 1) {\n        batchRemove(renderer, diffResult, startIdx, idx + 1);\n\n        startIdx = -1;\n        prevIdx = -1;\n      } else {\n        prevIdx = removedIdx;\n      }\n    });\n\n    if (startIdx >= 0) {\n      batchRemove(renderer, diffResult, startIdx);\n    }\n  }\n\n  diffResult.ordered.forEach(([prevIdx, newIdx]) => {\n    const prevPanel = renderer.panels[prevIdx];\n    const indexDiff = newIdx - prevIdx;\n\n    if (indexDiff > 0) {\n      prevPanel.increaseIndex(indexDiff);\n    } else {\n      prevPanel.decreaseIndex(-indexDiff);\n    }\n    // Update position\n    prevPanel.resize();\n  });\n\n  if (diffResult.added.length > 0) {\n    let startIdx = -1;\n    let prevIdx = -1;\n\n    diffResult.added.forEach((addedIdx, idx) => {\n      if (startIdx < 0) {\n        startIdx = idx;\n      }\n\n      if (prevIdx >= 0 && addedIdx !== prevIdx + 1) {\n        batchInsert(renderer, diffResult, rendered, startIdx, idx + 1);\n\n        startIdx = -1;\n        prevIdx = -1;\n      } else {\n        prevIdx = addedIdx;\n      }\n    });\n\n    if (startIdx >= 0) {\n      batchInsert(renderer, diffResult, rendered, startIdx);\n    }\n  }\n};\n\nconst batchInsert = (renderer: Renderer, diffResult: DiffResult<any>, rendered: any[], startIdx: number, endIdx?: number) => {\n  renderer.batchInsert(\n    ...diffResult.added.slice(startIdx, endIdx).map((index, elIdx) => ({ index, elements: [rendered[elIdx + diffResult.prevList.length]] }))\n  );\n};\n\nconst batchRemove = (renderer: Renderer, diffResult: DiffResult<any>, startIdx: number, endIdx?: number) => {\n  const removed = diffResult.removed.slice(startIdx, endIdx);\n\n  renderer.batchRemove({ index: startIdx, deleteCount: removed.length });\n};\n\n","import { DiffResult } from \"@egjs/list-differ\";\n\nimport Flicking from \"../Flicking\";\n\nexport default <T>(flicking: Flicking, diffResult: DiffResult<T>) => {\n  const removedPanels = diffResult.removed.reduce((map, idx) => {\n    map[idx] = true;\n    return map;\n  }, {});\n\n  return [\n    ...flicking.panels\n      .filter(panel => !removedPanels[panel.index])\n      // Sort panels by position\n      .sort((panel1, panel2) => (panel1.position + panel1.offset) - (panel2.position + panel2.offset))\n      .map(panel => diffResult.prevList[panel.index]),\n    ...diffResult.added.map(idx => diffResult.list[idx])\n  ];\n};\n\n","import { FlickingOptions } from \"../Flicking\";\nimport { ALIGN } from \"../const/external\";\nimport { parseArithmeticExpression } from \"../utils\";\n\nexport default (align: FlickingOptions[\"align\"] = ALIGN.CENTER, horizontal: boolean = true, firstPanelSize?: string) => {\n  const cameraAlign = getCameraAlign(align);\n  const panelAlign = getPanelAlign(align);\n\n  if (panelAlign == null) return \"\";\n\n  const camPosition = `calc(${cameraAlign} - (${firstPanelSize || \"0px\"} * ${panelAlign.percentage}) - ${panelAlign.absolute}px)`;\n\n  return horizontal\n    ? `translate(${camPosition})`\n    : `translate(0, ${camPosition})`;\n};\n\nconst getCameraAlign = (align: FlickingOptions[\"align\"]) => {\n  const alignVal = typeof align === \"object\"\n    ? (align as { camera: string | number }).camera\n    : align;\n\n  return parseAlign(alignVal);\n};\n\nconst getPanelAlign = (align: FlickingOptions[\"align\"]) => {\n  const alignVal = typeof align === \"object\"\n    ? (align as { panel: string | number }).panel\n    : align;\n\n  return parseArithmeticExpression(parseAlign(alignVal));\n};\n\nconst parseAlign = (alignVal: number | string) => {\n  if (typeof alignVal === \"number\") {\n    return `${alignVal}px`;\n  }\n\n  switch (alignVal) {\n    case ALIGN.CENTER:\n      return \"50%\";\n    case ALIGN.NEXT:\n      return \"100%\";\n    case ALIGN.PREV:\n      return \"0%\";\n    default:\n      return alignVal;\n  }\n};\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"./Flicking\";\n\nexport * from \"./exports\";\n\nexport default Flicking;\n"],"names":["__extends","message","code","_super","_this","Object","setPrototypeOf","FlickingError","prototype","name","Error","CODE","WRONG_TYPE","ELEMENT_NOT_FOUND","VAL_MUST_NOT_NULL","NOT_ATTACHED_TO_FLICKING","WRONG_OPTION","INDEX_OUT_OF_RANGE","POSITION_NOT_REACHABLE","TRANSFORM_NOT_SUPPORTED","STOP_CALLED_BY_USER","ANIMATION_INTERRUPTED","ANIMATION_ALREADY_PLAYING","NOT_ALLOWED_IN_FRAMEWORK","NOT_INITIALIZED","NO_ACTIVE","MESSAGE","wrongVal","correctTypes","map","type","join","selector","val","optionName","min","max","position","EVENTS","READY","BEFORE_RESIZE","AFTER_RESIZE","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","WILL_CHANGE","CHANGED","WILL_RESTORE","RESTORED","SELECT","NEED_PANEL","VISIBLE_CHANGE","REACH_EDGE","PANEL_CHANGE","ALIGN","PREV","CENTER","NEXT","DIRECTION","NONE","MOVE_TYPE","SNAP","FREE_SCROLL","STRICT","getElement","el","parent","targetEl","isString","parentEl","document","queryResult","querySelector","ERROR","nodeType","Node","ELEMENT_NODE","checkExistence","value","nameOnErrMsg","clamp","x","Math","getFlickingAttached","nameToThrowOnError","toArray","iterable","slice","call","parseAlign","align","size","alignPoint","parseArithmeticSize","parseBounce","bounce","parsedBounce","Array","isArray","parsedVal","cssValue","base","parsed","parseArithmeticExpression","percentage","absolute","cssRegex","idx","matchResult","exec","sign","unit","parsedValue","parseFloat","signMultiplier","getDirection","start","end","parseElement","element","elements","forEach","tempDiv","createElement","innerHTML","push","children","firstChild","removeChild","getMinusCompensatedIndex","includes","array","target","array_1","__values","circulatePosition","pos","offset","findIndex","checker","length","getProgress","prev","next","getStyle","window","getComputedStyle","currentStyle","isBetween","_el","_width","_height","_padding","left","right","top","bottom","_isBorderBoxSizing","_a","width","height","padding","isBorderBoxSizing","style","newWidth","newHeight","resize","elStyle","clientWidth","clientHeight","paddingLeft","paddingRight","paddingTop","paddingBottom","boxSizing","EVENT","HOLD","CHANGE","RELEASE","ANIMATION_END","FINISH","POSITION_KEY","STATE_TYPE","ctx","flicking","axesEvent","transitTo","delta","AXES","camera","prevPosition","newPosition","circularEnabled","range","lookAt","moveEvent","ComponentEvent","isTrusted","holding","direction","trigger","isCanceled","DISABLED","renderer","panelCount","holdStartEvent","HOLDING","controller","control","animatingContext","moveStartEvent","ANIMATING","onChange","State","inputEvent","horizontal","offsetX","offsetY","DRAGGING","flick","setTo","IDLE","_releaseEvent","releaseEvent","srcEvent","clickedElement","touchEvent","touch","changedTouches","elementFromPoint","clientX","clientY","panels","clickedPanel","panels_1","panel","contains","cameraPosition","clickedPanelPosition","index","_moveToChangedPosition","destPos","duration","moveToPosition","updateInput","stop","nextStateType","nextState","IdleState","HoldingState","DraggingState","AnimatingState","DisabledState","_state","eventType","externalCtx","currentState","onHold","onRelease","onAnimationEnd","onFinish","_dragged","e","preventDefault","stopPropagation","_resetInternalValues","_stateMachine","StateMachine","_axes","state","_animatingContext","axes","circular","axis","_panInput","isEnable","get","_flicking","Axes","deceleration","interruptable","easing","PanInput","viewport","inputType","iOSEdgeSwipeThreshold","scale","releaseOnScroll","connect","key","on","fire","removePreventClickHandler","destroy","enable","disable","controlParams","axm","set","cameraEl","_onAxesHold","_onAxesChange","addEventListener","_preventClickWhenDragged","off","removeEventListener","Promise","reject","startPos","animate","resetContext","once","_b","resolve","animationFinishHandler","interruptionHandler","_controller","AxesController","_activePanel","animating","init","_progressInPanel","activePanel","clampToReachablePosition","update","nearestAnchor","findNearestAnchor","removed","canReach","camPos_1","camRangeDiff","rangeDiff","possiblePositions","filter","reduce","nearestPosition","abs","Infinity","_triggerIndexChangeEvent","_animateToPosition","newActivePanel","triggeringEvent","event","currentPanel","animateTo","animation","_setActive","then","render","catch","err","prevActivePanel","updateAdaptiveHeight","prevIndex","prevPanel","clampedPosition","anchorAtPosition","prevPos","isOverThreshold","threshold","adjacentAnchor","getNextAnchor","getPrevAnchor","targetPanel","targetPos","Control","_c","stopAtEdge","_stopAtEdge","progressInPanel","panelRange","findAnchorIncludePosition","count","_count","_resetIndexRange","cameraRange","currentPos","currentIndex","prevPanelIndex","nextPanelIndex","nextPanel","nextPos","_indexRange","axesRange","indexRange","anchors","anchorPoints","firstAnchor","lastAnchor","shouldBounceToFirst","shouldBounceToLast","targetAnchor","_index","_pos","_panel","transforms","supportedStyle","documentElement","transformName","transforms_1","prefixedTransform","_transform","_align","_position","_alignPos","_offset","_range","_visiblePanels","_anchors","NaN","nearestPanel","panelPos","bounceSize","prevRange","nextRange","nextPosition","viewportEl","firstElementChild","_checkTranslateSupport","_refreshVisiblePanels","_checkNeedPanel","_checkReachEnd","_applyTransform","anchor","anchorsIncludingPosition","includePosition","nearest","prevDist","anchorIdx","dist","visibleRange","includeRange","alignVal","AnchorPoint","adaptive","setSize","unRenderedPanels","rendered","sizeIncludingMargin","_needPanelTriggered","newVisiblePanels","canSee","prevVisiblePanels","added","visiblePanels","needPanelTriggered","cameraSize","needPanelThreshold","cameraPrev","cameraNext","firstPanel","lastPanel","firstPanelPrev","lastPanelNext","newPos","wasBetweenRange","isBetweenRange","actualPosition","getPanel","Camera","_circularOffset","_circularEnabled","positionInRange","anchorInRange","loopCount","floor","visibleInCurrentRange","margin","visibleSize","panelSizeSum","canSetCircularMode","every","updateCircularToggleDirection","_updateCircularOffset","toggled","toggle","some","isToggled","sum","toggledPrev","toggledNext","toggleDirection","_calcPanelAreaSum","alignPos","viewportSize","panelAreaSize","canSetBoundMode","reachablePanels","shouldPrependBoundAnchor","shouldAppendBoundAnchor","indexOffset_1","newAnchors","splice","nearestPanelAtMin","_findNearestPanel","panelAtMin","panelAtMax","panelIdx","markForShow","_d","strategy","RawRenderingStrategy","_renderingStrategy","_panels","panelAlign","_getPanelAlign","_collectPanels","_i","items","allPanelsInserted","addedPanels","item","insertingIdx","panelsPushed","panelsInserted","_createPanel","insertedSize","_getPanelSizeSum","increaseIndex","increasePosition","_insertPanelElements","_updateCameraAndControl","moveToPanel","updateOffset","activeIndex","allPanelsRemoved","deleteCount","removingIdx","panelsPulled","panelsRemoved","removedSize","decreaseIndex","decreasePosition","_removePanelElements","resetActive","marginDiff","updateRange","updateAnchors","resetNeedPanelHistory","_removed","_resetInternalStates","_size","_margin","_toggled","_toggleDirection","cameraRangeDiff","progress","alignPosition","camPos","disappearPosNext","disappearPosPrev","checkingRange","offsetWidth","offsetHeight","marginLeft","marginRight","marginTop","marginBottom","_updateAlignPos","includeMargin","moveTo","_moveBy","togglePosition","_togglePosition","prevToggled","camRange","camAlignPosition","camVisibleRange","camVisibleSize","minimumVisible","maximumVisible","shouldBeVisibleAtMin","shouldBeVisibleAtMax","options","_rendered","Panel","wasRenderedPanels","parentElement","updateRenderingPanels","renderingPanels","_getRenderingPanelsByOrder","_resetPanelElementOrder","cameraElement","fragment","createDocumentFragment","appendChild","_removeAllChildsFromCamera","childNodes","node","TEXT_NODE","cameraChilds","ElementPanel","nextSibling","nextSiblingElement","insertBefore","reversedPanels","__spreadArray","reverse","nextPanelEl","nextElementSibling","sort","a","b","Renderer","visibleIndexes","visibles","markForHide","root","defaultIndex","_e","_f","_g","bound","_h","_j","_k","preventEventsBeforeInit","_l","_m","_o","pow","_p","_q","moveType","_r","_s","_t","_u","_v","preventClickOnDrag","_w","disableOnInit","_x","renderOnlyVisible","_y","autoInit","_z","autoResize","_0","renderExternal","_initialized","_plugins","_defaultIndex","_horizontal","_circular","_bound","_adaptive","_needPanelThreshold","_preventEventsBeforeInit","_deceleration","_duration","_easing","_inputType","_moveType","_threshold","_interruptable","_bounce","_iOSEdgeSwipeThreshold","_preventClickOnDrag","_disableOnInit","_renderOnlyVisible","_autoResize","_autoInit","_renderExternal","_viewport","Viewport","_renderer","_createRenderer","_camera","_createCamera","_control","_createControl","bind","prevVal","addPreventClickHandler","originalTrigger","_moveToInitialPanel","disableInput","plugin","includePanelHTML","visiblePanelsOnly","status","panelInfo","html","outerHTML","getProgressInPanel","visibleOffset","batchRemove","batchInsert","panelIndex","newCameraPos","plugins","foundIndex","prevWidth","prevHeight","prevProgressInPanel","forceRenderAllPanels","updatePanelSize","updateAlignPos","updatePosition","sizeChanged","insert","moveTypes","keys","moveTypeStr","moveTypeOptions","JSON","stringify","SnapControl","FreeControl","StrictControl","cameraOption","console","warn","CircularCamera","BoundCamera","LinearCamera","renderingStrategy","VisibleRenderingStrategy","rendererOptions","VanillaRenderer","initialPanel","Flicking","Component","_externalComponent","externalComponent","withFlickingMethods","flickingName","proto","getOwnPropertyNames","startsWith","descriptor","getOwnPropertyDescriptor","defineProperty","args","getterDescriptor","diffResult","startIdx_1","prevIdx_1","removedIdx","ordered","__read","prevIdx","newIdx","indexDiff","startIdx_2","prevIdx_2","addedIdx","startIdx","endIdx","elIdx","prevList","removedPanels","panel1","panel2","list","firstPanelSize","cameraAlign","getCameraAlign","getPanelAlign","camPosition"],"mappings":"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"}