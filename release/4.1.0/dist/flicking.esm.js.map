{"version":3,"file":"flicking.esm.js","sources":["../src/core/FlickingError.ts","../src/const/error.ts","../src/const/external.ts","../src/utils.ts","../src/core/Viewport.ts","../src/const/axes.ts","../src/control/states/State.ts","../src/control/states/IdleState.ts","../src/control/states/HoldingState.ts","../src/control/states/DraggingState.ts","../src/control/states/AnimatingState.ts","../src/control/states/DisabledState.ts","../src/control/StateMachine.ts","../src/control/AxesController.ts","../src/control/Control.ts","../src/control/SnapControl.ts","../src/control/FreeControl.ts","../src/core/AnchorPoint.ts","../src/camera/Camera.ts","../src/camera/LinearCamera.ts","../src/camera/CircularCamera.ts","../src/camera/BoundCamera.ts","../src/renderer/RenderingStrategy/RawRenderingStrategy.ts","../src/renderer/Renderer.ts","../src/core/panel/Panel.ts","../src/core/panel/ElementPanel.ts","../src/renderer/VanillaRenderer.ts","../src/renderer/ExternalRenderer.ts","../src/renderer/RenderingStrategy/VisibleRenderingStrategy.ts","../src/Flicking.ts","../src/core/panel/ExternalPanel.ts","../src/cfc/withFlickingMethods.ts","../src/cfc/sync.ts","../src/cfc/getRenderingPanels.ts","../src/index.ts"],"sourcesContent":["/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n/**\n * Special type of known error that {@link Flicking} throws.\n * @ko Flicking 내부에서 알려진 오류 발생시 throw되는 에러\n * @property {number} code Error code<ko>에러 코드</ko>\n * @property {string} message Error message<ko>에러 메시지</ko>\n * @see {@link Constants.ERROR_CODE ERROR_CODE}\n * @example\n * ```ts\n * import Flicking, { FlickingError, ERROR_CODES } from \"@egjs/flicking\";\n * try {\n *   const flicking = new Flicking(\".flicking-viewport\")\n * } catch (e) {\n *   if (e instanceof FlickingError && e.code === ERROR_CODES.ELEMENT_NOT_FOUND) {\n *     console.error(\"Element not found\")\n *   }\n * }\n * ```\n */\nclass FlickingError extends Error {\n  /**\n   * @param message Error message<ko>에러 메시지</ko>\n   * @param code Error code<ko>에러 코드</ko>\n   */\n  public constructor(\n    public message: string,\n    public code: number) {\n    super(message);\n    Object.setPrototypeOf(this, FlickingError.prototype);\n    this.name = \"FlickingError\";\n  }\n}\n\nexport default FlickingError;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\n\n/**\n * Error codes of {@link FlickingError}. Below are the conditions where each error code occurs.\n * @ko {@link FlickingError}의 에러 코드. 아래는 각각의 에러 코드가 발생하는 조건입니다.\n * @name ERROR_CODE\n * @constant\n * @type object\n * @property {number} WRONG_TYPE Parameter type is wrong<ko>패러미터의 타입이 잘못되었을 경우</ko>\n * @property {number} ELEMENT_NOT_FOUND Element is not found inside page with the given CSS selector<ko>주어진 CSS selector로 페이지 내에서 해당 엘리먼트를 찾지 못했을 경우</ko>\n * @property {number} VAL_MUST_NOT_NULL Expected non-null value, but given `null` or `undefined`<ko>값을 기대했으나, `null`이나 `undefined`를 받은 경우</ko>\n * @property {number} NOT_ATTACHED_TO_FLICKING When Flicking's component is not initialized (i.e. {@link Flicking#init} is not called)<ko>Flicking 내부 컴포넌트가 초기화되지 않은 경우 ({@link Flicking#init}이 호출되지 않은 경우)</ko>\n * @property {number} WRONG_OPTION One of the options is wrong<ko>옵션들 중 잘못된 값이 있을 때</ko>\n * @property {number} INDEX_OUT_OF_RANGE When the given index is out of possible range<ko>인덱스가 주어진 범위를 벗어난 경우</ko>\n * @property {number} POSITION_NOT_REACHABLE When {@link Control#moveToPosition}'s position parameter is out of possible range.<ko>{@link Control#moveToPosition}의 `position` 패러미터가 도달 가능한 범위를 벗어난 경우</ko>\n * @property {number} TRANSFORM_NOT_SUPPORTED CSS `transform` property is not available(<=IE8) <ko>CSS `transform` 속성을 사용할 수 없는 경우(<=IE8)</ko>\n * @property {number} STOP_CALLED_BY_USER When the event's `stop()` is called by user.<ko>사용자에 의해 이벤트의 `stop()`이 호출된 경우</ko>\n * @property {number} ANIMATION_INTERRUPTED When the animation is interrupted by user.<ko>사용자에 의해 애니메이션이 중단된 경우</ko>\n * @property {number} ANIMATION_ALREADY_PLAYING When the animation is already playing.<ko>현재 애니메이션이 이미 진행중인 경우</ko>\n * @property {number} NOT_ALLOWED_IN_FRAMEWORK When the non-allowed method is called from frameworks (React, Angular, Vue...)\n * <ko>프레임워크(React, Angular, Vue ...)에서 사용 불가능한 메소드를 호출했을 경우</ko>\n * @property {number} NOT_INITIALIZED When the {@link Flicking#init} is not called before but is needed<ko>{@link Flicking#init}의 호출이 필요하나, 아직 호출되지 않았을 경우</ko>\n * @property {number} NO_ACTIVE When there're no active panel that flicking has selected. This may be due to the absence of any panels<ko>현재 Flicking이 선택한 패널이 없을 경우. 일반적으로 패널이 하나도 없는 경우에 발생할 수 있습니다</ko>\n */\nexport const CODE = {\n  WRONG_TYPE: 0,\n  ELEMENT_NOT_FOUND: 1,\n  VAL_MUST_NOT_NULL: 2,\n  NOT_ATTACHED_TO_FLICKING: 3,\n  WRONG_OPTION: 4,\n  INDEX_OUT_OF_RANGE: 5,\n  POSITION_NOT_REACHABLE: 6,\n  TRANSFORM_NOT_SUPPORTED: 7,\n  STOP_CALLED_BY_USER: 8,\n  ANIMATION_INTERRUPTED: 9,\n  ANIMATION_ALREADY_PLAYING: 10,\n  NOT_ALLOWED_IN_FRAMEWORK: 11,\n  NOT_INITIALIZED: 12,\n  NO_ACTIVE: 13\n} as const;\n\nexport const MESSAGE = {\n  WRONG_TYPE: (wrongVal: any, correctTypes: string[]) => `${wrongVal}(${typeof wrongVal}) is not a ${correctTypes.map(type => `\"${type}\"`).join(\" or \")}.`,\n  ELEMENT_NOT_FOUND: (selector: string) => `Element with selector \"${selector}\" not found.`,\n  VAL_MUST_NOT_NULL: (val: any, name: string) => `${name} should be provided. Given: ${val}`,\n  NOT_ATTACHED_TO_FLICKING: (name: string) => `${name} is not attached to the Flicking instance. \"init()\" should be called first.`,\n  WRONG_OPTION: (optionName: string, val: any) => `Option \"${optionName}\" is not in correct format, given: ${val}`,\n  INDEX_OUT_OF_RANGE: (val: number, min: number, max: number) => `Index \"${val}\" is out of range: should be between ${min} and ${max}.`,\n  POSITION_NOT_REACHABLE: (position: number) => `Position \"${position}\" is not reachable.`,\n  TRANSFORM_NOT_SUPPORTED: \"Browser does not support CSS transform.\",\n  STOP_CALLED_BY_USER: \"Event stop() is called by user.\",\n  ANIMATION_INTERRUPTED: \"Animation is interrupted by user input.\",\n  ANIMATION_ALREADY_PLAYING: \"Animation is already playing.\",\n  NOT_ALLOWED_IN_FRAMEWORK: \"This behavior is not allowed in the frameworks like React, Vue, or Angular.\",\n  NOT_INITIALIZED: \"Flicking is not initialized yet, call init() first.\",\n  NO_ACTIVE: \"There's no active panel that Flicking has selected. This may be due to the absence of any panels.\"\n} as const;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nexport { CODE as ERROR_CODE } from \"./error\";\n\n/**\n * Event type object with event name strings of {@link Flicking}\n * @ko {@link Flicking}의 이벤트 이름 문자열들을 담은 객체\n * @type {object}\n * @property {\"holdStart\"} HOLD_START holdStart event<ko>holdStart 이벤트</ko>\n * @property {\"holdEnd\"} HOLD_END holdEnd event<ko>holdEnd 이벤트</ko>\n * @property {\"moveStart\"} MOVE_START moveStart event<ko>moveStart 이벤트</ko>\n * @property {\"move\"} MOVE move event<ko>move 이벤트</ko>\n * @property {\"moveEnd\"} MOVE_END moveEnd event<ko>moveEnd 이벤트</ko>\n * @property {\"willChange\"} WILL_CHANGE willChange event<ko>willChange 이벤트</ko>\n * @property {\"changed\"} CHANGED changed event<ko>changed 이벤트</ko>\n * @property {\"willRestore\"} WILL_RESTORE willRestore event<ko>willRestore 이벤트</ko>\n * @property {\"restored\"} RESTORED restored event<ko>restored 이벤트</ko>\n * @property {\"select\"} SELECT select event<ko>select 이벤트</ko>\n * @property {\"needPanel\"} NEED_PANEL needPanel event<ko>needPanel 이벤트</ko>\n * @property {\"panelChange\"} PANEL_CHANGE panelChange event<ko>panelChange 이벤트</ko>\n * @example\n * ```ts\n * import { EVENTS } from \"@egjs/flicking\";\n * EVENTS.MOVE_START; // \"moveStart\"\n * ```\n */\nexport const EVENTS = {\n  READY: \"ready\",\n  BEFORE_RESIZE: \"beforeResize\",\n  AFTER_RESIZE: \"afterResize\",\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  WILL_CHANGE: \"willChange\",\n  CHANGED: \"changed\",\n  WILL_RESTORE: \"willRestore\",\n  RESTORED: \"restored\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n  VISIBLE_CHANGE: \"visibleChange\",\n  REACH_EDGE: \"reachEdge\",\n  PANEL_CHANGE: \"panelChange\"\n} as const;\n\n/**\n * An object with all possible predefined literal string for the {@link Flicking#align align} option\n * @ko {@link Flicking#align align} 옵션에 사용되는 미리 정의된 리터럴 상수들을 담고 있는 객체\n * @type {object}\n * @property {\"prev\"} PREV left/top align<ko>좌/상 정렬</ko>\n * @property {\"center\"} CENTER center align<ko>중앙 정렬</ko>\n * @property {\"next\"} NEXT right/bottom align<ko>우/하 정렬</ko>\n */\nexport const ALIGN = {\n  PREV: \"prev\",\n  CENTER: \"center\",\n  NEXT: \"next\"\n} as const;\n\n/**\n * An object of directions\n * @ko 방향을 나타내는 값들을 담고 있는 객체\n * @type {object}\n * @property {\"PREV\"} PREV \"left\" when {@link Flicking#horizontal horizontal} is true, and \"top\" when {@link Flicking#horizontal horizontal} is false\n * <ko>{@link Flicking#horizontal horizontal}가 `true`일 경우 왼쪽, {@link Flicking#horizontal horizontal}가 `false`일 경우 위쪽을 의미합니다</ko>\n * @property {\"NEXT\"} NEXT \"right\" when {@link Flicking#horizontal horizontal} is true, and \"bottom\" when {@link Flicking#horizontal horizontal} is false\n * <ko>{@link Flicking#horizontal horizontal}가 `true`일 경우 오른쪽, {@link Flicking#horizontal horizontal}가 `false`일 경우 아래쪽을 의미합니다</ko>\n * @property {null} NONE This value usually means it's the same position<ko>주로 제자리인 경우를 의미합니다</ko>\n */\nexport const DIRECTION = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n  NONE: null\n} as const;\n\n/**\n * An object with all possible {@link Flicking#moveType moveType}s\n * @ko Flicking이 제공하는 {@link Flicking#moveType moveType}들을 담고 있는 객체\n * @type {object}\n * @property {\"snap\"} SNAP Flicking's {@link Flicking#moveType moveType} that enables {@link SnapControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link SnapControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n * @property {\"freeScroll\"} FREE_SCROLL Flicking's {@link Flicking#moveType moveType} that enables {@link FreeControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link FreeControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n */\nexport const MOVE_TYPE = {\n  SNAP: \"snap\",\n  FREE_SCROLL: \"freeScroll\"\n} as const;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking, { FlickingOptions } from \"./Flicking\";\nimport FlickingError from \"./core/FlickingError\";\nimport * as ERROR from \"./const/error\";\nimport { ALIGN, DIRECTION } from \"./const/external\";\nimport { LiteralUnion, Merged, ValueOf } from \"./type/internal\";\nimport { ElementLike } from \"./type/external\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const merge = <From extends object, To extends object>(target: From, ...sources: To[]): Merged<From, To> => {\n  sources.forEach(source => {\n    Object.keys(source).forEach(key => {\n      target[key] = source[key] as unknown;\n    });\n  });\n\n  return target as Merged<From, To>;\n};\n\nexport const getElement = (el: HTMLElement | string | null, parent?: HTMLElement): HTMLElement => {\n  let targetEl: HTMLElement | null = null;\n\n  if (isString(el)) {\n    const parentEl = parent ? parent : document;\n    const queryResult = parentEl.querySelector(el);\n    if (!queryResult) {\n      throw new FlickingError(ERROR.MESSAGE.ELEMENT_NOT_FOUND(el), ERROR.CODE.ELEMENT_NOT_FOUND);\n    }\n    targetEl = queryResult as HTMLElement;\n  } else if (el && el.nodeType === Node.ELEMENT_NODE) {\n    targetEl = el;\n  }\n\n  if (!targetEl) {\n    throw new FlickingError(ERROR.MESSAGE.WRONG_TYPE(el, [\"HTMLElement\", \"string\"]), ERROR.CODE.WRONG_TYPE);\n  }\n\n  return targetEl;\n};\n\nexport const checkExistence = (value: any, nameOnErrMsg: string) => {\n  if (value == null) {\n    throw new FlickingError(ERROR.MESSAGE.VAL_MUST_NOT_NULL(value, nameOnErrMsg), ERROR.CODE.VAL_MUST_NOT_NULL);\n  }\n};\n\nexport const clamp = (x: number, min: number, max: number) => Math.max(Math.min(x, max), min);\n\nexport const getFlickingAttached = (val: Flicking | null, nameToThrowOnError: string): Flicking => {\n  if (!val) {\n    throw new FlickingError(ERROR.MESSAGE.NOT_ATTACHED_TO_FLICKING(nameToThrowOnError), ERROR.CODE.NOT_ATTACHED_TO_FLICKING);\n  }\n\n  return val;\n};\n\nexport const toArray = <T>(iterable: ArrayLike<T>): T[] => [].slice.call(iterable) as T[];\n\nexport const parseAlign = (align: LiteralUnion<ValueOf<typeof ALIGN>> | number, size: number): number => {\n  let alignPoint: number | null;\n  if (isString(align)) {\n    switch (align) {\n      case ALIGN.PREV:\n        alignPoint = 0;\n        break;\n      case ALIGN.CENTER:\n        alignPoint = 0.5 * size;\n        break;\n      case ALIGN.NEXT:\n        alignPoint = size;\n        break;\n      default:\n        alignPoint = parseArithmeticExpression(align, size);\n        if (alignPoint == null) {\n          throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"align\", align), ERROR.CODE.WRONG_OPTION);\n        }\n    }\n  } else {\n    alignPoint = align as number;\n  }\n\n  return alignPoint;\n};\n\nexport const parseBounce = (bounce: FlickingOptions[\"bounce\"], size: number): number[] => {\n  let parsedBounce: Array<number | null>;\n\n  if (Array.isArray(bounce)) {\n    parsedBounce = (bounce as string[]).map(val => parseArithmeticExpression(val, size));\n  } else {\n    const parsedVal = parseArithmeticExpression(bounce, size);\n\n    parsedBounce = [parsedVal, parsedVal];\n  }\n\n  return parsedBounce.map(val => {\n    if (val == null) {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"bounce\", bounce), ERROR.CODE.WRONG_OPTION);\n    }\n    return val;\n  });\n};\n\nexport const parseArithmeticExpression = (cssValue: number | string, base: number): number | null => {\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return cssValue;\n  }\n\n  let idx = 0;\n  let calculatedValue = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n\n    let parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return null;\n    }\n\n    if (unit === \"%\") {\n      parsedValue = (parsedValue / 100) * base;\n    }\n\n    calculatedValue += sign === \"+\"\n      ? parsedValue\n      : -parsedValue;\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return null;\n  }\n\n  return calculatedValue;\n};\n\nexport const parseCSSSizeValue = (val: string | number): string => isString(val) ? val : `${val}px`;\n\nexport const getDirection = (start: number, end: number): ValueOf<typeof DIRECTION> => {\n  if (start === end) return DIRECTION.NONE;\n  return start < end ? DIRECTION.NEXT : DIRECTION.PREV;\n};\n\nexport const parseElement = (element: ElementLike | ElementLike[]): HTMLElement[] => {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n      while (tempDiv.firstChild) {\n        tempDiv.removeChild(tempDiv.firstChild);\n      }\n    } else if (el && el.nodeType === Node.ELEMENT_NODE) {\n      elements.push(el);\n    } else {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_TYPE(el, [\"HTMLElement\", \"string\"]), ERROR.CODE.WRONG_TYPE);\n    }\n  });\n\n  return elements;\n};\n\nexport const getMinusCompensatedIndex = (idx: number, max: number) => idx < 0 ? clamp(idx + max, 0, max) : clamp(idx, 0, max);\n\nexport const includes = <T>(array: T[], target: any): target is T => {\n  for (const val of array) {\n    if (val === target) return true;\n  }\n  return false;\n};\n\nexport const isString = (val: any): val is string => typeof val === \"string\";\n\nexport const circulatePosition = (pos: number, min: number, max: number) => {\n  const size = max - min;\n\n  if (pos < min) {\n    const offset = (min - pos) % size;\n    pos = max - offset;\n  } else if (pos > max) {\n    const offset = (pos - max) % size;\n    pos = min + offset;\n  }\n\n  return pos;\n};\n\nexport const find = <T>(array: T[], checker: (val: T) => boolean): T | null => {\n  for (const val of array) {\n    if (checker(val)) {\n      return val;\n    }\n  }\n\n  return null;\n};\n\nexport const findRight = <T>(array: T[], checker: (val: T) => boolean): T | null => {\n  for (let idx = array.length - 1; idx >= 0; idx--) {\n    const val = array[idx];\n    if (checker(val)) {\n      return val;\n    }\n  }\n\n  return null;\n};\n\nexport const findIndex = <T>(array: T[], checker: (val: T) => boolean): number => {\n  for (let idx = 0; idx < array.length; idx++) {\n    if (checker(array[idx])) {\n      return idx;\n    }\n  }\n\n  return -1;\n};\n\nexport const getProgress = (pos: number, prev: number, next: number) => (pos - prev) / (next - prev);\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nexport const getStyle = (el: HTMLElement): CSSStyleDeclaration => window.getComputedStyle(el) || (el as any).currentStyle as CSSStyleDeclaration;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getStyle, isString } from \"../utils\";\n\n/**\n * A component that manages viewport size\n * @ko 뷰포트 크기 정보를 담당하는 컴포넌트\n */\nclass Viewport {\n  private _el: HTMLElement;\n  private _width: number;\n  private _height: number;\n  private _isBorderBoxSizing: boolean;\n  private _padding: {\n    left: number;\n    right: number;\n    top: number;\n    bottom: number;\n  };\n\n  /**\n   * A viewport(root) element\n   * @ko 뷰포트(root) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n\n  /**\n   * Viewport width, without paddings\n   * @ko 뷰포트 너비\n   * @type {number}\n   * @readonly\n   */\n  public get width() { return this._width - this._padding.left - this._padding.right; }\n  /**\n   * Viewport height, without paddings\n   * @ko 뷰포트 높이\n   * @type {number}\n   * @readonly\n   */\n  public get height() { return this._height - this._padding.top - this._padding.bottom; }\n  /**\n   * Viewport paddings\n   * @ko 뷰포트 CSS padding 값\n   * @type {object}\n   * @property {number} left CSS `padding-left`\n   * @property {number} right CSS `padding-right`\n   * @property {number} top CSS `padding-top`\n   * @property {number} bottom CSS `padding-bottom`\n   * @readonly\n   */\n  public get padding() { return this._padding; }\n\n  /**\n   * @param el A viewport element<ko>뷰포트 엘리먼트</ko>\n   */\n  public constructor(el: HTMLElement) {\n    this._el = el;\n    this._width = 0;\n    this._height = 0;\n    this._padding = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this._isBorderBoxSizing = false;\n  }\n\n  /**\n   * Change viewport's size.\n   * This will change the actual size of `.flicking-viewport` element by changing its CSS width/height property\n   * @ko 뷰포트 크기를 변경합니다.\n   * `.flicking-viewport` 엘리먼트에 해당 크기의 CSS width/height를 적용합니다\n   * @param {object} [size] New viewport size<ko>새 뷰포트 크기</ko>\n   * @param {number|string} [size.width] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   * @param {number|string} [size.height] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   */\n  public setSize({\n    width,\n    height\n  }: Partial<{\n    width: number | string;\n    height: number | string;\n  }>) {\n    const el = this._el;\n    const padding = this._padding;\n    const isBorderBoxSizing = this._isBorderBoxSizing;\n\n    if (width != null) {\n      if (isString(width)) {\n        el.style.width = width;\n      } else {\n        const newWidth = isBorderBoxSizing\n          ? width + padding.left + padding.right\n          : width;\n        el.style.width = `${newWidth}px`;\n      }\n    }\n    if (height != null) {\n      if (isString(height)) {\n        el.style.height = height;\n      } else {\n        const newHeight = isBorderBoxSizing\n          ? height + padding.top + padding.bottom\n          : height;\n        el.style.height = `${newHeight}px`;\n      }\n    }\n    this.resize();\n  }\n\n  /**\n   * Update width/height to the current viewport element's size\n   * @ko 현재 뷰포트 엘리먼트의 크기로 너비/높이를 업데이트합니다\n   */\n  public resize() {\n    const el = this._el;\n    const elStyle = getStyle(el);\n\n    this._width = el.offsetWidth;\n    this._height = el.offsetHeight;\n    this._padding = {\n      left: parseFloat(elStyle.paddingLeft),\n      right: parseFloat(elStyle.paddingRight),\n      top: parseFloat(elStyle.paddingTop),\n      bottom: parseFloat(elStyle.paddingBottom)\n    };\n    this._isBorderBoxSizing = elStyle.boxSizing === \"border-box\";\n  }\n}\n\nexport default Viewport;\n","/**\n * All possible @egjs/axes event keys\n * @internal\n */\nexport const EVENT = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\"\n} as const;\n\n/**\n * An Axis key that Flicking uses\n * @internal\n */\nexport const POSITION_KEY = \"flick\";\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OnAnimationEnd, OnChange, OnFinish, OnHold, OnRelease } from \"@egjs/axes\";\n\nimport Flicking from \"../../Flicking\";\n\nexport enum STATE_TYPE {\n  IDLE,\n  HOLDING,\n  DRAGGING,\n  ANIMATING,\n  DISABLED\n}\n\n/**\n * A component that shows the current status of the user input or the animation\n * @ko 현재 사용자 입력 또는 애니메이션 상태를 나타내는 컴포넌트\n * @internal\n */\nabstract class State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract readonly holding: boolean;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract readonly animating: boolean;\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onHold(ctx: {\n    flicking: Flicking;\n    axesEvent: OnHold;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onChange(ctx: {\n    flicking: Flicking;\n    axesEvent: OnChange;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onRelease(ctx: {\n    flicking: Flicking;\n    axesEvent: OnRelease;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onAnimationEnd(ctx: {\n    flicking: Flicking;\n    axesEvent: OnAnimationEnd;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event of Axes<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onFinish(ctx: {\n    flicking: Flicking;\n    axesEvent: OnFinish;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n}\n\nexport default State;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A default state when there's no user input and no animation's playing\n * @ko 사용자의 입력이 없고, 애니메이션이 동작하고있지 않은 기본 상태\n * @internal\n */\nclass IdleState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly animating = false;\n\n  public onHold(ctx: Parameters<State[\"onHold\"]>[0]): void {\n    // Shouldn't do any action until any panels on flicking area\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    if (flicking.renderer.panelCount <= 0) {\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    const holdStartEvent = new ComponentEvent(EVENTS.HOLD_START, {\n      axesEvent\n    });\n\n    flicking.trigger(holdStartEvent);\n\n    if (holdStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      transitTo(STATE_TYPE.HOLDING);\n    }\n  }\n\n  // By methods call\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n    const controller = flicking.control.controller;\n    const animatingContext = controller.animatingContext;\n\n    const moveStartEvent = new ComponentEvent(EVENTS.MOVE_START, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(animatingContext.start, animatingContext.end),\n      axesEvent\n    });\n    flicking.trigger(moveStartEvent);\n\n    if (moveStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n      transitTo(STATE_TYPE.ANIMATING).onChange(ctx);\n    }\n  }\n}\n\nexport default IdleState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Panel from \"../../core/panel/Panel\";\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when user's holding the Flicking area, but not moved a single pixel yet\n * @ko 사용자의 입력이 시작되었으나, 아직 움직이지는 않은 상태\n * @internal\n */\nclass HoldingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly holding = true;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly animating = false;\n\n  private _releaseEvent: OnRelease | null = null;\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    const inputEvent = axesEvent.inputEvent as { offsetX: number; offsetY: number };\n\n    const offset = flicking.horizontal\n      ? inputEvent.offsetX\n      : inputEvent.offsetY;\n\n    const moveStartEvent = new ComponentEvent(EVENTS.MOVE_START, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(0, -offset),\n      axesEvent\n    });\n    flicking.trigger(moveStartEvent);\n\n    if (moveStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n      transitTo(STATE_TYPE.DRAGGING).onChange(ctx);\n    }\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    flicking.trigger(new ComponentEvent(EVENTS.HOLD_END, { axesEvent }));\n\n    if (axesEvent.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      axesEvent.setTo({ flick: flicking.camera.position }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't handle select event here,\n    // As \"finish\" axes event happens\n    this._releaseEvent = axesEvent;\n  }\n\n  public onFinish(ctx: Parameters<State[\"onFinish\"]>[0]): void {\n    const { flicking, transitTo } = ctx;\n\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this._releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this._releaseEvent;\n\n    // Static click\n    /* eslint-disable @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access */\n    const srcEvent = releaseEvent.inputEvent.srcEvent;\n\n    let clickedElement: HTMLElement;\n    if (srcEvent.type === \"touchend\") {\n      const touchEvent = srcEvent as TouchEvent;\n      const touch = touchEvent.changedTouches[0];\n      clickedElement = document.elementFromPoint(touch.clientX, touch.clientY) as HTMLElement;\n    } else {\n      clickedElement = srcEvent.target;\n    }\n    /* eslint-enable */\n\n    const panels = flicking.renderer.panels;\n    let clickedPanel: Panel | null = null;\n\n    for (const panel of panels) {\n      if (panel.contains(clickedElement)) {\n        clickedPanel = panel;\n        break;\n      }\n    }\n\n    if (clickedPanel) {\n      const cameraPosition = flicking.camera.position;\n      const clickedPanelPosition = clickedPanel.position;\n\n      flicking.trigger(new ComponentEvent(EVENTS.SELECT, {\n        index: clickedPanel.index,\n        panel: clickedPanel,\n        // Direction to the clicked panel\n        direction: getDirection(cameraPosition, clickedPanelPosition)\n      }));\n    }\n  }\n}\n\nexport default HoldingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport * as AXES from \"../../const/axes\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when user's dragging the Flicking area\n * @ko 사용자가 드래깅중인 상태\n * @internal\n */\nclass DraggingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly holding = true;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    if (!axesEvent.delta[AXES.POSITION_KEY]) {\n      return;\n    }\n\n    const camera = flicking.camera;\n    const prevPosition = camera.position;\n\n    void camera.lookAt(axesEvent.pos[AXES.POSITION_KEY]);\n\n    const moveEvent = new ComponentEvent(EVENTS.MOVE, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(0, axesEvent.delta[AXES.POSITION_KEY]),\n      axesEvent\n    });\n    flicking.trigger(moveEvent);\n\n    if (moveEvent.isCanceled()) {\n      // Return to previous position\n      void camera.lookAt(prevPosition);\n      transitTo(STATE_TYPE.DISABLED);\n    }\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n    flicking.trigger(new ComponentEvent(EVENTS.HOLD_END, {\n      axesEvent\n    }));\n\n    if (flicking.renderer.panelCount <= 0) {\n      // There're no panels\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    transitTo(STATE_TYPE.ANIMATING);\n\n    const control = flicking.control;\n    const position = axesEvent.destPos[AXES.POSITION_KEY];\n    const duration = Math.max(axesEvent.duration, flicking.duration);\n\n    void control.moveToPosition(position, duration, axesEvent);\n  }\n}\n\nexport default DraggingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when Flicking's animating by user input or method call\n * @ko 사용자 입력이나 메소드 호출에 의해 Flicking의 애니메이션이 동작중인 상태\n * @internal\n */\nclass AnimatingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onHold(ctx: Parameters<State[\"onHold\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    const holdStartEvent = new ComponentEvent(EVENTS.HOLD_START, { axesEvent });\n    flicking.trigger(holdStartEvent);\n\n    if (holdStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      transitTo(STATE_TYPE.DRAGGING);\n    }\n  }\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    if (!axesEvent.delta.flick) {\n      return;\n    }\n\n    const camera = flicking.camera;\n    const prevPosition = camera.position;\n\n    void camera.lookAt(axesEvent.pos.flick);\n\n    const moveEvent = new ComponentEvent(EVENTS.MOVE, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(0, axesEvent.delta.flick),\n      axesEvent\n    });\n\n    flicking.trigger(moveEvent);\n\n    if (moveEvent.isCanceled()) {\n      // Return to previous position\n      void flicking.camera.lookAt(prevPosition);\n      transitTo(STATE_TYPE.DISABLED);\n    }\n  }\n\n  public onFinish(ctx: Parameters<State[\"onFinish\"]>[0]) {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    transitTo(STATE_TYPE.IDLE);\n\n    const controller = flicking.control.controller;\n    const animatingContext = controller.animatingContext;\n\n    flicking.trigger(new ComponentEvent(EVENTS.MOVE_END, {\n      isTrusted: axesEvent.isTrusted,\n      direction: getDirection(animatingContext.start, animatingContext.end),\n      axesEvent\n    }));\n  }\n}\n\nexport default AnimatingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when Flicking is stopped by event's `stop` method\n * @ko 이벤트의 `stop`호출에 의해 Flicking이 정지된 상태\n * @internal\n */\nclass DisabledState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onAnimationEnd(ctx: Parameters<State[\"onAnimationEnd\"]>[0]): void {\n    const { transitTo } = ctx;\n\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { axesEvent, transitTo } = ctx;\n\n    // Can stop Axes's change event\n    axesEvent.stop();\n\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { axesEvent, transitTo } = ctx;\n\n    // This is needed when stopped hold start event\n    if (axesEvent.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { AxesEvents } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport * as AXES from \"../const/axes\";\n\nimport IdleState from \"./states/IdleState\";\nimport HoldingState from \"./states/HoldingState\";\nimport DraggingState from \"./states/DraggingState\";\nimport AnimatingState from \"./states/AnimatingState\";\nimport DisabledState from \"./states/DisabledState\";\nimport State, { STATE_TYPE } from \"./states/State\";\n\n/**\n * @internal\n */\nclass StateMachine {\n  private _state: State;\n\n  public get state(): State { return this._state; }\n\n  public constructor() {\n    this._state = new IdleState();\n  }\n\n  public fire(eventType: keyof AxesEvents, externalCtx: {\n    flicking: Flicking;\n    axesEvent: any;\n  }) {\n    const currentState = this._state;\n    const ctx = { ...externalCtx, transitTo: this.transitTo };\n\n    switch (eventType) {\n      case AXES.EVENT.HOLD:\n        currentState.onHold(ctx);\n        break;\n      case AXES.EVENT.CHANGE:\n        currentState.onChange(ctx);\n        break;\n      case AXES.EVENT.RELEASE:\n        currentState.onRelease(ctx);\n        break;\n      case AXES.EVENT.ANIMATION_END:\n        currentState.onAnimationEnd(ctx);\n        break;\n      case AXES.EVENT.FINISH:\n        currentState.onFinish(ctx);\n        break;\n    }\n  }\n\n  public transitTo = (nextStateType: STATE_TYPE): State => {\n    let nextState: State;\n\n    switch (nextStateType) {\n      case STATE_TYPE.IDLE:\n        nextState = new IdleState();\n        break;\n      case STATE_TYPE.HOLDING:\n        nextState = new HoldingState();\n        break;\n      case STATE_TYPE.DRAGGING:\n        nextState = new DraggingState();\n        break;\n      case STATE_TYPE.ANIMATING:\n        nextState = new AnimatingState();\n        break;\n      case STATE_TYPE.DISABLED:\n        nextState = new DisabledState();\n        break;\n    }\n\n    this._state = nextState;\n\n    return this._state;\n  };\n}\n\nexport default StateMachine;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Axes, { PanInput, AxesEvents, OnRelease } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport * as AXES from \"../const/axes\";\nimport * as ERROR from \"../const/error\";\nimport { getFlickingAttached, parseBounce } from \"../utils\";\n\nimport StateMachine from \"./StateMachine\";\n\n/**\n * A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events\n * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트\n * @internal\n */\nclass AxesController {\n  private _flicking: Flicking | null;\n  private _axes: Axes | null;\n  private _panInput: PanInput | null;\n  private _stateMachine: StateMachine;\n\n  private _animatingContext: { start: number; end: number; offset: number };\n\n  /**\n   * An {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes}의 인스턴스\n   * @type {Axes}\n   * @see https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html\n   * @readonly\n   */\n  public get axes() { return this._axes; }\n  /**\n   * A activated {@link State} that shows the current status of the user input or the animation\n   * @ko 현재 활성화된 {@link State} 인스턴스로 사용자 입력 또는 애니메이션 상태를 나타냅니다\n   * @type {State}\n   */\n  public get state() { return this._stateMachine.state; }\n  /**\n   * A context of the current animation playing\n   * @ko 현재 재생중인 애니메이션 정보\n   * @type {object}\n   * @property {number} start A start position of the animation<ko>애니메이션 시작 지점</ko>\n   * @property {number} end A end position of the animation<ko>애니메이션 끝 지점</ko>\n   * @property {number} offset camera offset<ko>카메라 오프셋</ko>\n   * @readonly\n   */\n  public get animatingContext() { return this._animatingContext; }\n  /**\n   * A Boolean indicating whether the user input is enabled\n   * @ko 현재 사용자 입력이 활성화되었는지를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get enabled() { return this._panInput?.isEnable() ?? false; }\n  /**\n   * Current position value in {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} 인스턴스 내부의 현재 좌표 값\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._axes?.get([AXES.POSITION_KEY])[AXES.POSITION_KEY] ?? 0; }\n  /**\n   * Actual bounce size(px)\n   * @ko 적용된 bounce 크기(px 단위)\n   * @type {number[]}\n   * @readonly\n   */\n  public get bounce() { return this._axes?.axis[AXES.POSITION_KEY].bounce as number[] | undefined; }\n\n  /** */\n  public constructor() {\n    this._resetInternalValues();\n    this._stateMachine = new StateMachine();\n  }\n\n  /**\n   * Initialize AxesController\n   * @ko AxesController를 초기화합니다\n   * @param {Flicking} flicking An instance of Flicking\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n\n    this._axes = new Axes({\n      [AXES.POSITION_KEY]: {\n        range: [0, 0],\n        circular: false,\n        bounce: [0, 0]\n      }\n    }, {\n      deceleration: flicking.deceleration,\n      interruptable: flicking.interruptable,\n      easing: flicking.easing\n    });\n    this._panInput = new PanInput(flicking.viewport.element, {\n      inputType: flicking.inputType,\n      iOSEdgeSwipeThreshold: flicking.iOSEdgeSwipeThreshold,\n      scale: flicking.horizontal ? [-1, 0] : [0, -1]\n    });\n\n    const axes = this._axes;\n\n    axes.connect(flicking.horizontal ? [AXES.POSITION_KEY, \"\"] : [\"\", AXES.POSITION_KEY], this._panInput);\n\n    for (const key in AXES.EVENT) {\n      const eventType = AXES.EVENT[key] as keyof AxesEvents;\n\n      axes.on(eventType, (e: AxesEvents[typeof eventType]) => {\n        this._stateMachine.fire(eventType, {\n          flicking,\n          axesEvent: e\n        });\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Destroy AxesController and return to initial state\n   * @ko AxesController를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this._axes?.destroy();\n    this._panInput?.destroy();\n\n    this._resetInternalValues();\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @chainable\n   * @return {this}\n   */\n  public enable(): this {\n    this._panInput?.enable();\n\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @chainable\n   * @return {this}\n   */\n  public disable(): this {\n    this._panInput?.disable();\n\n    return this;\n  }\n\n  /**\n   * Update {@link https://naver.github.io/egjs-axes/ @egjs/axes}'s state\n   * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 상태를 갱신합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link AxesController#init init} is not called before\n   * <ko>{@link AxesController#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public update(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const axes = this._axes!;\n    const controlParams = camera.controlParams;\n    const axis = axes.axis[AXES.POSITION_KEY];\n\n    axis.circular = [controlParams.circular, controlParams.circular];\n    axis.range = [controlParams.range.min, controlParams.range.max];\n    axis.bounce = parseBounce(flicking.bounce, camera.size);\n\n    axes.axm.set({ [AXES.POSITION_KEY]: controlParams.position });\n\n    return this;\n  }\n\n  /**\n   * Run Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#setTo setTo} using the given position\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#setTo setTo} 메소드를 주어진 좌표를 이용하여 수행합니다\n   * @param {number} position A position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {number} [axesEvent] If provided, it'll use its {@link https://naver#github#io/egjs-axes/release/latest/doc/eg#Axes#html#setTo setTo} method instead<ko>이 값이 주어졌을 경우, 해당 이벤트의 {@link https://naver#github#io/egjs-axes/release/latest/doc/eg#Axes#html#setTo setTo} 메소드를 대신해서 사용합니다.</ko>\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public animateTo(position: number, duration: number, axesEvent?: OnRelease): Promise<void> {\n    const axes = this._axes;\n\n    if (!axes) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.NOT_ATTACHED_TO_FLICKING(\"Control\"), ERROR.CODE.NOT_ATTACHED_TO_FLICKING));\n    }\n\n    const startPos = axes.get([AXES.POSITION_KEY])[AXES.POSITION_KEY];\n\n    if (startPos === position) {\n      const flicking = getFlickingAttached(this._flicking, \"Control\");\n\n      return flicking.camera.lookAt(position);\n    }\n\n    this._animatingContext = {\n      start: startPos,\n      end: position,\n      offset: 0\n    };\n\n    const animate = () => {\n      const resetContext = () => {\n        this._animatingContext = { start: 0, end: 0, offset: 0 };\n      };\n\n      axes.once(AXES.EVENT.FINISH, resetContext);\n\n      if (axesEvent) {\n        axesEvent.setTo({ [AXES.POSITION_KEY]: position }, duration);\n      } else {\n        axes.setTo({ [AXES.POSITION_KEY]: position }, duration);\n      }\n    };\n\n    if (duration === 0) {\n      animate();\n      axes.axm.set({ [AXES.POSITION_KEY]: position });\n\n      return Promise.resolve();\n    } else {\n      return new Promise((resolve, reject) => {\n        const animationFinishHandler = () => {\n          axes.off(AXES.EVENT.HOLD, interruptionHandler);\n          resolve();\n        };\n\n        const interruptionHandler = () => {\n          axes.off(AXES.EVENT.FINISH, animationFinishHandler);\n          reject(new FlickingError(ERROR.MESSAGE.ANIMATION_INTERRUPTED, ERROR.CODE.ANIMATION_INTERRUPTED));\n        };\n\n        axes.once(AXES.EVENT.FINISH, animationFinishHandler);\n        axes.once(AXES.EVENT.HOLD, interruptionHandler);\n\n        animate();\n      });\n    }\n  }\n\n  protected _resetInternalValues() {\n    this._flicking = null;\n    this._axes = null;\n    this._panInput = null;\n    this._animatingContext = { start: 0, end: 0, offset: 0 };\n  }\n}\n\nexport default AxesController;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport Panel from \"../core/panel/Panel\";\nimport AxesController from \"../control/AxesController\";\nimport { DIRECTION, EVENTS } from \"../const/external\";\nimport * as ERROR from \"../const/error\";\nimport { getDirection, getFlickingAttached } from \"../utils\";\nimport { ValueOf } from \"../type/internal\";\n\n/**\n * A component that manages inputs and animation of Flicking\n * @ko Flicking의 입력 장치 & 애니메이션을 담당하는 컴포넌트\n */\nabstract class Control {\n  // Internal States\n  protected _flicking: Flicking | null;\n  protected _controller: AxesController;\n  protected _activePanel: Panel | null;\n\n  /**\n   * A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events\n   * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트\n   * @type {AxesController}\n   * @readonly\n   */\n  public get controller() { return this._controller; }\n  /**\n   * Index number of the {@link Flicking#currentPanel currentPanel}\n   * @ko {@link Flicking#currentPanel currentPanel}의 인덱스 번호\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get activeIndex() { return this._activePanel?.index ?? -1; }\n  /**\n   * An active panel\n   * @ko 현재 선택된 패널\n   * @type {Panel | null}\n   * @readonly\n   */\n  public get activePanel() { return this._activePanel; }\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get animating() { return this._controller.state.animating; }\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get holding() { return this._controller.state.holding; }\n\n  /** */\n  public constructor() {\n    this._flicking = null;\n    this._controller = new AxesController();\n    this._activePanel = null;\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @method\n   * @abstract\n   * @memberof Control\n   * @instance\n   * @name moveToPosition\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public abstract moveToPosition(position: number, duration: number, axesEvent?: OnRelease): Promise<void>;\n\n  /**\n   * Initialize Control\n   * @ko Control을 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n    this._controller.init(flicking);\n\n    return this;\n  }\n\n  /**\n   * Destroy Control and return to initial state\n   * @ko Control을 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this._controller.destroy();\n\n    this._flicking = null;\n    this._activePanel = null;\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @chainable\n   * @return {this}\n   */\n  public enable(): this {\n    this._controller.enable();\n\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @chainable\n   * @return {this}\n   */\n  public disable(): this {\n    this._controller.disable();\n\n    return this;\n  }\n\n  /**\n   * Update position after resizing\n   * @ko resize 이후에 position을 업데이트합니다\n   * @param {number} progressInPanel Previous camera's progress in active panel before resize<ko>Resize 이전 현재 선택된 패널 내에서의 카메라 progress 값</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {Promise<void>}\n   */\n  public async updatePosition(_progressInPanel: number): Promise<void> {   // eslint-disable-line @typescript-eslint/no-unused-vars\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    if (activePanel) {\n      await camera.lookAt(camera.clampToReachablePosition(activePanel.position));\n    }\n  }\n\n  /**\n   * Update {@link Control#controller controller}'s state\n   * @ko {@link Control#controller controller}의 내부 상태를 갱신합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateInput(): this {\n    this._controller.update();\n\n    return this;\n  }\n\n  /**\n   * Reset {@link Control#activePanel activePanel} and {@link Control#activeAnchor activeAnchor} to `null`\n   * @ko {@link Control#activePanel activePanel}와 {@link Control#activeAnchor activeAnchor}를 `null`로 초기화합니다\n   * @chainable\n   * @return {this}\n   */\n  public resetActive(): this {\n    this._activePanel = null;\n\n    return this;\n  }\n\n  /**\n   * Move {@link Camera} to the given panel\n   * @ko {@link Camera}를 해당 패널 위로 이동합니다\n   * @param {Panel} panel The target panel to move<ko>이동할 패널</ko>\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {number} duration Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @param {DIRECTION} [direction=DIRECTION.NONE] Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPanel(panel: Panel, {\n    duration,\n    direction = DIRECTION.NONE,\n    axesEvent\n  }: {\n    duration: number;\n    direction?: ValueOf<typeof DIRECTION>;\n    axesEvent?: OnRelease;\n  }) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n\n    let position = panel.position;\n    const nearestAnchor = camera.findNearestAnchor(position);\n\n    if (panel.removed || !nearestAnchor) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(panel.position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n    if (!camera.canReach(panel)) {\n      // Override position & panel if that panel is not reachable\n      position = nearestAnchor.position;\n      panel = nearestAnchor.panel;\n    } else if (flicking.circularEnabled) {\n      // Circular mode is enabled, find nearest distance to panel\n      const camPos = this._controller.position; // Actual position of the Axes\n      const camRangeDiff = camera.rangeDiff;\n      const possiblePositions = [position, position + camRangeDiff, position - camRangeDiff]\n        .filter(pos => {\n          if (direction === DIRECTION.NONE) return true;\n\n          return direction === DIRECTION.PREV\n            ? pos <= camPos\n            : pos >= camPos;\n        });\n\n      position = possiblePositions.reduce((nearestPosition, pos) => {\n        if (Math.abs(camPos - pos) < Math.abs(camPos - nearestPosition)) {\n          return pos;\n        } else {\n          return nearestPosition;\n        }\n      }, Infinity);\n    }\n\n    this._triggerIndexChangeEvent(panel, panel.position, axesEvent);\n\n    return this._animateToPosition({ position, duration, newActivePanel: panel, axesEvent });\n  }\n\n  protected _triggerIndexChangeEvent(panel: Panel, position: number, axesEvent?: OnRelease): void {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const triggeringEvent = panel !== this._activePanel ? EVENTS.WILL_CHANGE : EVENTS.WILL_RESTORE;\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    const event = new ComponentEvent(triggeringEvent, {\n      index: panel.index,\n      panel,\n      isTrusted: axesEvent?.isTrusted || false,\n      direction: getDirection(activePanel?.position ?? camera.position, position)\n    });\n    flicking.trigger(event);\n\n    if (event.isCanceled()) {\n      throw new FlickingError(ERROR.MESSAGE.STOP_CALLED_BY_USER, ERROR.CODE.STOP_CALLED_BY_USER);\n    }\n  }\n\n  protected async _animateToPosition({\n    position,\n    duration,\n    newActivePanel,\n    axesEvent\n  }: {\n    position: number;\n    duration: number;\n    newActivePanel: Panel;\n    axesEvent?: OnRelease;\n  }) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const currentPanel = this._activePanel;\n    const animate = () => this._controller.animateTo(position, duration, axesEvent);\n    const isTrusted = axesEvent?.isTrusted || false;\n\n    if (duration <= 0) {\n      const animation = animate();\n      this._setActive(newActivePanel, currentPanel, isTrusted);\n      return animation;\n    } else {\n      return animate().then(async () => {\n        this._setActive(newActivePanel, currentPanel, isTrusted);\n        await flicking.renderer.render();\n      }).catch(err => {\n        if (axesEvent && err instanceof FlickingError && err.code === ERROR.CODE.ANIMATION_INTERRUPTED) return;\n        throw err;\n      });\n    }\n  }\n\n  protected _setActive = (newActivePanel: Panel, prevActivePanel: Panel | null, isTrusted: boolean) => {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n\n    this._activePanel = newActivePanel;\n\n    flicking.camera.updateAdaptiveHeight();\n\n    if (newActivePanel !== prevActivePanel) {\n      flicking.trigger(new ComponentEvent(EVENTS.CHANGED, {\n        index: newActivePanel.index,\n        panel: newActivePanel,\n        prevIndex: prevActivePanel?.index ?? -1,\n        prevPanel: prevActivePanel,\n        isTrusted,\n        direction: prevActivePanel ? getDirection(prevActivePanel.position, newActivePanel.position) : DIRECTION.NONE\n      }));\n    } else {\n      flicking.trigger(new ComponentEvent(EVENTS.RESTORED, {\n        isTrusted\n      }));\n    }\n  };\n}\n\nexport default Control;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport Panel from \"../core/panel/Panel\";\nimport FlickingError from \"../core/FlickingError\";\nimport { getFlickingAttached } from \"../utils\";\nimport * as ERROR from \"../const/error\";\n\nimport Control from \"./Control\";\n\n/**\n * A {@link Control} that uses a release momentum to choose destination panel\n * @ko 입력을 중단한 시점의 가속도에 영향받아 도달할 패널을 계산하는 이동 방식을 사용하는 {@link Control}\n */\nclass SnapControl extends Control {\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    const clampedPosition = camera.clampToReachablePosition(position);\n    const anchorAtPosition = camera.findNearestAnchor(clampedPosition);\n\n    if (!anchorAtPosition || !activePanel) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const prevPos = activePanel.position;\n\n    const isOverThreshold = Math.abs(position - prevPos) >= flicking.threshold;\n    const adjacentAnchor = (position > prevPos)\n      ? camera.getNextAnchor(anchorAtPosition)\n      : camera.getPrevAnchor(anchorAtPosition);\n\n    let targetPos: number;\n    let targetPanel: Panel;\n\n    if (isOverThreshold && anchorAtPosition.position !== activePanel.position) {\n      // Move to anchor at position\n      targetPanel = anchorAtPosition.panel;\n      targetPos = anchorAtPosition.position;\n    } else if (isOverThreshold && adjacentAnchor) {\n      // Move to adjacent anchor\n      targetPanel = adjacentAnchor.panel;\n      targetPos = adjacentAnchor.position;\n    } else {\n      // Restore to active panel\n      targetPos = camera.clampToReachablePosition(activePanel.position);\n      targetPanel = activePanel;\n    }\n\n    this._triggerIndexChangeEvent(targetPanel, position, axesEvent);\n\n    return this._animateToPosition({\n      position: targetPos,\n      duration,\n      newActivePanel: targetPanel,\n      axesEvent\n    });\n  }\n}\n\nexport default SnapControl;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport FlickingError from \"../core/FlickingError\";\nimport * as ERROR from \"../const/error\";\nimport { getFlickingAttached } from \"../utils\";\n\nimport Control from \"./Control\";\n\n/**\n * An options for the {@link FreeControl}\n * @ko {@link FreeControl} 생성시 사용되는 옵션\n * @interface\n * @property {boolean} stopAtEdge Make scroll animation to stop at the start/end of the scroll area, not going out the bounce area\n * <ko>스크롤 애니메이션을 스크롤 영역의 시작과 끝부분에서 멈추도록 하여, 바운스 영역을 넘어가지 않도록 합니다</ko>\n */\nexport interface FreeControlOptions {\n  stopAtEdge: boolean;\n}\n\n/**\n * A {@link Control} that can be scrolled freely without alignment\n * @ko 패널이 정해진 지점에 정렬되지 않고, 자유롭게 스크롤할 수 있는 이동 방식을 사용하는 {@link Control}\n */\nclass FreeControl extends Control {\n  private _stopAtEdge: FreeControlOptions[\"stopAtEdge\"];\n\n  /**\n   * Make scroll animation to stop at the start/end of the scroll area, not going out the bounce area\n   * @ko 스크롤 애니메이션을 스크롤 영역의 시작과 끝부분에서 멈추도록 하여, 바운스 영역을 넘어가지 않도록 합니다\n   * @type {boolean}\n   * @default true\n   */\n  public get stopAtEdge() { return this._stopAtEdge; }\n\n  public set stopAtEdge(val: FreeControlOptions[\"stopAtEdge\"]) { this._stopAtEdge = val; }\n\n  /** */\n  public constructor({\n    stopAtEdge = true\n  }: Partial<FreeControlOptions> = {}) {\n    super();\n\n    this._stopAtEdge = stopAtEdge;\n  }\n\n  /**\n   * Update position after resizing\n   * @ko resize 이후에 position을 업데이트합니다\n   * @param {number} progressInPanel Previous camera's progress in active panel before resize<ko>Resize 이전 현재 선택된 패널 내에서의 카메라 progress 값</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {Promise<void>}\n   */\n  public async updatePosition(progressInPanel: number): Promise<void> {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    if (activePanel) {\n      const panelRange = activePanel.range;\n      const newPosition = panelRange.min + (panelRange.max - panelRange.min) * progressInPanel;\n\n      await camera.lookAt(camera.clampToReachablePosition(newPosition));\n    }\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n\n    const camera = flicking.camera;\n    const targetPos = camera.clampToReachablePosition(position);\n\n    const anchorAtPosition = camera.findAnchorIncludePosition(targetPos);\n\n    if (!anchorAtPosition) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const targetPanel = anchorAtPosition.panel;\n\n    // Trigger only change event\n    if (targetPanel !== this._activePanel) {\n      this._triggerIndexChangeEvent(targetPanel, position, axesEvent);\n    }\n\n    return this._animateToPosition({ position: this._stopAtEdge ? targetPos : position, duration, newActivePanel: targetPanel, axesEvent });\n  }\n}\n\nexport default FreeControl;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"./panel/Panel\";\n\n/**\n * A data component that has actual position where the camera should be stopped at\n * @ko 카메라가 정지해야하는 실제 위치를 담고 있는 데이터 컴포넌트\n */\nclass AnchorPoint {\n  private _index: number;\n  private _pos: number;\n  private _panel: Panel;\n\n  /**\n   * Index of AnchorPoint\n   * @ko AnchorPoint의 인덱스\n   * @type {number}\n   * @readonly\n   */\n  public get index() { return this._index; }\n  /**\n   * Position of AnchorPoint\n   * @ko AnchorPoint의 좌표\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._pos; }\n  /**\n   * A {@link Panel} instance AnchorPoint is referencing to\n   * @ko AnchorPoint가 참조하고 있는 {@link Panel}\n   * @type {Panel}\n   * @readonly\n   */\n  public get panel() { return this._panel; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 객체</ko>\n   * @param {number} [options.index] Index of AnchorPoint<ko>AnchorPoint의 인덱스</ko>\n   * @param {number} [options.position] Position of AnchorPoint<ko>AnchorPoint의 좌표</ko>\n   * @param {Panel} [options.panel] A {@link Panel} instance AnchorPoint is referencing to<ko>AnchorPoint가 참조하고 있는 {@link Panel}</ko>\n   */\n  public constructor({\n    index,\n    position,\n    panel\n  }: {\n    index: number;\n    position: number;\n    panel: Panel;\n  }) {\n    this._index = index;\n    this._pos = position;\n    this._panel = panel;\n  }\n}\n\nexport default AnchorPoint;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking, { FlickingOptions } from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport * as ERROR from \"../const/error\";\nimport { ALIGN, DIRECTION, EVENTS } from \"../const/external\";\nimport { checkExistence, clamp, getFlickingAttached, getProgress, includes, parseAlign } from \"../utils\";\n\nexport interface CameraOptions {\n  align: FlickingOptions[\"align\"];\n}\n\n/**\n * A component that manages actual movement inside the viewport\n * @ko 뷰포트 내에서의 실제 움직임을 담당하는 컴포넌트\n */\nabstract class Camera {\n  // Options\n  protected _align: FlickingOptions[\"align\"];\n\n  // Internal states\n  protected _flicking: Flicking | null;\n  protected _el: HTMLElement;\n  protected _transform: string;\n  protected _position: number;\n  protected _alignPos: number;\n  protected _offset: number;\n  protected _range: { min: number; max: number };\n  protected _visiblePanels: Panel[];\n  protected _anchors: AnchorPoint[];\n  protected _needPanelTriggered: { prev: boolean; next: boolean };\n\n  // Internal states getter\n  /**\n   * The camera(`.flicking-camera`) element\n   * @ko 카메라(`.flicking-camera`) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n  /**\n   * Current position of the camera\n   * @ko Camera의 현재 좌표\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._position; }\n  /**\n   * Align position inside the viewport where {@link Panel}'s {@link Panel#alignPosition alignPosition} should be located at\n   * @ko 패널의 정렬 기준 위치. 뷰포트 내에서 {@link Panel}의 {@link Panel#alignPosition alignPosition}이 위치해야 하는 곳입니다\n   * @type {number}\n   * @readonly\n   */\n  public get alignPosition() { return this._alignPos; }\n  /**\n   * Position offset, used for the {@link Flicking#renderOnlyVisible renderOnlyVisible} option\n   * @ko Camera의 좌표 오프셋. {@link Flicking#renderOnlyVisible renderOnlyVisible} 옵션을 위해 사용됩니다.\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get offset() { return this._offset; }\n  /**\n   * A range that Camera's {@link Camera#position position} can reach\n   * @ko Camera의 {@link Camera#position position}이 도달 가능한 범위\n   * @type {object}\n   * @property {number} min A minimum position<ko>최소 위치</ko>\n   * @property {number} min A maximum position<ko>최대 위치</ko>\n   * @readonly\n   */\n  public get range() { return this._range; }\n  /**\n   * A difference between Camera's minimum and maximum position that can reach\n   * @ko Camera가 도달 가능한 최소/최대 좌표의 차이\n   * @type {number}\n   * @readonly\n   */\n  public get rangeDiff() { return this._range.max - this._range.min; }\n  /**\n   * An array of visible panels from the current position\n   * @ko 현재 보이는 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   */\n  public get visiblePanels() { return this._visiblePanels; }\n  /**\n   * A range of the visible area from the current position\n   * @ko 현재 위치에서 보이는 범위\n   * @type {object}\n   * @property {number} min A minimum position<ko>최소 위치</ko>\n   * @property {number} min A maximum position<ko>최대 위치</ko>\n   * @readonly\n   */\n  public get visibleRange() { return { min: this._position - this._alignPos, max: this._position - this._alignPos + this.size }; }\n  /**\n   * An array of {@link AnchorPoint}s that Camera can be stopped at\n   * @ko 카메라가 도달 가능한 {@link AnchorPoint}의 목록\n   * @type {AnchorPoint[]}\n   * @readonly\n   */\n  public get anchorPoints() { return this._anchors; }\n  /**\n   * A current parameters of the Camera for updating {@link AxesController}\n   * @ko {@link AxesController}를 업데이트하기 위한 현재 Camera 패러미터들\n   * @type {object}\n   * @property {object} range Camera {@link Camera#range range}<ko>Camera가 도달 가능한 범위({@link Camera#range range})</ko>\n   * @property {number} position Current position<ko>현재 좌표</ko>\n   * @property {boolean} circular A Boolean indicating whether the {@link Flicking#circular circular} option is enabled<ko>{@link Flicking#circular circular}옵션 활성화 여부</ko>\n   * @readonly\n   */\n  public get controlParams() { return { range: this._range, position: this._position, circular: false }; }\n  /**\n   * A Boolean value indicating whether Camera's over the minimum or maximum position reachable\n   * @ko 현재 카메라가 도달 가능한 범위의 최소 혹은 최대점을 넘어섰는지를 나타냅니다\n   * @type {boolean}\n   * @readonly\n   */\n  public get atEdge() { return this._position <= this._range.min || this._position >= this._range.max; }\n  /**\n   * Return the size of the viewport\n   * @ko 뷰포트 크기를 반환합니다\n   * @type {number}\n   * @readonly\n   */\n  public get size() {\n    const flicking = this._flicking;\n    return flicking\n      ? flicking.horizontal\n        ? flicking.viewport.width\n        : flicking.viewport.height\n      : 0;\n  }\n\n  /**\n   * Return the camera's position progress from the first panel to last panel\n   * Range is from 0 to last panel's index\n   * @ko 첫번째 패널로부터 마지막 패널까지의 카메라 위치의 진행도를 반환합니다\n   * 범위는 0부터 마지막 패널의 인덱스까지입니다\n   * @type {number}\n   * @readonly\n   */\n  public get progress() {\n    const flicking = this._flicking;\n    const position = this._position + this._offset;\n    const nearestAnchor = this.findNearestAnchor(this._position);\n\n    if (!flicking || !nearestAnchor) {\n      return NaN;\n    }\n\n    const nearestPanel = nearestAnchor.panel;\n    const panelPos = nearestPanel.position + nearestPanel.offset;\n    const bounceSize = flicking.control.controller.bounce!;\n\n    const { min: prevRange, max: nextRange } = this.range;\n    const rangeDiff = this.rangeDiff;\n\n    if (position === panelPos) {\n      return nearestPanel.index;\n    }\n\n    if (position < panelPos) {\n      const prevPanel = nearestPanel.prev();\n      let prevPosition = prevPanel\n        ? prevPanel.position + prevPanel.offset\n        : prevRange - bounceSize[0];\n\n      // Looped\n      if (prevPosition > panelPos) {\n        prevPosition -= rangeDiff;\n      }\n\n      return nearestPanel.index - 1 + getProgress(position, prevPosition, panelPos);\n    } else {\n      const nextPanel = nearestPanel.next();\n      let nextPosition = nextPanel\n        ? nextPanel.position + nextPanel.offset\n        : nextRange + bounceSize[1];\n\n      // Looped\n      if (nextPosition < panelPos) {\n        nextPosition += rangeDiff;\n      }\n\n      return nearestPanel.index + getProgress(position, panelPos, nextPosition);\n    }\n  }\n\n  // Options Getter\n  /**\n   * A value indicating where the {@link Camera#alignPosition alignPosition} should be located at inside the viewport element\n   * @ko {@link Camera#alignPosition alignPosition}이 뷰포트 엘리먼트 내의 어디에 위치해야 하는지를 나타내는 값\n   * @type {ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Setter\n  public set align(val: FlickingOptions[\"align\"]) {\n    this._align = val;\n  }\n\n  /** */\n  public constructor({\n    align = ALIGN.CENTER\n  }: Partial<CameraOptions> = {}) {\n    this._flicking = null;\n    this._resetInternalValues();\n\n    // Options\n    this._align = align;\n  }\n\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @method\n   * @abstract\n   * @memberof Camera\n   * @instance\n   * @name updateRange\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public abstract updateRange(): this;\n\n  /**\n   * Initialize Camera\n   * @ko Camera를 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE VAL_MUST_NOT_NULL} If the camera element(`.flicking-camera`) does not exist inside viewport element\n   * <ko>{@link ERROR_CODE VAL_MUST_NOT_NULL} 뷰포트 엘리먼트 내부에 카메라 엘리먼트(`.flicking-camera`)가 존재하지 않을 경우</ko>\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n\n    const viewportEl = flicking.viewport.element;\n\n    checkExistence(viewportEl.firstElementChild, \"First element child of the viewport element\");\n    this._el = viewportEl.firstElementChild as HTMLElement;\n    this._checkTranslateSupport();\n\n    return this;\n  }\n\n  /**\n   * Destroy Camera and return to initial state\n   * @ko Camera를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): this {\n    this._flicking = null;\n    this._resetInternalValues();\n    return this;\n  }\n\n  /**\n   * Move to the given position and apply CSS transform\n   * @ko 해당 좌표로 이동하고, CSS transform을 적용합니다\n   * @param {number} pos A new position<ko>움직일 위치</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public async lookAt(pos: number): Promise<void> {\n    const prevPos = this._position;\n\n    this._position = pos;\n    await this._refreshVisiblePanels();\n    this._checkNeedPanel();\n    this._checkReachEnd(prevPos, pos);\n    this._applyTransform();\n  }\n\n  /**\n   * Return a previous {@link AnchorPoint} of given {@link AnchorPoint}\n   * If it does not exist, return `null` instead\n   * @ko 주어진 {@link AnchorPoint}의 이전 {@link AnchorPoint}를 반환합니다\n   * 존재하지 않을 경우 `null`을 반환합니다\n   * @param {AnchorPoint} anchor A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>\n   * @return {AnchorPoint | null} The previous {@link AnchorPoint}<ko>이전 {@link AnchorPoint}</ko>\n   */\n  public getPrevAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    return this._anchors[anchor.index - 1] || null;\n  }\n\n  /**\n   * Return a next {@link AnchorPoint} of given {@link AnchorPoint}\n   * If it does not exist, return `null` instead\n   * @ko 주어진 {@link AnchorPoint}의 다음 {@link AnchorPoint}를 반환합니다\n   * 존재하지 않을 경우 `null`을 반환합니다\n   * @param {AnchorPoint} anchor A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>\n   * @return {AnchorPoint | null} The next {@link AnchorPoint}<ko>다음 {@link AnchorPoint}</ko>\n   */\n  public getNextAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    return this._anchors[anchor.index + 1] || null;\n  }\n\n  /**\n   * Return the camera's position progress in the panel below\n   * Value is from 0 to 1 when the camera's inside panel\n   * Value can be lower than 0 or bigger than 1 when it's in the margin area\n   * @ko 현재 카메라 아래 패널에서의 위치 진행도를 반환합니다\n   * 반환값은 카메라가 패널 내부에 있을 경우 0부터 1까지의 값을 갖습니다\n   * 패널의 margin 영역에 있을 경우 0보다 작거나 1보다 큰 값을 반환할 수 있습니다\n   */\n  public getProgressInPanel(panel: Panel) {\n    const panelRange = panel.range;\n\n    return (this._position - panelRange.min) / (panelRange.max - panelRange.min);\n  }\n\n  /**\n   * Return {@link AnchorPoint} that includes given position\n   * If there's no {@link AnchorPoint} that includes the given position, return `null` instead\n   * @ko 주어진 좌표를 포함하는 {@link AnchorPoint}를 반환합니다\n   * 주어진 좌표를 포함하는 {@link AnchorPoint}가 없을 경우 `null`을 반환합니다\n   * @param {number} position A position to check<ko>확인할 좌표</ko>\n   * @return {AnchorPoint | null} The {@link AnchorPoint} that includes the given position<ko>해당 좌표를 포함하는 {@link AnchorPoint}</ko>\n   */\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    const anchors = this._anchors;\n    const anchorsIncludingPosition = anchors.filter(anchor => anchor.panel.includePosition(position, true));\n\n    return anchorsIncludingPosition.reduce((nearest: AnchorPoint | null, anchor) => {\n      if (!nearest) return anchor;\n\n      return Math.abs(nearest.position - position) < Math.abs(anchor.position - position)\n        ? nearest\n        : anchor;\n    }, null);\n  }\n\n  /**\n   * Return {@link AnchorPoint} nearest to given position\n   * If there're no {@link AnchorPoint}s, return `null` instead\n   * @ko 해당 좌표에서 가장 가까운 {@link AnchorPoint}를 반환합니다\n   * {@link AnchorPoint}가 하나도 없을 경우 `null`을 반환합니다\n   * @param {number} position A position to check<ko>확인할 좌표</ko>\n   * @return {AnchorPoint | null} The {@link AnchorPoint} nearest to the given position<ko>해당 좌표에 가장 인접한 {@link AnchorPoint}</ko>\n   */\n  public findNearestAnchor(position: number): AnchorPoint | null {\n    const anchors = this._anchors;\n\n    if (anchors.length <= 0) return null;\n\n    let prevDist = Infinity;\n    for (let anchorIdx = 0; anchorIdx < anchors.length; anchorIdx++) {\n      const anchor = anchors[anchorIdx];\n      const dist = Math.abs(anchor.position - position);\n\n      if (dist > prevDist) {\n        // Return previous anchor\n        return anchors[anchorIdx - 1];\n      }\n\n      prevDist = dist;\n    }\n\n    // Return last anchor\n    return anchors[anchors.length - 1];\n  }\n\n  /**\n   * Clamp the given position between camera's range\n   * @ko 주어진 좌표를 Camera가 도달 가능한 범위 사이의 값으로 만듭니다\n   * @param {number} position A position to clamp<ko>범위를 제한할 좌표</ko>\n   * @return {number} A clamped position<ko>범위 제한된 좌표</ko>\n   */\n  public clampToReachablePosition(position: number): number {\n    const range = this._range;\n    return clamp(position, range.min, range.max);\n  }\n\n  /**\n   * Check whether the given panel is inside of the Camera's range\n   * @ko 해당 {@link Panel}이 Camera가 도달 가능한 범위 내에 있는지를 반환합니다\n   * @param panel An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>\n   * @return {boolean} Whether the panel's inside Camera's range<ko>도달 가능한 범위 내에 해당 패널이 존재하는지 여부</ko>\n   */\n  public canReach(panel: Panel): boolean {\n    const range = this._range;\n\n    if (panel.removed) return false;\n\n    const panelPos = panel.position;\n\n    return panelPos >= range.min && panelPos <= range.max;\n  }\n\n  /**\n   * Check whether the given panel element is visible at the current position\n   * @ko 현재 좌표에서 해당 패널 엘리먼트를 볼 수 있는지 여부를 반환합니다\n   * @param panel An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>\n   * @return Whether the panel element is visible at the current position<ko>현재 위치에서 해당 패널 엘리먼트가 보이는지 여부</ko>\n   */\n  public canSee(panel: Panel): boolean {\n    const visibleRange = this.visibleRange;\n    // Should not include margin, as we don't declare what the margin is visible as what the panel is visible.\n    return panel.includeRange(visibleRange.min, visibleRange.max, false);\n  }\n\n  /**\n   * Update Camera's {@link Camera#alignPosition alignPosition}\n   * @ko Camera의 {@link Camera#alignPosition alignPosition}을 업데이트합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateAlignPos(): this {\n    const align = this._align;\n\n    const alignVal = typeof align === \"object\"\n      ? (align as { camera: string | number }).camera\n      : align;\n\n    this._alignPos = parseAlign(alignVal, this.size);\n\n    return this;\n  }\n\n  /**\n   * Update Camera's {@link Camera#anchorPoints anchorPoints}\n   * @ko Camera의 {@link Camera#anchorPoints anchorPoints}를 업데이트합니다\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {this}\n   */\n  public updateAnchors(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    this._anchors = panels.map((panel, index) => new AnchorPoint({\n      index,\n      position: panel.position,\n      panel\n    }));\n\n    return this;\n  }\n\n  /**\n   * Update Viewport's height to active panel's height\n   * @ko 현재 선택된 패널의 높이와 동일하도록 뷰포트의 높이를 업데이트합니다\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {this}\n   */\n  public updateAdaptiveHeight() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const activePanel = flicking.control.activePanel;\n\n    if (!flicking.horizontal || !flicking.adaptive || !activePanel) return;\n\n    flicking.viewport.setSize({\n      height: activePanel.height\n    });\n  }\n\n  public updateOffset() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const unRenderedPanels = flicking.panels.filter(panel => !panel.rendered);\n    const position = this._position;\n\n    this._offset = unRenderedPanels\n      .filter(panel => panel.position + panel.offset < position)\n      .reduce((offset, panel) => offset + panel.sizeIncludingMargin, 0);\n\n    this._applyTransform();\n  }\n\n  /**\n   * Reset the history of {@link Flicking#event:needPanel needPanel} events so it can be triggered again\n   * @ko 발생한 {@link Flicking#event:needPanel needPanel} 이벤트들을 초기화하여 다시 발생할 수 있도록 합니다\n   * @chainable\n   * @return {this}\n   */\n  public resetNeedPanelHistory(): this {\n    this._needPanelTriggered = { prev: false, next: false };\n    return this;\n  }\n\n  protected _resetInternalValues() {\n    this._position = 0;\n    this._alignPos = 0;\n    this._offset = 0;\n    this._range = { min: 0, max: 0 };\n    this._visiblePanels = [];\n    this._anchors = [];\n    this._needPanelTriggered = { prev: false, next: false };\n  }\n\n  protected async _refreshVisiblePanels() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    const newVisiblePanels = panels.filter(panel => this.canSee(panel));\n    const prevVisiblePanels = this._visiblePanels;\n    this._visiblePanels = newVisiblePanels;\n\n    const added: Panel[] = newVisiblePanels.filter(panel => !includes(prevVisiblePanels, panel));\n    const removed: Panel[] = prevVisiblePanels.filter(panel => !includes(newVisiblePanels, panel));\n\n    if (added.length > 0 || removed.length > 0) {\n      await flicking.renderer.render();\n\n      flicking.trigger(new ComponentEvent(EVENTS.VISIBLE_CHANGE, {\n        added,\n        removed,\n        visiblePanels: newVisiblePanels\n      }));\n    }\n  }\n\n  protected _checkNeedPanel(): void {\n    const needPanelTriggered = this._needPanelTriggered;\n\n    if (needPanelTriggered.prev && needPanelTriggered.next) return;\n\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    if (panels.length <= 0) {\n      if (!needPanelTriggered.prev) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.PREV }));\n        needPanelTriggered.prev = true;\n      }\n      if (!needPanelTriggered.next) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.NEXT }));\n        needPanelTriggered.next = true;\n      }\n\n      return;\n    }\n\n    const cameraPosition = this._position;\n    const cameraSize = this.size;\n    const cameraRange = this._range;\n    const needPanelThreshold = flicking.needPanelThreshold;\n\n    const cameraPrev = cameraPosition - this._alignPos;\n    const cameraNext = cameraPrev + cameraSize;\n\n    const firstPanel = panels[0];\n    const lastPanel = panels[panels.length - 1];\n\n    if (!needPanelTriggered.prev) {\n      const firstPanelPrev = firstPanel.range.min;\n\n      if (cameraPrev <= (firstPanelPrev + needPanelThreshold) || cameraPosition <= (cameraRange.min + needPanelThreshold)) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.PREV }));\n        needPanelTriggered.prev = true;\n      }\n    }\n\n    if (!needPanelTriggered.next) {\n      const lastPanelNext = lastPanel.range.max;\n\n      if (cameraNext >= (lastPanelNext - needPanelThreshold) || cameraPosition >= (cameraRange.max - needPanelThreshold)) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.NEXT }));\n        needPanelTriggered.next = true;\n      }\n    }\n  }\n\n  protected _checkReachEnd(prevPos: number, newPos: number): void {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const range = this._range;\n\n    const wasBetweenRange = prevPos > range.min && prevPos < range.max;\n    const isBetweenRange = newPos > range.min && newPos < range.max;\n\n    if (!wasBetweenRange || isBetweenRange) return;\n\n    const direction = newPos <= range.min ? DIRECTION.PREV : DIRECTION.NEXT;\n\n    flicking.trigger(new ComponentEvent(EVENTS.REACH_EDGE, {\n      direction\n    }));\n  }\n\n  protected _applyTransform(): void {\n    const el = this._el;\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n\n    const actualPosition = this._position - this._alignPos - this._offset;\n\n    el.style[this._transform] = flicking.horizontal\n      ? `translate(${-actualPosition}px)`\n      : `translate(0, ${-actualPosition}px)`;\n  }\n\n  protected _checkTranslateSupport = () => {\n    const transforms = [\"webkitTransform\", \"msTransform\", \"MozTransform\", \"OTransform\", \"transform\"];\n\n    const supportedStyle = document.documentElement.style;\n    let transformName = \"\";\n    for (const prefixedTransform of transforms) {\n      if (prefixedTransform in supportedStyle) {\n        transformName = prefixedTransform;\n      }\n    }\n\n    if (!transformName) {\n      throw new FlickingError(ERROR.MESSAGE.TRANSFORM_NOT_SUPPORTED, ERROR.CODE.TRANSFORM_NOT_SUPPORTED);\n    }\n\n    this._transform = transformName;\n  };\n}\n\nexport default Camera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getFlickingAttached } from \"../utils\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A {@link Camera} that can move from the position of the first panel to the position of the last panel\n * @ko 첫번째 패널의 좌표로부터 마지막 패널의 좌표로까지 이동할 수 있는 종류의 {@link Camera}\n */\nclass LinearCamera extends Camera {\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const renderer = flicking.renderer;\n\n    const firstPanel = renderer.getPanel(0);\n    const lastPanel = renderer.getPanel(renderer.panelCount - 1);\n\n    this._range = { min: firstPanel?.position ?? 0, max: lastPanel?.position ?? 0 };\n    return this;\n  }\n}\n\nexport default LinearCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport { DIRECTION } from \"../const/external\";\nimport { circulatePosition, getFlickingAttached } from \"../utils\";\nimport { ValueOf } from \"../type/internal\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A data of the position that changes order of the panel elements\n * @ko 패널 엘리먼트 순서가 변경되는 좌표의 데이터\n * @interface\n * @property {Panel} panel Toggling panel<ko>순서를 변경할 패널</ko>\n * @property {DIRECTION} direction Toggling position<ko>순서를 변경할 방향</ko>\n * @property {boolean} toggled Whether the panel has toggled its position to `direction`<ko>`direction` 방향으로 패널 위치를 변경했는지 여부를 나타내는 값</ko>\n */\nexport interface TogglePoint {\n  panel: Panel;\n  direction: ValueOf<typeof DIRECTION>;\n  toggled: boolean;\n}\n\n/**\n * A {@link Camera} that connects the last panel and the first panel, enabling continuous loop\n * @ko 첫번째 패널과 마지막 패널이 이어진 상태로, 무한히 회전할 수 있는 종류의 {@link Camera}\n */\nclass CircularCamera extends Camera {\n  private _circularOffset: number = 0;\n  private _circularEnabled: boolean = false;\n\n  public get offset() { return this._offset - this._circularOffset; }\n  public get controlParams() { return { range: this._range, position: this._position, circular: this._circularEnabled }; }\n\n  public getPrevAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    if (!this._circularEnabled || anchor.index !== 0) return super.getPrevAnchor(anchor);\n\n    const anchors = this._anchors;\n    const rangeDiff = this.rangeDiff;\n    const lastAnchor = anchors[anchors.length - 1];\n\n    return new AnchorPoint({\n      index: lastAnchor.index,\n      position: lastAnchor.position - rangeDiff,\n      panel: lastAnchor.panel\n    });\n  }\n\n  public getNextAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    const anchors = this._anchors;\n\n    if (!this._circularEnabled || anchor.index !== anchors.length - 1) return super.getNextAnchor(anchor);\n\n    const rangeDiff = this.rangeDiff;\n    const firstAnchor = anchors[0];\n\n    return new AnchorPoint({\n      index: firstAnchor.index,\n      position: firstAnchor.position + rangeDiff,\n      panel: firstAnchor.panel\n    });\n  }\n\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    if (!this._circularEnabled) return super.findAnchorIncludePosition(position);\n\n    const range = this._range;\n    const positionInRange = circulatePosition(position, range.min, range.max);\n    const anchorInRange = super.findAnchorIncludePosition(positionInRange);\n\n    if (!anchorInRange) return null;\n\n    const rangeDiff = this.rangeDiff;\n\n    if (position < range.min) {\n      const loopCount = -Math.floor((range.min - position) / rangeDiff) - 1;\n\n      return new AnchorPoint({\n        index: anchorInRange.index,\n        position: anchorInRange.position + rangeDiff * loopCount,\n        panel: anchorInRange.panel\n      });\n    } else if (position > range.max) {\n      const loopCount = Math.floor((position - range.max) / rangeDiff) + 1;\n\n      return new AnchorPoint({\n        index: anchorInRange.index,\n        position: anchorInRange.position + rangeDiff * loopCount,\n        panel: anchorInRange.panel\n      });\n    }\n\n    return anchorInRange;\n  }\n\n  public clampToReachablePosition(position: number): number {\n    // Basically all position is reachable for circular camera\n    return this._circularEnabled\n      ? position\n      : super.clampToReachablePosition(position);\n  }\n\n  public canReach(panel: Panel): boolean {\n    if (panel.removed) return false;\n\n    return this._circularEnabled\n      // Always reachable on circular mode\n      ? true\n      : super.canReach(panel);\n  }\n\n  public canSee(panel: Panel): boolean {\n    const range = this._range;\n    const rangeDiff = this.rangeDiff;\n    const visibleRange = this.visibleRange;\n    const visibleInCurrentRange = super.canSee(panel);\n\n    if (!this._circularEnabled) {\n      return visibleInCurrentRange;\n    }\n\n    // Check looped visible area for circular case\n    if (visibleRange.min < range.min) {\n      return visibleInCurrentRange || panel.includeRange(visibleRange.min + rangeDiff, visibleRange.max + rangeDiff, false);\n    } else if (visibleRange.max > range.max) {\n      return visibleInCurrentRange || panel.includeRange(visibleRange.min - rangeDiff, visibleRange.max - rangeDiff, false);\n    }\n\n    return visibleInCurrentRange;\n  }\n\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const renderer = flicking.renderer;\n\n    const panels = renderer.panels;\n    if (panels.length <= 0) {\n      this._resetInternalValues();\n      return this;\n    }\n\n    const firstPanel = panels[0]!;\n    const lastPanel = panels[panels.length - 1]!;\n    const firstPanelPrev = firstPanel.range.min - firstPanel.margin.prev;\n    const lastPanelNext = lastPanel.range.max + lastPanel.margin.next;\n\n    const visibleSize = this.size;\n    const panelSizeSum = lastPanelNext - firstPanelPrev;\n\n    const canSetCircularMode = panels\n      .every(panel => panelSizeSum - panel.size >= visibleSize);\n    this._circularEnabled = canSetCircularMode;\n\n    if (canSetCircularMode) {\n      this._range = { min: firstPanelPrev, max: lastPanelNext };\n\n      panels.forEach(panel => panel.updateCircularToggleDirection());\n    } else {\n      this._range = { min: firstPanel.position, max: lastPanel.position };\n    }\n\n    this._updateCircularOffset();\n\n    return this;\n  }\n\n  public async lookAt(pos: number) {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const prevPos = this._position;\n\n    if (pos === prevPos) return await super.lookAt(pos);\n\n    const panels = flicking.renderer.panels;\n    const toggled = panels.map(panel => panel.toggle(prevPos, pos));\n\n    this._position = pos;\n\n    if (toggled.some(isToggled => isToggled)) {\n      this._updateCircularOffset();\n      await flicking.renderer.render();\n    }\n\n    return await super.lookAt(pos);\n  }\n\n  protected _applyTransform(): void {\n    const el = this._el;\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n\n    const actualPosition = this._position - this._alignPos - this._offset + this._circularOffset;\n\n    el.style[this._transform] = flicking.horizontal\n      ? `translate(${-actualPosition}px)`\n      : `translate(0, ${-actualPosition}px)`;\n  }\n\n  protected _resetInternalValues() {\n    super._resetInternalValues();\n    this._circularOffset = 0;\n    this._circularEnabled = false;\n  }\n\n  private _calcPanelAreaSum(panels: Panel[]) {\n    return panels.reduce((sum: number, panel: Panel) => sum + panel.sizeIncludingMargin, 0);\n  }\n\n  private _updateCircularOffset() {\n    if (!this._circularEnabled) {\n      this._circularOffset = 0;\n      return;\n    }\n\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const toggledPrev: Panel[] = [];\n    const toggledNext: Panel[] = [];\n\n    flicking.panels\n      .filter(panel => panel.toggled)\n      .forEach(panel => {\n        if (panel.toggleDirection === DIRECTION.PREV) {\n          toggledPrev.push(panel);\n        } else {\n          toggledNext.push(panel);\n        }\n      });\n\n    this._circularOffset = this._calcPanelAreaSum(toggledPrev) - this._calcPanelAreaSum(toggledNext);\n  }\n}\n\nexport default CircularCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport { getFlickingAttached } from \"../utils\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A {@link Camera} that set range not to go out of the first/last panel, so it won't show empty spaces before/after the first/last panel\n * @ko 첫번째와 마지막 패널 밖으로 넘어가지 못하도록 범위를 설정하여, 첫번째/마지막 패널 전/후의 빈 공간을 보이지 않도록 하는 종류의 {@link Camera}\n */\nclass BoundCamera extends Camera {\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const renderer = flicking.renderer;\n    const alignPos = this._alignPos;\n\n    const firstPanel = renderer.getPanel(0);\n    const lastPanel = renderer.getPanel(renderer.panelCount - 1);\n\n    if (!firstPanel || !lastPanel) {\n      this._range = { min: 0, max: 0 };\n      return this;\n    }\n\n    const viewportSize = this.size;\n    const firstPanelPrev = firstPanel.range.min;\n    const lastPanelNext = lastPanel.range.max;\n    const panelAreaSize = lastPanelNext - firstPanelPrev;\n    const canSetBoundMode = viewportSize < panelAreaSize;\n\n    if (canSetBoundMode) {\n      this._range = { min: firstPanelPrev + alignPos, max: lastPanelNext - viewportSize + alignPos };\n    } else {\n      this._range = { min: firstPanel.position, max: lastPanel.position };\n    }\n\n    return this;\n  }\n\n  public updateAnchors(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    if (panels.length <= 0) {\n      this._anchors = [];\n      return this;\n    }\n\n    const range = this._range;\n    const reachablePanels = panels.filter(panel => this.canReach(panel));\n\n    if (reachablePanels.length > 0) {\n      const shouldPrependBoundAnchor = reachablePanels[0].position !== range.min;\n      const shouldAppendBoundAnchor = reachablePanels[reachablePanels.length - 1].position !== range.max;\n      const indexOffset = shouldPrependBoundAnchor ? 1 : 0;\n\n      const newAnchors = reachablePanels.map((panel, idx) => new AnchorPoint({\n        index: idx + indexOffset,\n        position: panel.position,\n        panel\n      }));\n\n      if (shouldPrependBoundAnchor) {\n        newAnchors.splice(0, 0, new AnchorPoint({\n          index: 0,\n          position: range.min,\n          panel: panels[reachablePanels[0].index - 1]\n        }));\n      }\n\n      if (shouldAppendBoundAnchor) {\n        newAnchors.push(new AnchorPoint({\n          index: newAnchors.length,\n          position: range.max,\n          panel: panels[reachablePanels[reachablePanels.length - 1].index + 1]\n        }));\n      }\n\n      this._anchors = newAnchors;\n    } else if (range.min !== range.max) {\n      // There're more than 2 panels\n      const nearestPanelAtMin = this._findNearestPanel(range.min, panels);\n      const panelAtMin = nearestPanelAtMin.index === panels.length - 1\n        ? nearestPanelAtMin.prev()!\n        : nearestPanelAtMin;\n      const panelAtMax = panelAtMin.next()!;\n\n      this._anchors = [\n        new AnchorPoint({\n          index: 0,\n          position: range.min,\n          panel: panelAtMin\n        }),\n        new AnchorPoint({\n          index: 1,\n          position: range.max,\n          panel: panelAtMax\n        })\n      ];\n    } else {\n      this._anchors = [new AnchorPoint({\n        index: 0,\n        position: range.min,\n        panel: this._findNearestPanel(range.min, panels)\n      })];\n    }\n\n    return this;\n  }\n\n  private _findNearestPanel(pos: number, panels: Panel[]): Panel {\n    let prevDist = Infinity;\n    for (let panelIdx = 0; panelIdx < panels.length; panelIdx++) {\n      const panel = panels[panelIdx];\n      const dist = Math.abs(panel.position - pos);\n\n      if (dist > prevDist) {\n        // Return previous anchor\n        return panels[panelIdx - 1];\n      }\n\n      prevDist = dist;\n    }\n\n    // Return last anchor\n    return panels[panels.length - 1];\n  }\n}\n\nexport default BoundCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\n\nimport RenderingStrategy from \"./RenderingStrategy\";\n\nclass RawRenderingStrategy implements RenderingStrategy {\n  public updateRenderingPanels(flicking: Flicking) {\n    // RawRenderingStrategy always renders all panel elements\n    flicking.panels.forEach(panel => panel.markForShow());\n  }\n}\n\nexport default RawRenderingStrategy;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking, { FlickingOptions } from \"../Flicking\";\nimport Panel, { PanelOptions } from \"../core/panel/Panel\";\nimport { ALIGN, EVENTS } from \"../const/external\";\nimport { getFlickingAttached, getMinusCompensatedIndex, includes } from \"../utils\";\n\nimport RenderingStrategy from \"./RenderingStrategy/RenderingStrategy\";\nimport RawRenderingStrategy from \"./RenderingStrategy/RawRenderingStrategy\";\n\nexport interface RendererOptions {\n  align: FlickingOptions[\"align\"];\n  strategy: RenderingStrategy;\n}\n\n/**\n * A component that manages {@link Panel} and its elements\n * @ko {@link Panel}과 그 엘리먼트들을 관리하는 컴포넌트\n */\nabstract class Renderer {\n  // Internal States\n  protected _flicking: Flicking | null;\n  protected _panels: Panel[];\n  protected _renderingStrategy: RenderingStrategy;\n\n  // Options\n  protected _align: RendererOptions[\"align\"];\n\n  // Internal states Getter\n  /**\n   * Array of panels\n   * @ko 전체 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get panels() { return this._panels; }\n  /**\n   * Count of panels\n   * @ko 전체 패널의 개수\n   * @type {number}\n   * @readonly\n   */\n  public get panelCount() { return this._panels.length; }\n\n  // Options Getter\n  /**\n   * A {@link Panel}'s {@link Panel#align align} value that applied to all panels\n   * @ko {@link Panel}에 공통적으로 적용할 {@link Panel#align align} 값\n   * @type {Constants.ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Setter\n  public set align(val: RendererOptions[\"align\"]) {\n    this._align = val;\n\n    const panelAlign = this._getPanelAlign();\n    this._panels.forEach(panel => { panel.align = panelAlign; });\n  }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An {@link Flicking#align align} value that will be applied to all panels<ko>전체 패널에 적용될 {@link Flicking#align align} 값</ko>\n   */\n  public constructor({\n    align = ALIGN.CENTER,\n    strategy = new RawRenderingStrategy()\n  }: Partial<RendererOptions> = {}) {\n    this._align = align;\n    this._flicking = null;\n    this._renderingStrategy = strategy;\n    this._panels = [];\n  }\n\n  /**\n   * Render panel elements inside the camera element\n   * @ko 패널 엘리먼트들을 카메라 엘리먼트 내부에 렌더링합니다\n   * @method\n   * @abstract\n   * @memberof Renderer\n   * @instance\n   * @name render\n   * @chainable\n   * @return {this}\n   */\n  public abstract render(): Promise<void>;\n  public abstract forceRenderAllPanels(): Promise<void>;\n\n  protected abstract _collectPanels(): void;\n  protected abstract _createPanel(el: any, options: PanelOptions): Panel;\n  protected abstract _insertPanelElements(panels: Panel[], nextSibling: Panel | null): void;\n  protected abstract _removePanelElements(panels: Panel[]): void;\n\n  /**\n   * Initialize Renderer\n   * @ko Renderer를 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n    this._collectPanels();\n\n    return this;\n  }\n\n  /**\n   * Destroy Renderer and return to initial state\n   * @ko Renderer를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this._flicking = null;\n    this._panels = [];\n  }\n\n  /**\n   * Return the {@link Panel} at the given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.\n   * @return {Panel | null} Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>\n   * @see Panel\n   */\n  public getPanel(index: number): Panel | null {\n    return this._panels[index] || null;\n  }\n\n  /**\n   * Update all panel sizes\n   * @ko 모든 패널의 크기를 업데이트합니다\n   * @chainable\n   * @return {this}\n   */\n  public updatePanelSize(): this {\n    this._panels.forEach(panel => panel.resize());\n    return this;\n  }\n\n  /**\n   * Insert new panels at given index\n   * This will increase index of panels after by the number of panels added\n   * @ko 주어진 인덱스에 새로운 패널들을 추가합니다\n   * 해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.\n   * @param {number} index Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>\n   * @param {any[]} elements An array of element or framework component with element in it<ko>엘리먼트의 배열 혹은 프레임워크에서 엘리먼트를 포함한 컴포넌트들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   */\n  public batchInsert(...items: Array<{\n    index: number;\n    elements: any[];\n  }>): Panel[] {\n    const panels = this._panels;\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    const { control } = flicking;\n    const align = this._getPanelAlign();\n\n    const allPanelsInserted = items.reduce((addedPanels, item) => {\n      const insertingIdx = getMinusCompensatedIndex(item.index, panels.length);\n      const panelsPushed = panels.slice(insertingIdx);\n      const panelsInserted = item.elements.map(el => this._createPanel(el, { index: insertingIdx, align, flicking }));\n\n      panels.splice(insertingIdx, 0, ...panelsInserted);\n\n      // Resize the newly added panels\n      panelsInserted.forEach(panel => panel.resize());\n\n      const insertedSize = this._getPanelSizeSum(panelsInserted);\n\n      // Update panel indexes & positions\n      panelsPushed.forEach(panel => {\n        panel.increaseIndex(panelsInserted.length);\n        panel.increasePosition(insertedSize);\n      });\n\n      // Insert the actual elements as camera element's children\n      this._insertPanelElements(panelsInserted, panelsPushed[0] ?? null);\n\n      return [...addedPanels, ...panelsInserted];\n    }, []);\n\n    if (allPanelsInserted.length <= 0) return [];\n\n    // Update camera & control\n    this._updateCameraAndControl();\n\n    void this.render();\n\n    // Move to the first panel added if no panels existed\n    // FIXME: fix for animating case\n    if (allPanelsInserted.length > 0 && !control.animating) {\n      void control.moveToPanel(control.activePanel || allPanelsInserted[0], {\n        duration: 0\n      }).catch(() => void 0);\n    }\n\n    flicking.camera.updateOffset();\n\n    flicking.trigger(new ComponentEvent(EVENTS.PANEL_CHANGE, {\n      added: allPanelsInserted,\n      removed: []\n    }));\n\n    return allPanelsInserted;\n  }\n\n  /**\n   * Remove the panel at the given index\n   * This will decrease index of panels after by the number of panels removed\n   * @ko 주어진 인덱스의 패널을 제거합니다\n   * 해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다\n   * @param {number} index Index of panel to remove<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>\n   * @return An array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public batchRemove(...items: Array<{ index: number; deleteCount: number }>): Panel[] {\n    const panels = this._panels;\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    const { camera, control } = flicking;\n    const activePanel = control.activePanel;\n    const activeIndex = control.activeIndex;\n\n    const allPanelsRemoved = items.reduce((removed, item) => {\n      const { index, deleteCount } = item;\n      const removingIdx = getMinusCompensatedIndex(index, panels.length);\n\n      const panelsPulled = panels.slice(removingIdx + deleteCount);\n      const panelsRemoved = panels.splice(removingIdx, deleteCount);\n\n      if (panelsRemoved.length <= 0) return [];\n\n      // Update panel indexes & positions\n      const removedSize = this._getPanelSizeSum(panelsRemoved);\n      panelsPulled.forEach(panel => {\n        panel.decreaseIndex(panelsRemoved.length);\n        panel.decreasePosition(removedSize);\n      });\n\n      this._removePanelElements(panelsRemoved);\n\n      // Remove panel elements\n      panelsRemoved.forEach(panel => panel.destroy());\n\n      // Update camera & control\n      this._updateCameraAndControl();\n\n      if (includes(panelsRemoved, activePanel)) {\n        control.resetActive();\n      }\n\n      return [...removed, ...panelsRemoved];\n    }, []);\n\n    void this.render();\n\n    // FIXME: fix for animating case\n    if (allPanelsRemoved.length > 0 && !control.animating) {\n      const targetPanel = includes(allPanelsRemoved, activePanel)\n        ? (panels[activeIndex] || panels[panels.length - 1])\n        : activePanel;\n\n      if (targetPanel) {\n        void control.moveToPanel(targetPanel, {\n          duration: 0\n        }).catch(() => void 0);\n      } else {\n        // All panels removed\n        void camera.lookAt(0);\n      }\n    }\n\n    flicking.camera.updateOffset();\n\n    flicking.trigger(new ComponentEvent(EVENTS.PANEL_CHANGE, {\n      added: [],\n      removed: allPanelsRemoved\n    }));\n\n    return allPanelsRemoved;\n  }\n\n  protected _getPanelAlign() {\n    const align = this._align;\n\n    return typeof align === \"object\"\n      ? (align as { panel: string | number }).panel\n      : align;\n  }\n\n  protected _getPanelSizeSum(panels: Panel[]): number {\n    const firstPanel = panels[0];\n    const lastPanel = panels[panels.length - 1];\n\n    const marginDiff = lastPanel.margin.next - firstPanel.margin.prev;\n\n    return (lastPanel.range.max - firstPanel.range.min) + marginDiff;\n  }\n\n  protected _updateCameraAndControl() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const { camera, control } = flicking;\n\n    camera.updateRange();\n    camera.updateAnchors();\n    camera.resetNeedPanelHistory();\n    control.updateInput();\n  }\n}\n\nexport default Renderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\nimport { getProgress, getStyle, parseAlign } from \"../../utils\";\nimport { ALIGN, DIRECTION } from \"../../const/external\";\nimport { LiteralUnion, ValueOf } from \"../../type/internal\";\n\nexport interface PanelOptions {\n  index: number;\n  align: LiteralUnion<ValueOf<typeof ALIGN>> | number;\n  flicking: Flicking;\n}\n\nabstract class Panel {\n  // Internal States\n  protected _flicking: Flicking;\n  protected _index: number;\n  protected _pos: number;\n  protected _size: number;\n  protected _height: number;\n  protected _margin: { prev: number; next: number };\n  protected _alignPos: number; // Actual align pos\n  protected _removed: boolean;\n  protected _toggleDirection: ValueOf<typeof DIRECTION>;\n  protected _toggled: boolean;\n  protected _togglePosition: number;\n\n  // Options\n  protected _align: PanelOptions[\"align\"];\n\n  // Internal States Getter\n  /**\n   * `HTMLElement` that panel's referencing\n   * @ko 패널이 참조하고 있는 `HTMLElement`\n   * @type {HTMLElement}\n   * @readonly\n   */\n  abstract get element(): HTMLElement;\n  /**\n   * Index of the panel\n   * @ko 패널의 인덱스\n   * @type {number}\n   * @readonly\n   */\n  public get index() { return this._index; }\n  /**\n   * Position of the panel, including {@link Panel#alignPosition alignPosition}\n   * @ko 패널의 현재 좌표, {@link Panel#alignPosition alignPosition}을 포함하고 있습니다\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._pos + this._alignPos; }\n  /**\n   * Cached size of the panel element\n   * This is equal to {@link Panel#element element}'s `offsetWidth` if {@link Flicking#horizontal horizontal} is `true`, and `offsetHeight` else\n   * @ko 패널 엘리먼트의 캐시된 크기\n   * 이 값은 {@link Flicking#horizontal horizontal}이 `true`일 경우 {@link Panel#element element}의 `offsetWidth`와 동일하고, `false`일 경우 `offsetHeight`와 동일합니다\n   * @type {number}\n   * @readonly\n   */\n  public get size() { return this._size; }\n  /**\n   * Panel's size including CSS `margin`\n   * This value includes {@link Panel#element element}'s margin left/right if {@link Flicking#horizontal horizontal} is `true`, and margin top/bottom else\n   * @ko CSS `margin`을 포함한 패널의 크기\n   * 이 값은 {@link Flicking#horizontal horizontal}이 `true`일 경우 margin left/right을 포함하고, `false`일 경우 margin top/bottom을 포함합니다\n   * @type {number}\n   * @readonly\n   */\n  public get sizeIncludingMargin() { return this._size + this._margin.prev + this._margin.next; }\n  /**\n   * Height of the panel element\n   * @ko 패널 엘리먼트의 높이\n   * @type {number}\n   * @readonly\n   */\n  public get height() { return this._height; }\n  /**\n   * Cached CSS `margin` value of the panel element\n   * @ko 패널 엘리먼트의 CSS `margin` 값\n   * @type {object}\n   * @property {number} prev CSS `margin-left` when the {@link Flicking#horizontal horizontal} is `true`, and `margin-top` else\n   * <ko>{@link Flicking#horizontal horizontal}이 `true`일 경우 `margin-left`, `false`일 경우 `margin-top`에 해당하는 값</ko>\n   * @property {number} next CSS `margin-right` when the {@link Flicking#horizontal horizontal} is `true`, and `margin-bottom` else\n   * <ko>{@link Flicking#horizontal horizontal}이 `true`일 경우 `margin-right`, `false`일 경우 `margin-bottom`에 해당하는 값</ko>\n   * @readonly\n   */\n  public get margin() { return this._margin; }\n  /**\n   * Align position inside the panel where {@link Camera}'s {@link Camera#alignPosition alignPosition} inside viewport should be located at\n   * @ko 패널의 정렬 기준 위치. {@link Camera}의 뷰포트 내에서의 {@link Camera#alignPosition alignPosition}이 위치해야 하는 곳입니다\n   * @type {number}\n   * @readonly\n   */\n  public get alignPosition() { return this._alignPos; }\n  /**\n   * A value indicating whether the panel's {@link Flicking#remove remove}d\n   * @ko 패널이 {@link Flicking#remove remove}되었는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get removed() { return this._removed; }\n  /**\n   * A value indicating whether the panel's element is being rendered on the screen\n   * @ko 패널의 엘리먼트가 화면상에 렌더링되고있는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract get rendered();\n  /**\n   * Panel element's range of the bounding box\n   * @ko 패널 엘리먼트의 Bounding box 범위\n   * @type {object}\n   * @property {number} [min] Bounding box's left({@link Flicking#horizontal horizontal}: true) / top({@link Flicking#horizontal horizontal}: false)\n   * @property {number} [max] Bounding box's right({@link Flicking#horizontal horizontal}: true) / bottom({@link Flicking#horizontal horizontal}: false)\n   * @readonly\n   */\n  public get range() { return { min: this._pos, max: this._pos + this._size }; }\n  /**\n   * A value indicating whether the panel's position is toggled by circular behavior\n   * @ko 패널의 위치가 circular 동작에 의해 토글되었는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get toggled() { return this._toggled; }\n  /**\n   * A direction where the panel's position is toggled\n   * @ko 패널의 위치가 circular 동작에 의해 토글되는 방향\n   * @type {DIRECTION}\n   * @readonly\n   */\n  public get toggleDirection() { return this._toggleDirection; }\n  /**\n   * Actual position offset determined by {@link Panel#order}\n   * @ko {@link Panel#order}에 의한 실제 위치 변경값\n   * @type {number}\n   * @readonly\n   */\n  public get offset() {\n    const toggleDirection = this._toggleDirection;\n    const cameraRangeDiff = this._flicking.camera.rangeDiff;\n\n    return toggleDirection === DIRECTION.NONE || !this._toggled\n      ? 0\n      : toggleDirection === DIRECTION.PREV\n        ? -cameraRangeDiff\n        : cameraRangeDiff;\n  }\n\n  /**\n   * Progress of movement between previous or next panel relative to current panel\n   * @ko 이 패널로부터 이전/다음 패널으로의 이동 진행률\n   * @type {number}\n   * @readonly\n   */\n  public get progress() {\n    const flicking = this._flicking;\n\n    return this.index - flicking.camera.progress;\n  }\n\n  /**\n   * Progress of movement between points that panel is completely invisible outside of viewport(prev direction: -1, selected point: 0, next direction: 1)\n   * @ko 현재 패널이 뷰포트 영역 밖으로 완전히 사라지는 지점을 기준으로 하는 진행도(prev방향: -1, 선택 지점: 0, next방향: 1)\n   * @type {number}\n   * @readonly\n   */\n  public get outsetProgress() {\n    const position = this.position + this.offset;\n    const alignPosition = this._alignPos;\n    const camera = this._flicking.camera;\n    const camPos = camera.position;\n\n    if (camPos === position) {\n      return 0;\n    }\n\n    if (camPos < position) {\n      const disappearPosNext = position + (camera.size - camera.alignPosition) + alignPosition;\n\n      return -getProgress(camPos, position, disappearPosNext);\n    } else {\n      const disappearPosPrev = position - (camera.alignPosition + this._size - alignPosition);\n\n      return 1 - getProgress(camPos, disappearPosPrev, position);\n    }\n  }\n\n  /**\n   * Percentage of area where panel is visible in the viewport\n   * @ko 뷰포트 안에서 패널이 보이는 영역의 비율\n   * @type {number}\n   * @readonly\n   */\n  public get visibleRatio() {\n    const range = this.range;\n    const size = this._size;\n    const offset = this.offset;\n    const visibleRange = this._flicking.camera.visibleRange;\n\n    const checkingRange = {\n      min: range.min + offset,\n      max: range.max + offset\n    };\n\n    if (checkingRange.max <= visibleRange.min || checkingRange.min >= visibleRange.max) {\n      return 0;\n    }\n\n    let visibleSize = size;\n\n    if (visibleRange.min > checkingRange.min) {\n      visibleSize -= visibleRange.min - checkingRange.min;\n    }\n    if (visibleRange.max < checkingRange.max) {\n      visibleSize -= checkingRange.max - visibleRange.max;\n    }\n\n    return visibleSize / size;\n  }\n\n  // Options Getter\n  /**\n   * A value indicating where the {@link Panel#alignPosition alignPosition} should be located at inside the panel element\n   * @ko {@link Panel#alignPosition alignPosition}이 패널 내의 어디에 위치해야 하는지를 나타내는 값\n   * @type {Constants.ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Getter\n  public set align(val: PanelOptions[\"align\"]) { this._align = val; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor({\n    index,\n    align,\n    flicking\n  }: PanelOptions) {\n    this._index = index;\n    this._flicking = flicking;\n\n    this._align = align;\n\n    this._removed = false;\n    this._resetInternalStates();\n  }\n\n  /**\n   * Mark panel element to be appended on the camera element\n   * @internal\n   */\n  public abstract markForShow();\n\n  /**\n   * Mark panel element to be removed from the camera element\n   * @internal\n   */\n  public abstract markForHide();\n\n  /**\n   * Update size of the panel\n   * @ko 패널의 크기를 갱신합니다\n   * @chainable\n   * @return {this}\n   */\n  public resize(): this {\n    const el = this.element;\n    const elStyle = getStyle(el);\n    const flicking = this._flicking;\n    const horizontal = flicking.horizontal;\n    const prevPanel = flicking.renderer.panels[this._index - 1];\n\n    this._size = horizontal ? el.offsetWidth : el.offsetHeight;\n\n    this._margin = horizontal\n      ? {\n        prev: parseFloat(elStyle.marginLeft || \"0\"),\n        next: parseFloat(elStyle.marginRight || \"0\")\n      } : {\n        prev: parseFloat(elStyle.marginTop || \"0\"),\n        next: parseFloat(elStyle.marginBottom || \"0\")\n      };\n\n    this._pos = prevPanel\n      ? prevPanel.range.max + prevPanel.margin.next + this._margin.prev\n      : this._margin.prev;\n\n    this._height = horizontal ? el.offsetHeight : this._size;\n\n    this._updateAlignPos();\n\n    return this;\n  }\n\n  /**\n   * Check whether the given element is inside of this panel's {@link Panel#element element}\n   * @ko 해당 엘리먼트가 이 패널의 {@link Panel#element element} 내에 포함되어 있는지를 반환합니다\n   * @param {HTMLElement} element The HTMLElement to check<ko>확인하고자 하는 HTMLElement</ko>\n   * @return {boolean} A Boolean value indicating the element is inside of this panel {@link Panel#element element}<ko>패널의 {@link Panel#element element}내에 해당 엘리먼트 포함 여부</ko>\n   */\n  public contains(element: HTMLElement): boolean {\n    return this.element.contains(element);\n  }\n\n  /**\n   * Reset internal state and set {@link Panel#removed removed} to `true`\n   * @ko 내부 상태를 초기화하고 {@link Panel#removed removed}를 `true`로 설정합니다.\n   * @return {void}\n   */\n  public destroy(): void {\n    this._resetInternalStates();\n    this._removed = true;\n  }\n\n  /**\n   * Check whether the given position is inside of this panel's {@link Panel#range range}\n   * @ko 주어진 좌표가 현재 패널의 {@link Panel#range range}내에 속해있는지를 반환합니다.\n   * @param {number} pos A position to check<ko>확인하고자 하는 좌표</ko>\n   * @param {boolean} [includeMargin=false] Include {@link Panel#margin margin} to the range<ko>패널 영역에 {@link Panel#margin margin}값을 포함시킵니다</ko>\n   * @return {boolean} A Boolean value indicating whether the given position is included in the panel range<ko>해당 좌표가 패널 영역 내에 속해있는지 여부</ko>\n   */\n  public includePosition(pos: number, includeMargin: boolean = false): boolean {\n    return this.includeRange(pos, pos, includeMargin);\n  }\n\n  /**\n   * Check whether the given range is fully included in this panel's area\n   * @ko 주어진 범위가 이 패널 내부에 완전히 포함되는지를 반환합니다\n   * @param {number} min Minimum value of the range to check<ko>확인하고자 하는 최소 범위</ko>\n   * @param {number} max Maximum value of the range to check<ko>확인하고자 하는 최대 범위</ko>\n   * @param {boolean} [includeMargin=false] Include {@link Panel#margin margin} to the range<ko>패널 영역에 {@link Panel#margin margin}값을 포함시킵니다</ko>\n   * @returns {boolean} A Boolean value indicating whether the given range is fully included in the panel range<ko>해당 범위가 패널 영역 내에 완전히 속해있는지 여부</ko>\n   */\n  public includeRange(min: number, max: number, includeMargin: boolean = false): boolean {\n    const margin = this._margin;\n    const panelRange = this.range;\n\n    if (includeMargin) {\n      panelRange.min -= margin.prev;\n      panelRange.max += margin.next;\n    }\n\n    return max >= panelRange.min && min <= panelRange.max;\n  }\n\n  /**\n   * Move {@link Camera} to this panel\n   * @ko {@link Camera}를 이 패널로 이동합니다\n   * @param {number} [duration] Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @returns {Promise<void>} A Promise which will be resolved after reaching the panel<ko>패널 도달시에 resolve되는 Promise</ko>\n   */\n  public focus(duration?: number) {\n    return this._flicking.moveTo(this._index, duration);\n  }\n\n  /**\n   * Get previous(`index - 1`) panel. When the previous panel does not exist, this will return `null` instead\n   * If the {@link Flicking#circularEnabled circular} is enabled, this will return the last panel if called from the first panel\n   * @ko 이전(`index - 1`) 패널을 반환합니다. 이전 패널이 없을 경우 `null`을 반환합니다\n   * {@link Flicking#circularEnabled circular} 모드가 활성화되었을 때 첫번째 패널에서 이 메소드를 호출할 경우 마지막 패널을 반환합니다\n   * @returns {Panel | null} The previous panel<ko>이전 패널</ko>\n   */\n  public prev(): Panel | null {\n    const index = this._index;\n    const flicking = this._flicking;\n    const renderer = flicking.renderer;\n    const panelCount = renderer.panelCount;\n\n    if (panelCount === 1) return null;\n\n    return flicking.circularEnabled\n      ? renderer.getPanel(index === 0 ? panelCount - 1 : index - 1)\n      : renderer.getPanel(index - 1);\n  }\n\n  /**\n   * Get next(`index + 1`) panel. When the next panel does not exist, this will return `null` instead\n   * If the {@link Flicking#circularEnabled circular} is enabled, this will return the first panel if called from the last panel\n   * @ko 다음(`index + 1`) 패널을 반환합니다. 다음 패널이 없을 경우 `null`을 반환합니다\n   * {@link Flicking#circularEnabled circular} 모드가 활성화되었을 때 마지막 패널에서 이 메소드를 호출할 경우 첫번째 패널을 반환합니다\n   * @returns {Panel | null} The previous panel<ko>다음 패널</ko>\n   */\n  public next(): Panel | null {\n    const index = this._index;\n    const flicking = this._flicking;\n    const renderer = flicking.renderer;\n    const panelCount = renderer.panelCount;\n\n    if (panelCount === 1) return null;\n\n    return flicking.circularEnabled\n      ? renderer.getPanel(index === panelCount - 1 ? 0 : index + 1)\n      : renderer.getPanel(index + 1);\n  }\n\n  /**\n   * Increase panel's index by the given value\n   * @ko 패널의 인덱스를 주어진 값만큼 증가시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public increaseIndex(val: number): this {\n    this._index += Math.max(val, 0);\n    return this;\n  }\n\n  /**\n   * Decrease panel's index by the given value\n   * @ko 패널의 인덱스를 주어진 값만큼 감소시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public decreaseIndex(val: number): this {\n    this._index -= Math.max(val, 0);\n    return this;\n  }\n\n  /**\n   * Increase panel's position by the given value\n   * @ko 패널의 위치를 주어진 값만큼 증가시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public increasePosition(val: number): this {\n    this._moveBy(Math.max(val, 0));\n    return this;\n  }\n\n  /**\n   * Decrease panel's position by the given value\n   * @ko 패널의위치를 주어진 값만큼 감소시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public decreasePosition(val: number): this {\n    this._moveBy(-Math.max(val, 0));\n    return this;\n  }\n\n  /**\n   * @internal\n   * @return {boolean} toggled\n   */\n  public toggle(prevPos: number, newPos: number): boolean {\n    const toggleDirection = this._toggleDirection;\n    const togglePosition = this._togglePosition;\n\n    if (toggleDirection === DIRECTION.NONE || newPos === prevPos) return false;\n\n    const prevToggled = this._toggled;\n\n    if (newPos > prevPos) {\n      if (togglePosition >= prevPos && togglePosition <= newPos) {\n        this._toggled = toggleDirection === DIRECTION.NEXT;\n      }\n    } else {\n      if (togglePosition <= prevPos && togglePosition >= newPos) {\n        this._toggled = toggleDirection !== DIRECTION.NEXT;\n      }\n    }\n\n    return prevToggled !== this._toggled;\n  }\n\n  /**\n   * @internal\n   */\n  public updateCircularToggleDirection(): this {\n    const flicking = this._flicking;\n\n    if (!flicking.circularEnabled) {\n      this._toggleDirection = DIRECTION.NONE;\n      this._toggled = false;\n      return this;\n    }\n\n    const camera = flicking.camera;\n    const camRange = camera.range;\n    const camAlignPosition = camera.alignPosition;\n    const camVisibleRange = camera.visibleRange;\n    const camVisibleSize = camVisibleRange.max - camVisibleRange.min;\n\n    const minimumVisible = camRange.min - camAlignPosition;\n    const maximumVisible = camRange.max - camAlignPosition + camVisibleSize;\n\n    const shouldBeVisibleAtMin = this.includeRange(maximumVisible - camVisibleSize, maximumVisible, false);\n    const shouldBeVisibleAtMax = this.includeRange(minimumVisible, minimumVisible + camVisibleSize, false);\n\n    this._toggled = false;\n    if (shouldBeVisibleAtMin) {\n      this._toggleDirection = DIRECTION.PREV;\n      this._togglePosition = this.range.max + camRange.min - camRange.max + camAlignPosition;\n      this.toggle(Infinity, camera.position);\n    } else if (shouldBeVisibleAtMax) {\n      this._toggleDirection = DIRECTION.NEXT;\n      this._togglePosition = this.range.min + camRange.max - camVisibleSize + camAlignPosition;\n      this.toggle(-Infinity, camera.position);\n    } else {\n      this._toggleDirection = DIRECTION.NONE;\n      this._togglePosition = 0;\n    }\n\n    return this;\n  }\n\n  private _moveBy(val: number): this {\n    this._pos += val;\n\n    return this;\n  }\n\n  private _updateAlignPos() {\n    this._alignPos = parseAlign(this._align, this._size);\n  }\n\n  private _resetInternalStates() {\n    this._size = 0;\n    this._pos = 0;\n    this._margin = { prev: 0, next: 0 };\n    this._height = 0;\n    this._alignPos = 0;\n    this._toggled = false;\n    this._togglePosition = 0;\n    this._toggleDirection = DIRECTION.NONE;\n  }\n}\n\nexport default Panel;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel, { PanelOptions } from \"./Panel\";\n\nexport interface ElementPanelOptions extends PanelOptions {\n  el: HTMLElement;\n}\n\n/**\n * An slide data component that holds information of a single HTMLElement\n * @ko 슬라이드 데이터 컴포넌트로, 단일 HTMLElement의 정보를 갖고 있습니다\n */\nclass ElementPanel extends Panel {\n  private _el: HTMLElement;\n  private _rendered: boolean;\n\n  /**\n   * `HTMLElement` that panel's referencing\n   * @ko 패널이 참조하고 있는 `HTMLElement`\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n\n  public get rendered() { return this._rendered; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {HTMLElement} [options.el] A `HTMLElement` panel's referencing<ko>패널이 참조하는 `HTMLElement`</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor(options: ElementPanelOptions) {\n    super(options);\n\n    this._el = options.el;\n    this._rendered = true;\n  }\n\n  public markForShow() {\n    this._rendered = true;\n  }\n\n  public markForHide() {\n    this._rendered = false;\n  }\n}\n\nexport default ElementPanel;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getFlickingAttached, toArray } from \"../utils\";\nimport Panel, { PanelOptions } from \"../core/panel/Panel\";\nimport ElementPanel from \"../core/panel/ElementPanel\";\n\nimport Renderer from \"./Renderer\";\n\n/**\n *\n */\nclass VanillaRenderer extends Renderer {\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async render() {\n    const strategy = this._renderingStrategy;\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraEl = flicking.camera.element;\n    const wasRenderedPanels = this._panels.filter(panel => panel.element.parentElement === cameraEl);\n\n    strategy.updateRenderingPanels(flicking);\n    const renderingPanels = this._getRenderingPanelsByOrder();\n\n    this._removePanelElements(wasRenderedPanels.filter(panel => !panel.rendered));\n    this._insertPanelElements(renderingPanels.filter(panel => panel.element.parentElement !== cameraEl), null);\n    this._resetPanelElementOrder(renderingPanels);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async forceRenderAllPanels() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const camera = flicking.camera;\n    const cameraElement = camera.element;\n    const fragment = document.createDocumentFragment();\n\n    this._panels.forEach(panel => fragment.appendChild(panel.element));\n\n    this._removeAllChildsFromCamera();\n\n    cameraElement.appendChild(fragment);\n  }\n\n  protected _collectPanels() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    const cameraElement = flicking.camera.element;\n\n    // Remove all text nodes in the camera element\n    toArray(cameraElement.childNodes).forEach(node => {\n      if (node.nodeType === Node.TEXT_NODE) {\n        cameraElement.removeChild(node);\n      }\n    });\n\n    const align = this._getPanelAlign();\n    const cameraChilds = toArray(cameraElement.children);\n\n    this._panels = cameraChilds.map(\n      (el: HTMLElement, index: number) => new ElementPanel({ flicking, el, index, align })\n    );\n  }\n\n  protected _createPanel(el: HTMLElement, options: PanelOptions): ElementPanel {\n    return new ElementPanel({ el, ...options });\n  }\n\n  protected _insertPanelElements(panels: Panel[], nextSibling: Panel | null) {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const camera = flicking.camera;\n    const cameraElement = camera.element;\n    const nextSiblingElement = nextSibling?.element || null;\n    const fragment = document.createDocumentFragment();\n\n    panels.forEach(panel => fragment.appendChild(panel.element));\n    cameraElement.insertBefore(fragment, nextSiblingElement);\n\n    return this;\n  }\n\n  protected _removePanelElements(panels: Panel[]): this {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraElement = flicking.camera.element;\n\n    panels.forEach(panel => {\n      cameraElement.removeChild(panel.element);\n    });\n\n    return this;\n  }\n\n  private _resetPanelElementOrder(panels: Panel[]) {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraEl = flicking.camera.element;\n\n    // We're using reversed panels here as last panel should be the last element of camera element\n    const reversedPanels = [...panels].reverse();\n    reversedPanels.forEach((panel, idx) => {\n      const nextPanel = reversedPanels[idx - 1];\n      const nextPanelEl = nextPanel ? nextPanel.element : null;\n\n      if (panel.element.nextElementSibling !== nextPanelEl) {\n        cameraEl.insertBefore(panel.element, nextPanelEl);\n      }\n    });\n  }\n\n  private _removeAllChildsFromCamera() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraElement = flicking.camera.element;\n\n    // Remove other elements\n    while (cameraElement.firstChild) {\n      cameraElement.removeChild(cameraElement.firstChild);\n    }\n  }\n\n  private _getRenderingPanelsByOrder(): Panel[] {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const panels = flicking.renderer.panels;\n\n    return panels.filter(panel => panel.rendered)\n      .sort((a, b) => (a.position + a.offset) - (b.position + b.offset));\n  }\n}\n\nexport default VanillaRenderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\n\nimport Renderer from \"./Renderer\";\n\n/**\n *\n */\nabstract class ExternalRenderer extends Renderer {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _insertPanelElements(panels: Panel[], nextSibling: Panel | null): void {\n    // DO NOTHING\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _removePanelElements(panels: Panel[]): void {\n    // DO NOTHING\n  }\n}\n\nexport default ExternalRenderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\n\nimport RenderingStrategy from \"./RenderingStrategy\";\n\nclass VisibleRenderingStrategy implements RenderingStrategy {\n  public updateRenderingPanels(flicking: Flicking) {\n    const panels = flicking.renderer.panels;\n    const camera = flicking.camera;\n\n    const visibleIndexes = camera.visiblePanels.reduce((visibles, panel) => {\n      visibles[panel.index] = true;\n      return visibles;\n    }, {});\n\n    panels.forEach(panel => {\n      if (panel.index in visibleIndexes) {\n        panel.markForShow();\n      } else if (!flicking.holding) {\n        // During the input sequence,\n        // Do not remove panel elements as it won't trigger touchend event.\n        panel.markForHide();\n      }\n    });\n\n    camera.updateOffset();\n  }\n}\n\nexport default VisibleRenderingStrategy;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nimport FlickingError from \"./core/FlickingError\";\nimport Viewport from \"./core/Viewport\";\nimport { Panel } from \"./core/panel\";\nimport { Control, FreeControl, SnapControl } from \"./control\";\nimport { BoundCamera, Camera, CircularCamera, LinearCamera } from \"./camera\";\nimport { Renderer, VanillaRenderer, ExternalRenderer, RawRenderingStrategy, VisibleRenderingStrategy } from \"./renderer\";\nimport { EVENTS, ALIGN, MOVE_TYPE, DIRECTION } from \"./const/external\";\nimport * as ERROR from \"./const/error\";\nimport { findIndex, getElement, includes, parseElement } from \"./utils\";\nimport { HoldStartEvent, HoldEndEvent, MoveStartEvent, SelectEvent, MoveEvent, MoveEndEvent, WillChangeEvent, WillRestoreEvent, NeedPanelEvent, VisibleChangeEvent, ReachEdgeEvent, ReadyEvent, AfterResizeEvent, BeforeResizeEvent, ChangedEvent, RestoredEvent, PanelChangeEvent } from \"./type/event\";\nimport { LiteralUnion, ValueOf } from \"./type/internal\";\nimport { ElementLike, Plugin, Status, MoveTypeOptions } from \"./type/external\";\n\n/**\n * @interface\n */\nexport interface FlickingEvents {\n  [EVENTS.READY]: ReadyEvent;\n  [EVENTS.BEFORE_RESIZE]: BeforeResizeEvent;\n  [EVENTS.AFTER_RESIZE]: AfterResizeEvent;\n  [EVENTS.HOLD_START]: HoldStartEvent;\n  [EVENTS.HOLD_END]: HoldEndEvent;\n  [EVENTS.MOVE_START]: MoveStartEvent;\n  [EVENTS.MOVE]: MoveEvent;\n  [EVENTS.MOVE_END]: MoveEndEvent;\n  [EVENTS.WILL_CHANGE]: WillChangeEvent;\n  [EVENTS.CHANGED]: ChangedEvent;\n  [EVENTS.WILL_RESTORE]: WillRestoreEvent;\n  [EVENTS.RESTORED]: RestoredEvent;\n  [EVENTS.SELECT]: SelectEvent;\n  [EVENTS.NEED_PANEL]: NeedPanelEvent;\n  [EVENTS.VISIBLE_CHANGE]: VisibleChangeEvent;\n  [EVENTS.REACH_EDGE]: ReachEdgeEvent;\n  [EVENTS.PANEL_CHANGE]: PanelChangeEvent;\n}\n\n/**\n * @interface\n */\nexport interface FlickingOptions {\n  // UI / LAYOUT\n  align: LiteralUnion<ValueOf<typeof ALIGN>> | number | { panel: number | string; camera: number | string };\n  defaultIndex: number;\n  horizontal: boolean;\n  circular: boolean;\n  bound: boolean;\n  adaptive: boolean;\n  // EVENT\n  needPanelThreshold: number;\n  // ANIMATION\n  deceleration: number;\n  duration: number;\n  easing: (x: number) => number;\n  // INPUT\n  inputType: string[];\n  moveType: ValueOf<typeof MOVE_TYPE> | MoveTypeOptions<ValueOf<typeof MOVE_TYPE>>;\n  threshold: number;\n  interruptable: boolean;\n  bounce: number | string | [number | string, number | string];\n  iOSEdgeSwipeThreshold: number;\n  preventClickOnDrag: boolean;\n  disableOnInit: boolean;\n  // PERFORMANCE\n  renderOnlyVisible: boolean;\n  // OTHERS\n  autoInit: boolean;\n  autoResize: boolean;\n  renderExternal: {\n    renderer: typeof ExternalRenderer;\n    rendererOptions: {[key: string]: any};\n  } | null;\n}\n\n/**\n * @extends Component\n * @support {\"ie\": \"9+(with polyfill)\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|@egjs/component}\n * @requires {@link https://github.com/naver/egjs-axes|@egjs/axes}\n */\nclass Flicking extends Component<FlickingEvents> {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @type {string}\n   * @readonly\n   * @example\n   * ```ts\n   * Flicking.VERSION;  // ex) 4.0.0\n   * ```\n   */\n  public static VERSION = \"#__VERSION__#\";\n\n  // Core components\n  private _viewport: Viewport;\n  private _camera: Camera;\n  private _control: Control;\n  private _renderer: Renderer;\n\n  // Options\n  private _align: FlickingOptions[\"align\"];\n  private _defaultIndex: FlickingOptions[\"defaultIndex\"];\n  private _horizontal: FlickingOptions[\"horizontal\"];\n  private _circular: FlickingOptions[\"circular\"];\n  private _bound: FlickingOptions[\"bound\"];\n  private _adaptive: FlickingOptions[\"adaptive\"];\n  private _needPanelThreshold: FlickingOptions[\"needPanelThreshold\"];\n  private _deceleration: FlickingOptions[\"deceleration\"];\n  private _duration: FlickingOptions[\"duration\"];\n  private _easing: FlickingOptions[\"easing\"];\n  private _inputType: FlickingOptions[\"inputType\"];\n  private _moveType: FlickingOptions[\"moveType\"];\n  private _threshold: FlickingOptions[\"threshold\"];\n  private _interruptable: FlickingOptions[\"interruptable\"];\n  private _bounce: FlickingOptions[\"bounce\"];\n  private _iOSEdgeSwipeThreshold: FlickingOptions[\"iOSEdgeSwipeThreshold\"];\n  private _preventClickOnDrag: FlickingOptions[\"preventClickOnDrag\"];\n  private _disableOnInit: FlickingOptions[\"disableOnInit\"];\n  private _renderOnlyVisible: FlickingOptions[\"renderOnlyVisible\"];\n  private _autoResize: FlickingOptions[\"autoResize\"];\n  private _autoInit: FlickingOptions[\"autoInit\"];\n  private _renderExternal: FlickingOptions[\"renderExternal\"];\n\n  // Internal State\n  private _initialized: boolean;\n  private _plugins: Plugin[];\n\n  // Components\n  /**\n   * {@link Control} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Control} 인스턴스\n   * @type {Control}\n   * @default SnapControl\n   * @readonly\n   * @see Control\n   * @see SnapControl\n   * @see FreeControl\n   */\n  public get control() { return this._control; }\n  /**\n   * {@link Camera} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Camera} 인스턴스\n   * @type {Camera}\n   * @default LinearCamera\n   * @readonly\n   * @see Camera\n   * @see LinearCamera\n   * @see BoundCamera\n   * @see CircularCamera\n   */\n  public get camera() { return this._camera; }\n  /**\n   * {@link Renderer} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Renderer} 인스턴스\n   * @type {Renderer}\n   * @default VanillaRenderer\n   * @readonly\n   * @see Renderer\n   * @see VanillaRenderer\n   * @see ExternalRenderer\n   */\n  public get renderer() { return this._renderer; }\n  /**\n   * A component that manages viewport size\n   * @ko 뷰포트 크기 정보를 담당하는 컴포넌트\n   * @type {Viewport}\n   * @readonly\n   * @see Viewport\n   */\n  public get viewport() { return this._viewport; }\n  // Internal States\n  /**\n   * Whether Flicking's {@link Flicking#init init()} is called.\n   * This is `true` when {@link Flicking#init init()} is called, and is `false` after calling {@link Flicking#destroy destroy()}.\n   * @ko Flicking의 {@link Flicking#init init()}이 호출되었는지를 나타내는 멤버 변수.\n   * 이 값은 {@link Flicking#init init()}이 호출되었으면 `true`로 변하고, {@link Flicking#destroy destroy()}호출 이후에 다시 `false`로 변경됩니다.\n   * @type {boolean}\n   * @default false\n   * @readonly\n   */\n  public get initialized() { return this._initialized; }\n  /**\n   * Whether the `circular` option is enabled.\n   * The {@link Flicking#circular circular} option can't be enabled when sum of the panel sizes are too small.\n   * @ko {@link Flicking#circular circular} 옵션이 활성화되었는지 여부를 나타내는 멤버 변수.\n   * {@link Flicking#circular circular} 옵션은 패널의 크기의 합이 충분하지 않을 경우 비활성화됩니다.\n   * @type {boolean}\n   * @default false\n   * @readonly\n   */\n  public get circularEnabled() { return this._camera.controlParams.circular; }\n  /**\n   * Index number of the {@link Flicking#currentPanel currentPanel}\n   * @ko {@link Flicking#currentPanel currentPanel}의 인덱스 번호\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get index() { return this._control.activeIndex; }\n  /**\n   * The root(`.flicking-viewport`) element\n   * @ko root(`.flicking-viewport`) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._viewport.element; }\n  /**\n   * Currently active panel\n   * @ko 현재 선택된 패널\n   * @type {Panel}\n   * @readonly\n   * @see Panel\n   */\n  public get currentPanel() { return this._control.activePanel; }\n  /**\n   * Array of panels\n   * @ko 전체 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get panels() { return this._renderer.panels; }\n  /**\n   * Count of panels\n   * @ko 전체 패널의 개수\n   * @type {number}\n   * @readonly\n   */\n  public get panelCount() { return this._renderer.panelCount; }\n  /**\n   * Array of panels that is visible at the current position\n   * @ko 현재 보이는 패널의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get visiblePanels() { return this._camera.visiblePanels; }\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get animating() { return this._control.animating; }\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get holding() { return this._control.holding; }\n  /**\n   * A current list of activated plugins\n   * @ko 현재 활성화된 플러그인 목록\n   * @type {Plugin[]}\n   * @readonly\n   */\n  public get activePlugins() { return this._plugins; }\n\n  // Options Getter\n  // UI / LAYOUT\n  /**\n   * Align position of the panels within viewport. You can set different values each for the panel and camera\n   * @ko 뷰포트 내에서 패널 정렬방식을 설정하는 옵션. 카메라와 패널 개별로 옵션을 설정할 수도 있습니다\n   * @type {ALIGN | string | number | { panel: string | number, camera: string | number }}\n   * @property {ALIGN | string | number} panel The align value for each {@link Panel}s<ko>개개의 {@link Panel}에 적용할 값</ko>\n   * @property {ALIGN | string | number} camera The align value for {@link Camera}<ko>{@link Camera}에 적용할 값</ko>\n   * @default \"center\"\n   * @example\n   * ```ts\n   * const possibleOptions = [\n   *   // Literal strings\n   *   \"prev\", \"center\", \"next\",\n   *   // % values, applied to both panel & camera\n   *   \"0%\", \"25%\", \"42%\",\n   *   // px values, arithmetic calculation with (+/-) is also allowed.\n   *   \"0px\", \"100px\", \"50% - 25px\",\n   *   // numbers, same to number + px (\"0px\", \"100px\")\n   *   0, 100, 1000,\n   *   // Setting a different value for panel & camera\n   *   { panel: \"10%\", camera: \"25%\" }\n   * ];\n   *\n   * possibleOptions.forEach(align => {\n   *   new Flicking(\"#el\", { align });\n   * });\n   * ```\n   */\n  public get align() { return this._align; }\n  /**\n   * Index of the panel to move when Flicking's {@link Flicking#init init()} is called. A zero-based integer\n   * @ko Flicking의 {@link Flicking#init init()}이 호출될 때 이동할 디폴트 패널의 인덱스로, 0부터 시작하는 정수입니다\n   * @type {number}\n   * @default 0\n   */\n  public get defaultIndex() { return this._defaultIndex; }\n  /**\n   * Direction of panel movement (true: horizontal, false: vertical)\n   * @ko 패널 이동 방향 (true: 가로방향, false: 세로방향)\n   * @type {boolean}\n   * @default true\n   */\n  public get horizontal() { return this._horizontal; }\n  /**\n   * Enables circular(continuous loop) mode, which connects first/last panel for continuous scrolling.\n   * @ko 순환 모드를 활성화합니다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능합니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get circular() { return this._circular; }\n  /**\n   * Prevent the view(camera element) from going out of the first/last panel, so it won't show empty spaces before/after the first/last panel\n   * Only can be enabled when `circular=false`\n   * @ko 뷰(카메라 엘리먼트)가 첫번째와 마지막 패널 밖으로 넘어가지 못하게 하여, 첫번째/마지막 패널 전/후의 빈 공간을 보이지 않도록 하는 옵션입니다\n   * `circular=false`인 경우에만 사용할 수 있습니다\n   * @type {boolean}\n   * @default false\n   */\n  public get bound() { return this._bound; }\n  /**\n   * Update height of the viewport element after movement same to the height of the panel below. This can be only enabled when `horizontal=true`\n   * @ko 이동한 후 뷰포트 엘리먼트의 크기를 현재 패널의 높이와 동일하게 설정합니다. `horizontal=true`인 경우에만 사용할 수 있습니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get adaptive() { return this._adaptive; }\n  // EVENTS\n  /**\n   * A Threshold from viewport edge before triggering `needPanel` event\n   * @ko `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리\n   * @type {number}\n   * @default 0\n   */\n  public get needPanelThreshold() { return this._needPanelThreshold; }\n  // ANIMATION\n  /**\n   * Deceleration value for panel movement animation which is triggered by user input. A higher value means a shorter animation time\n   * @ko 사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아집니다\n   * @type {number}\n   * @default 0.0075\n   */\n  public get deceleration() { return this._deceleration; }\n  /**\n   * An easing function applied to the panel movement animation. Default value is `easeOutCubic`\n   * @ko 패널 이동 애니메이션에 적용할 easing 함수. 기본값은 `easeOutCubic`이다\n   * @type {function}\n   * @default x => 1 - Math.pow(1 - x, 3)\n   * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n   */\n  public get easing() { return this._easing; }\n  /**\n   * Default duration of the animation (ms)\n   * @ko 디폴트 애니메이션 재생 시간 (ms)\n   * @type {number}\n   * @default 500\n   */\n  public get duration() { return this._duration; }\n  // INPUT\n  /**\n   * Types of input devices to enable\n   * @ko 활성화할 입력 장치 종류\n   * @type {string[]}\n   * @default [\"touch\", \"mouse\"]\n   * @see {@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Possible values (PanInputOption#inputType)}\n   * <ko>{@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 가능한 값들 (PanInputOption#inputType)}</ko>\n   */\n  public get inputType() { return this._inputType; }\n  /**\n   * Movement style by user input. This will change instance type of {@link Flicking#control}\n   * You can use the values of the constant {@link MOVE_TYPE}\n   * @ko 사용자 입력에 의한 이동 방식. 이 값에 따라 {@link Flicking#control}의 인스턴스 타입이 결정됩니다\n   * 상수 {@link MOVE_TYPE}에 정의된 값들을 이용할 수 있습니다\n   * @type {MOVE_TYPE | Pair<string, object>}\n   * @default \"snap\"\n   * @example\n   * |moveType|control|options|\n   * |:---:|:---:|:---:|\n   * |\"snap\"|{@link SnapControl}||\n   * |\"freeScroll\"|{@link FreeControl}|{@link FreeControlOptions}|\n   *\n   * ```ts\n   * import Flicking, { MOVE_TYPE } from \"@egjs/flicking\";\n   *\n   * const flicking = new Flicking({\n   *   moveType: MOVE_TYPE.SNAP\n   * });\n   * ```\n   *\n   * ```ts\n   * const flicking = new Flicking({\n   *   // If you want more specific settings for the moveType\n   *   // [moveType, options for that moveType]\n   *   // In this case, it's [\"freeScroll\", FreeControlOptions]\n   *   moveType: [MOVE_TYPE.FREE_SCROLL, { stopAtEdge: true }]\n   * });\n   * ```\n   */\n  public get moveType() { return this._moveType; }\n  /**\n   * Movement threshold to change panel (unit: px). It should be dragged above the threshold to change the current panel.\n   * @ko 패널 변경을 위한 이동 임계값 (단위: px). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.\n   * @type {number}\n   * @default 40\n   */\n  public get threshold() { return this._threshold; }\n  /**\n   * Set animation to be interruptable by click/touch.\n   * @ko 사용자의 클릭/터치로 인해 애니메이션을 도중에 멈출 수 있도록 설정합니다.\n   * @type {boolean}\n   * @default true\n   */\n  public get interruptable() { return this._interruptable; }\n  /**\n   * The size value of the bounce area. Only can be enabled when `circular=false`.\n   * You can set different bounce value for prev/next direction by using array.\n   * `number` for px value, and `string` for px, and % value relative to viewport size.\n   * You have to call {@link Control#updateInput} after changing this to take effect.\n   * @ko Flicking이 최대 영역을 넘어서 갈 수 있는 최대 크기. `circular=false`인 경우에만 사용할 수 있습니다.\n   * 배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정할 수 있습니다.\n   * `number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있습니다.\n   * 이 값을 변경시 {@link Control#updateInput}를 호출해야 합니다.\n   * @type {string | number | Array<string | number>}\n   * @default \"20%\"\n   * @example\n   * ```ts\n   * const possibleOptions = [\n   *   // % values, relative to viewport element(\".flicking-viewport\")'s size\n   *   \"0%\", \"25%\", \"42%\",\n   *   // px values, arithmetic calculation with (+/-) is also allowed.\n   *   \"0px\", \"100px\", \"50% - 25px\",\n   *   // numbers, same to number + px (\"0px\", \"100px\")\n   *   0, 100, 1000\n   * ];\n   * ```\n   *\n   * @example\n   * ```ts\n   * const flicking = new Flicking(\"#el\", { bounce: \"20%\" });\n   *\n   * flicking.bounce = \"100%\";\n   * flicking.control.updateInput(); // Call this to update!\n   * ```\n   */\n  public get bounce() { return this._bounce; }\n  /**\n   * Size of the area from the right edge in iOS safari (in px) which enables swipe-back or swipe-forward\n   * @ko iOS Safari에서 swipe를 통한 뒤로가기/앞으로가기를 활성화하는 오른쪽 끝으로부터의 영역의 크기 (px)\n   * @type {number}\n   * @default 30\n   */\n  public get iOSEdgeSwipeThreshold() { return this._iOSEdgeSwipeThreshold; }\n  /**\n   * Automatically prevent `click` event if the user has dragged at least a single pixel on the viewport element\n   * @ko 사용자가 뷰포트 영역을 1픽셀이라도 드래그했을 경우 자동으로 {@link https://developer.mozilla.org/ko/docs/Web/API/Element/click_event click} 이벤트를 취소합니다\n   * @type {boolean}\n   * @default true\n   */\n  public get preventClickOnDrag() { return this._preventClickOnDrag; }\n  /**\n   * Automatically call {@link Flicking#disableInput disableInput()} on initialization\n   * @ko Flicking init시에 {@link Flicking#disableInput disableInput()}을 바로 호출합니다\n   * @type {boolean}\n   * @default false\n   */\n  public get disableOnInit() { return this._disableOnInit; }\n  // PERFORMANCE\n  /**\n   * Whether to render visible panels only. This can dramatically increase performance when there're many panels.\n   * @ko 보이는 패널만 렌더링할지 여부를 설정합니다. 패널이 많을 경우에 퍼포먼스를 크게 향상시킬 수 있습니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get renderOnlyVisible() { return this._renderOnlyVisible; }\n  // OTHERS\n  /**\n   * Call {@link Flicking#init init()} automatically when creating Flicking's instance\n   * @ko Flicking 인스턴스를 생성할 때 자동으로 {@link Flicking#init init()}를 호출합니다\n   * @type {boolean}\n   * @default true\n   * @readonly\n   */\n  public get autoInit() { return this._autoInit; }\n  /**\n   * Attach Flicking's {@link Flicking#resize resize} method to window's resize event.\n   * Flicking will automatically call {@link Flicking#resize resize} window size and orientation change.\n   * @ko Flicking의 {@link Flicking#resize resize} 메소드를 window의 resize 이벤트 핸들러로 등록합니다.\n   * 설정시 window 창 크기 및 orientation 변경에 의해 자동으로 {@link Flicking#resize resize}를 호출합니다.\n   * @type {boolean}\n   * @default true\n   */\n  public get autoResize() { return this._autoResize; }\n  /**\n   * This is an option for the frameworks(React, Vue, Angular, ...). Don't set it as it's automatically managed by Flicking.\n   * @ko 프레임워크(React, Vue, Angular, ...)에서만 사용하는 옵션으로, 자동으로 설정되므로 따로 사용하실 필요 없습니다!\n   * @type {boolean}\n   * @default false\n   * @internal\n   * @readonly\n   */\n  public get renderExternal() { return this._renderExternal; }\n\n  // Options Setter\n  // UI / LAYOUT\n  public set align(val: FlickingOptions[\"align\"]) {\n    this._align = val;\n    this._renderer.align = val;\n    this._camera.align = val;\n  }\n\n  public set defaultIndex(val: FlickingOptions[\"defaultIndex\"]) { this._defaultIndex = val; }\n  public set horizontal(val: FlickingOptions[\"horizontal\"]) { this._horizontal = val; }\n  public set circular(val: FlickingOptions[\"circular\"]) { this._circular = val; }\n  public set bound(val: FlickingOptions[\"bound\"]) { this._bound = val; }\n  public set adaptive(val: FlickingOptions[\"adaptive\"]) { this._adaptive = val; }\n  // ANIMATION\n  public set deceleration(val: FlickingOptions[\"deceleration\"]) { this._deceleration = val; }\n  public set easing(val: FlickingOptions[\"easing\"]) { this._easing = val; }\n  public set duration(val: FlickingOptions[\"duration\"]) { this._duration = val; }\n  // INPUT\n  public set inputType(val: FlickingOptions[\"inputType\"]) { this._inputType = val; }\n  public set moveType(val: FlickingOptions[\"moveType\"]) { this._moveType = val; }\n  public set threshold(val: FlickingOptions[\"threshold\"]) { this._threshold = val; }\n  public set interruptable(val: FlickingOptions[\"interruptable\"]) { this._interruptable = val; }\n  public set bounce(val: FlickingOptions[\"bounce\"]) { this._bounce = val; }\n  public set iOSEdgeSwipeThreshold(val: FlickingOptions[\"iOSEdgeSwipeThreshold\"]) { this._iOSEdgeSwipeThreshold = val; }\n  public set preventClickOnDrag(val: FlickingOptions[\"preventClickOnDrag\"]) { this._preventClickOnDrag = val; }\n  public set disableOnInit(val: FlickingOptions[\"disableOnInit\"]) { this._disableOnInit = val; }\n  // PERFORMANCE\n  public set renderOnlyVisible(val: FlickingOptions[\"renderOnlyVisible\"]) { this._renderOnlyVisible = val; }\n  // OTHERS\n  public set autoResize(val: FlickingOptions[\"autoResize\"]) { this._autoResize = val; }\n\n  /**\n   * @param root A root HTMLElement to initialize Flicking on it. When it's a typeof `string`, it should be a css selector string\n   * <ko>Flicking을 초기화할 HTMLElement로, `string` 타입으로 지정시 css 선택자 문자열을 지정해야 합니다.</ko>\n   * @param {object} [options={}] An options object for Flicking.<ko>Flicking에 적용할 옵션 오브젝트</ko>\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE WRONG_TYPE}|When the root is not either string or HTMLElement|\n   * |{@link ERROR_CODE ELEMENT_NOT_FOUND}|When the element with given CSS selector does not exist|\n   * <ko>\n   *\n   * |code|조건|\n   * |---|---|\n   * |{@link ERROR_CODE WRONG_TYPE}|루트 엘리먼트가 string이나 HTMLElement가 아닐 경우|\n   * |{@link ERROR_CODE ELEMENT_NOT_FOUND}|주어진 CSS selector로 엘리먼트를 찾지 못했을 경우|\n   *\n   * </ko>\n   * @example\n   * ```ts\n   * import Flicking from \"@egjs/flicking\";\n   *\n   * // Creating new instance of Flicking with HTMLElement\n   * const flicking = new Flicking(document.querySelector(\".flicking-viewport\"), { circular: true });\n   *\n   * // Creating new instance of Flicking with CSS selector\n   * const flicking2 = new Flicking(\".flicking-viewport\", { circular: true });\n   * ```\n   */\n  public constructor(root: HTMLElement | string, {\n    align = ALIGN.CENTER,\n    defaultIndex = 0,\n    horizontal = true,\n    circular = false,\n    bound = false,\n    adaptive = false,\n    needPanelThreshold = 0,\n    deceleration = 0.0075,\n    duration = 500,\n    easing = x => 1 - Math.pow(1 - x, 3),\n    inputType = [\"mouse\", \"touch\"],\n    moveType = \"snap\",\n    threshold = 40,\n    interruptable = true,\n    bounce = \"20%\",\n    iOSEdgeSwipeThreshold = 30,\n    preventClickOnDrag = true,\n    disableOnInit = false,\n    renderOnlyVisible = false,\n    autoInit = true,\n    autoResize = true,\n    renderExternal = null\n  }: Partial<FlickingOptions> = {}) {\n    super();\n\n    // Internal states\n    this._initialized = false;\n    this._plugins = [];\n\n    // Bind options\n    this._align = align;\n    this._defaultIndex = defaultIndex;\n    this._horizontal = horizontal;\n    this._circular = circular;\n    this._bound = bound;\n    this._adaptive = adaptive;\n    this._needPanelThreshold = needPanelThreshold;\n    this._deceleration = deceleration;\n    this._duration = duration;\n    this._easing = easing;\n    this._inputType = inputType;\n    this._moveType = moveType;\n    this._threshold = threshold;\n    this._interruptable = interruptable;\n    this._bounce = bounce;\n    this._iOSEdgeSwipeThreshold = iOSEdgeSwipeThreshold;\n    this._preventClickOnDrag = preventClickOnDrag;\n    this._disableOnInit = disableOnInit;\n    this._renderOnlyVisible = renderOnlyVisible;\n    this._autoResize = autoResize;\n    this._autoInit = autoInit;\n    this._renderExternal = renderExternal;\n\n    // Create core components\n    this._viewport = new Viewport(getElement(root));\n    this._renderer = this._createRenderer();\n    this._camera = this._createCamera();\n    this._control = this._createControl();\n\n    this.resize = this.resize.bind(this);\n\n    if (this._autoInit) {\n      void this.init();\n    }\n  }\n\n  /**\n   * Initialize Flicking and move to the default index\n   * This is automatically called on Flicking's constructor when `autoInit` is true(default)\n   * @ko Flicking을 초기화하고, 디폴트 인덱스로 이동합니다\n   * 이 메소드는 `autoInit` 옵션이 true(default)일 경우 Flicking이 생성될 때 자동으로 호출됩니다\n   * @fires Flicking#ready\n   * @return {this}\n   */\n  public async init(): Promise<void> {\n    if (this._initialized) return;\n\n    const camera = this._camera;\n    const renderer = this._renderer;\n    const control = this._control;\n    const viewport = this._viewport;\n\n    camera.init(this);\n    renderer.init(this);\n    control.init(this);\n\n    await this.resize();\n\n    // Look at initial panel\n    this._moveToInitialPanel();\n\n    if (this._autoResize) {\n      window.addEventListener(\"resize\", this.resize);\n    }\n    if (this._preventClickOnDrag) {\n      viewport.element.addEventListener(\"click\", this._preventClickWhenDragged);\n    }\n    if (this._disableOnInit) {\n      this.disableInput();\n    }\n\n    this._plugins.forEach(plugin => plugin.init(this));\n\n    // Done initializing & emit ready event\n    this._initialized = true;\n    this.trigger(new ComponentEvent(EVENTS.READY));\n\n    return;\n  }\n\n  /**\n   * Destroy Flicking and remove all event handlers\n   * @ko Flicking과 하위 컴포넌트들을 초기 상태로 되돌리고, 부착된 모든 이벤트 핸들러를 제거합니다\n   * @return {void}\n   */\n  public destroy(): void {\n    if (!this._initialized) return;\n\n    this.off();\n    window.removeEventListener(\"resize\", this.resize);\n    this._viewport.element.removeEventListener(\"click\", this._preventClickWhenDragged);\n\n    this._control.destroy();\n    this._camera.destroy();\n    this._renderer.destroy();\n\n    this._plugins.forEach(plugin => plugin.destroy());\n\n    this._initialized = false;\n  }\n\n  /**\n   * Move to the previous panel (current index - 1)\n   * @ko 이전 패널로 이동합니다 (현재 인덱스 - 1)\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the panel movement animation (unit: ms)<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the previous panel does not exist|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|이전 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the previous panel<ko>이전 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public prev(duration: number = this._duration): Promise<void> {\n    return this.moveTo(this._control.activePanel?.prev()?.index ?? -1, duration, DIRECTION.PREV);\n  }\n\n  /**\n   * Move to the next panel (current index + 1)\n   * @ko 다음 패널로 이동합니다 (현재 인덱스 + 1)\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the next panel does not exist|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|다음 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the next panel<ko>다음 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public next(duration: number = this._duration) {\n    return this.moveTo(this._control.activePanel?.next()?.index ?? this._renderer.panelCount, duration, DIRECTION.NEXT);\n  }\n\n  /**\n   * Move to the panel with given index\n   * @ko 주어진 인덱스에 해당하는 패널로 이동합니다\n   * @param {number} index The index of the panel to move<ko>이동할 패널의 인덱스</ko>\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {DIRECTION} [direction=DIRECTION.NONE] Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the root is not either string or HTMLElement|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|해당 인덱스를 가진 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public moveTo(index: number, duration: number = this._duration, direction: ValueOf<typeof DIRECTION> = DIRECTION.NONE) {\n    const renderer = this._renderer;\n    const panelCount = renderer.panelCount;\n\n    const panel = renderer.getPanel(index);\n\n    if (!panel) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.INDEX_OUT_OF_RANGE(index, 0, panelCount - 1), ERROR.CODE.INDEX_OUT_OF_RANGE));\n    }\n\n    if (this._control.animating) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.ANIMATION_ALREADY_PLAYING, ERROR.CODE.ANIMATION_ALREADY_PLAYING));\n    }\n\n    return this._control.moveToPanel(panel, {\n      duration,\n      direction\n    });\n  }\n\n  /**\n   * Return the {@link Panel} at the given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.\n   * @return {Panel | null} Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>\n   * @see Panel\n   * @example\n   * ```ts\n   * const panel = flicking.getPanel(0);\n   * // Which is a shorthand to...\n   * const samePanel = flicking.panels[0];\n   * ```\n   */\n  public getPanel(index: number): Panel | null {\n    return this._renderer.getPanel(index);\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @return {this}\n   */\n  public enableInput(): this {\n    this._control.enable();\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @return {this}\n   */\n  public disableInput(): this {\n    this._control.disable();\n    return this;\n  }\n\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to {@link Flicking#setStatus setStatus()}\n   * @ko 현재 상태를 반환합니다. 반환받은 값을 {@link Flicking#setStatus setStatus()} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있습니다\n   * @param {object} options Status retrieving options<ko>Status 반환 옵션</ko>\n   * @param {boolean} [options.index=true] Include current panel index to the returning status. Camera will automatically move to the given index when the {@link Flicking#setStatus setStatus} is called<ko>현재 패널 인덱스를 반환값에 포함시킵니다. {@link Flicking#setStatus setStatus} 호출시 자동으로 해당 인덱스로 카메라를 움직입니다</ko>\n   * @param {boolean} [options.position=true] Include camera position to the returning status. This works only when the {@link Flicking#moveType moveType} is `freeScroll`<ko>카메라의 현재 위치를 반환값에 포함시킵니다. 이 옵션은 {@link Flicking#moveType moveType}이 `freeScroll`일 경우에만 동작합니다</ko>\n   * @param {boolean} [options.includePanelHTML=false] Include panel's `outerHTML` to the returning status<ko>패널의 `outerHTML`을 반환값에 포함시킵니다</ko>\n   * @param {boolean} [options.visiblePanelsOnly=false] Include only {@link Flicking#visiblePanel visiblePanel}'s HTML. This option is available only when the `includePanelHTML` is true\n   * <ko>현재 보이는 패널({@link Flicking#visiblePanel visiblePanel})의 HTML만 반환합니다. `includePanelHTML`이 `true`일 경우에만 동작합니다.</ko>\n   * @return {Partial<Status>} An object with current status value information<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus({\n    index = true,\n    position = true,\n    includePanelHTML = false,\n    visiblePanelsOnly = false\n  }: Partial<{\n    index: boolean;\n    position: boolean;\n    includePanelHTML: boolean;\n    visiblePanelsOnly: boolean;\n  }> = {}): Status {\n    const camera = this._camera;\n    const panels = visiblePanelsOnly ? this.visiblePanels : this.panels;\n\n    const status: Status = {\n      panels: panels.map(panel => {\n        const panelInfo: Status[\"panels\"][0] = { index: panel.index };\n\n        if (includePanelHTML) {\n          panelInfo.html = panel.element.outerHTML;\n        }\n\n        return panelInfo;\n      })\n    };\n\n    if (index) {\n      status.index = this.index;\n    }\n    if (position) {\n      const nearestAnchor = camera.findNearestAnchor(camera.position);\n\n      if (nearestAnchor) {\n        status.position = {\n          panel: nearestAnchor.panel.index,\n          progressInPanel: camera.getProgressInPanel(nearestAnchor.panel)\n        };\n      }\n\n    }\n\n    if (visiblePanelsOnly) {\n      const visiblePanels = this.visiblePanels;\n\n      status.visibleOffset = visiblePanels[0]?.index ?? 0;\n    }\n\n    return status;\n  }\n\n  /**\n   * Restore to the state of the given {@link Status}\n   * @ko 주어진 {@link Status}의 상태로 복원합니다\n   * @param {Partial<Status>} status Status value to be restored. You should use the return value of the {@link Flicking#getStatus getStatus()} method<ko>복원할 상태 값. {@link Flicking#getStatus getStatus()} 메서드의 반환값을 지정하면 됩니다</ko>\n   * @return {void}\n   */\n  public setStatus(status: Status): void {\n    if (!this._initialized) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_INITIALIZED, ERROR.CODE.NOT_INITIALIZED);\n    }\n\n    const {\n      index,\n      position,\n      visibleOffset,\n      panels\n    } = status;\n\n    const renderer = this._renderer;\n    const control = this._control;\n\n    // Can't add/remove panels on external rendering\n    if (panels[0]?.html && !this._renderExternal) {\n      renderer.batchRemove({ index: 0, deleteCount: this.panels.length });\n      renderer.batchInsert({ index: 0, elements: parseElement(panels.map(panel => panel.html!)) });\n    }\n\n    if (index) {\n      const panelIndex = visibleOffset\n        ? index - visibleOffset\n        : index;\n\n      void this.moveTo(panelIndex, 0).catch(() => void 0);\n    }\n\n    if (position && this._moveType === MOVE_TYPE.FREE_SCROLL) {\n      const { panel, progressInPanel } = position;\n      const panelIndex = visibleOffset\n        ? panel - visibleOffset\n        : panel;\n      const panelRange = renderer.panels[panelIndex].range;\n      const newCameraPos = panelRange.min + (panelRange.max - panelRange.min) * progressInPanel;\n\n      void control.moveToPosition(newCameraPos, 0).catch(() => void 0);\n    }\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가합니다\n   * @param {...Plugin} plugins The plugin(s) to add<ko>추가할 플러그인(들)</ko>\n   * @return {this}\n   * @see https://github.com/naver/egjs-flicking-plugins\n   */\n  public addPlugins(...plugins: Plugin[]) {\n    if (this._initialized) {\n      plugins.forEach(item => item.init(this));\n    }\n\n    this._plugins.push(...plugins);\n\n    return this;\n  }\n\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거합니다.\n   * @param {...Plugin} plugin The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {this}\n   * @see https://github.com/naver/egjs-flicking-plugins\n   */\n  public removePlugins(...plugins: Plugin[]) {\n    plugins.forEach(item => {\n      const foundIndex = findIndex(this._plugins, val => val === item);\n\n      if (foundIndex >= 0) {\n        item.destroy();\n        this._plugins.splice(foundIndex, 1);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Update viewport/panel sizes\n   * @ko 패널 및 뷰포트의 크기를 갱신합니다\n   * @method\n   * @fires Flicking#beforeResize\n   * @fires Flicking#afterResize\n   * @return {this}\n   */\n  public async resize(): Promise<void> {\n    const viewport = this._viewport;\n    const renderer = this._renderer;\n    const camera = this._camera;\n    const control = this._control;\n\n    const activePanel = control.activePanel;\n    const prevWidth = viewport.width;\n    const prevHeight = viewport.height;\n    const prevProgressInPanel = activePanel\n      ? camera.getProgressInPanel(activePanel)\n      : 0;\n\n    this.trigger(new ComponentEvent(EVENTS.BEFORE_RESIZE, {\n      width: prevWidth,\n      height: prevHeight,\n      element: viewport.element\n    }));\n\n    viewport.resize();\n    await renderer.forceRenderAllPanels(); // Render all panel elements, to update sizes\n    renderer.updatePanelSize();\n    await renderer.render();\n    camera.updateAlignPos();\n    camera.updateRange();\n    camera.updateAnchors();\n\n    if (control.animating) {\n      // TODO:\n    } else {\n      await control.updatePosition(prevProgressInPanel);\n      control.updateInput();\n    }\n\n    const newWidth = viewport.width;\n    const newHeight = viewport.height;\n    const sizeChanged = newWidth !== prevWidth || newHeight !== prevHeight;\n\n    this.trigger(new ComponentEvent(EVENTS.AFTER_RESIZE, {\n      width: viewport.width,\n      height: viewport.height,\n      prev: {\n        width: prevWidth,\n        height: prevHeight\n      },\n      sizeChanged,\n      element: viewport.element\n    }));\n  }\n\n  /**\n   * Add new panels after the last panel\n   * @ko 패널 목록의 제일 끝에 새로운 패널들을 추가합니다\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of appended panels<ko>추가된 패널들의 배열</ko>\n   * @see Panel\n   * @see ElementLike\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new Flicking(\"#flick\");\n   * // These are possible parameters\n   * flicking.append(document.createElement(\"div\"));\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\");\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public append(element: ElementLike | ElementLike[]): Panel[] {\n    return this.insert(this._renderer.panelCount, element);\n  }\n\n  /**\n   * Add new panels before the first panel\n   * This will increase index of panels after by the number of panels added\n   * @ko 패널 목록의 제일 앞(index 0)에 새로운 패널들을 추가합니다\n   * 추가한 패널의 개수만큼 기존 패널들의 인덱스가 증가합니다.\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   * @see Panel\n   * @see ElementLike\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.prepend(document.createElement(\"div\"));\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\");\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.prepend(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public prepend(element: ElementLike | ElementLike[]): Panel[] {\n    return this.insert(0, element);\n  }\n\n  /**\n   * Insert new panels at given index\n   * This will increase index of panels after by the number of panels added\n   * @ko 주어진 인덱스에 새로운 패널들을 추가합니다\n   * 해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.\n   * @param {number} index Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.insert(0, document.createElement(\"div\"));\n   * flicking.insert(2, \"\\<div\\>Panel\\</div\\>\");\n   * flicking.insert(1, [\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.insert(3, \"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public insert(index: number, element: ElementLike | ElementLike[]): Panel[] {\n    if (this._renderExternal) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_ALLOWED_IN_FRAMEWORK, ERROR.CODE.NOT_ALLOWED_IN_FRAMEWORK);\n    }\n\n    return this._renderer.batchInsert({ index, elements: parseElement(element) });\n  }\n\n  /**\n   * Remove the panel at the given index\n   * This will decrease index of panels after by the number of panels removed\n   * @ko 주어진 인덱스의 패널을 제거합니다\n   * 해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다\n   * @param {number} index Index of panel to remove<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>\n   * @return {Panel[]} An array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    if (this._renderExternal) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_ALLOWED_IN_FRAMEWORK, ERROR.CODE.NOT_ALLOWED_IN_FRAMEWORK);\n    }\n\n    return this._renderer.batchRemove({ index, deleteCount });\n  }\n\n  private _createControl(): Control {\n    const moveType = this._moveType;\n    const moveTypes = Object.keys(MOVE_TYPE).map(key => MOVE_TYPE[key] as ValueOf<typeof MOVE_TYPE>);\n\n    const moveTypeStr = Array.isArray(moveType)\n      ? moveType[0]\n      : moveType;\n\n    const moveTypeOptions = Array.isArray(moveType)\n      ? moveType[1] ?? {}\n      : {};\n\n    if (!includes(moveTypes, moveTypeStr)) {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"moveType\", JSON.stringify(moveType)), ERROR.CODE.WRONG_OPTION);\n    }\n\n    switch (moveTypeStr) {\n      case MOVE_TYPE.SNAP:\n        return new SnapControl();\n      case MOVE_TYPE.FREE_SCROLL:\n        return new FreeControl(moveTypeOptions);\n    }\n  }\n\n  private _createCamera(): Camera {\n    const cameraOption = { align: this._align };\n\n    if (this._circular) {\n      if (this._bound) {\n        // eslint-disable-next-line no-console\n        console.warn(\"\\\"circular\\\" and \\\"bound\\\" option cannot be used together, ignoring bound.\");\n      }\n      return new CircularCamera(cameraOption);\n    } else if (this._bound) {\n      return new BoundCamera(cameraOption);\n    } else {\n      return new LinearCamera(cameraOption);\n    }\n  }\n\n  private _createRenderer(): Renderer {\n    const renderingStrategy = this._renderOnlyVisible\n      ? new VisibleRenderingStrategy()\n      : new RawRenderingStrategy();\n\n    const rendererOptions = {\n      align: this._align,\n      strategy: renderingStrategy\n    };\n\n    const renderExternal = this._renderExternal;\n\n    return renderExternal\n      ? new (renderExternal.renderer as any)({ ...rendererOptions, ...renderExternal.rendererOptions })\n      : new VanillaRenderer(rendererOptions);\n  }\n\n  private _moveToInitialPanel(): void {\n    const renderer = this._renderer;\n    const control = this._control;\n    const initialPanel = renderer.getPanel(this._defaultIndex) || renderer.getPanel(0);\n\n    if (!initialPanel) return;\n\n    void control.moveToPanel(initialPanel, {\n      duration: 0\n    });\n  }\n\n  private _preventClickWhenDragged = (e: MouseEvent) => {\n    if (this._control.animating) {\n      e.preventDefault();\n    }\n  };\n}\n\nexport default Flicking;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel, { PanelOptions } from \"./Panel\";\n\nexport interface ExternalPanelOptions<T> extends PanelOptions {\n  externalComponent: T;\n}\n\n/**\n * An slide data component that holds information of a single HTMLElement\n * @ko 슬라이드 데이터 컴포넌트로, 단일 HTMLElement의 정보를 갖고 있습니다\n */\nabstract class ExternalPanel<T = any> extends Panel {\n  protected _externalComponent: T;\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {HTMLElement} [options.el] A `HTMLElement` panel's referencing<ko>패널이 참조하는 `HTMLElement`</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor(options: ExternalPanelOptions<T>) {\n    super(options);\n\n    this._externalComponent = options.externalComponent;\n  }\n}\n\nexport default ExternalPanel;\n","import Component from \"@egjs/component\";\n\nimport Flicking from \"../Flicking\";\n\n/**\n * Decorator that makes the method of flicking available in the framework.\n * @ko 프레임워크에서 플리킹의 메소드를 사용할 수 있게 하는 데코레이터.\n * @memberof eg.Flicking\n * @private\n * @example\n * ```js\n * import Flicking, { withFlickingMethods } from \"@egjs/flicking\";\n *\n * class Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>> {\n *   &#64;withFlickingMethods\n *   private flicking: Flicking;\n * }\n * ```\n */\nconst withFlickingMethods = (prototype: any, flickingName: string) => {\n  [Component.prototype, Flicking.prototype].forEach(proto => {\n    Object.getOwnPropertyNames(proto).filter(name => !prototype[name] && !name.startsWith(\"_\") && name !== \"constructor\")\n      .forEach((name: string) => {\n        const descriptor = Object.getOwnPropertyDescriptor(proto, name)!;\n\n        if (descriptor.value) {\n          // Public Function\n          Object.defineProperty(prototype, name, {\n            value: function(...args) {\n              return descriptor.value.call(this[flickingName], ...args);\n            }\n          });\n        } else {\n          const getterDescriptor: { get?: () => any; set?: (val: any) => void } = {};\n          if (descriptor.get) {\n            getterDescriptor.get = function() {\n              return descriptor.get?.call(this[flickingName]);\n            };\n          }\n          if (descriptor.set) {\n            getterDescriptor.set = function(...args) {\n              return descriptor.set?.call(this[flickingName], ...args);\n            };\n          }\n\n          Object.defineProperty(prototype, name, getterDescriptor);\n        }\n      });\n  });\n};\n\nexport default withFlickingMethods;\n","import { DiffResult } from \"@egjs/list-differ\";\n\nimport Flicking from \"../Flicking\";\nimport Renderer from \"../renderer/Renderer\";\n\nexport default (flicking: Flicking, diffResult: DiffResult<any>, rendered: any[]) => {\n  const renderer = flicking.renderer;\n\n  if (diffResult.removed.length > 0) {\n    let startIdx = -1;\n    let prevIdx = -1;\n\n    diffResult.removed.forEach((removedIdx, idx) => {\n      if (startIdx < 0) {\n        startIdx = idx;\n      }\n\n      if (prevIdx >= 0 && removedIdx !== prevIdx + 1) {\n        batchRemove(renderer, diffResult, startIdx, idx + 1);\n\n        startIdx = -1;\n        prevIdx = -1;\n      } else {\n        prevIdx = removedIdx;\n      }\n    });\n\n    if (startIdx >= 0) {\n      batchRemove(renderer, diffResult, startIdx);\n    }\n  }\n\n  diffResult.ordered.forEach(([prevIdx, newIdx]) => {\n    const prevPanel = renderer.panels[prevIdx];\n    const indexDiff = newIdx - prevIdx;\n\n    if (indexDiff > 0) {\n      prevPanel.increaseIndex(indexDiff);\n    } else {\n      prevPanel.decreaseIndex(-indexDiff);\n    }\n    // Update position\n    prevPanel.resize();\n  });\n\n  if (diffResult.added.length > 0) {\n    let startIdx = -1;\n    let prevIdx = -1;\n\n    diffResult.added.forEach((addedIdx, idx) => {\n      if (startIdx < 0) {\n        startIdx = idx;\n      }\n\n      if (prevIdx >= 0 && addedIdx !== prevIdx + 1) {\n        batchInsert(renderer, diffResult, rendered, startIdx, idx + 1);\n\n        startIdx = -1;\n        prevIdx = -1;\n      } else {\n        prevIdx = addedIdx;\n      }\n    });\n\n    if (startIdx >= 0) {\n      batchInsert(renderer, diffResult, rendered, startIdx);\n    }\n  }\n};\n\nconst batchInsert = (renderer: Renderer, diffResult: DiffResult<any>, rendered: any[], startIdx: number, endIdx?: number) => {\n  renderer.batchInsert(\n    ...diffResult.added.slice(startIdx, endIdx).map((index, elIdx) => ({ index, elements: [rendered[elIdx + diffResult.prevList.length]] }))\n  );\n};\n\nconst batchRemove = (renderer: Renderer, diffResult: DiffResult<any>, startIdx: number, endIdx?: number) => {\n  const removed = diffResult.removed.slice(startIdx, endIdx);\n\n  renderer.batchRemove({ index: startIdx, deleteCount: removed.length });\n};\n\n","import { DiffResult } from \"@egjs/list-differ\";\n\nimport Flicking from \"../Flicking\";\n\nexport default <T>(flicking: Flicking, diffResult: DiffResult<T>) => {\n  const removedPanels = diffResult.removed.reduce((map, idx) => {\n    map[idx] = true;\n    return map;\n  }, {});\n\n  return [\n    ...flicking.panels\n      .filter(panel => !removedPanels[panel.index])\n      // Sort panels by position\n      .sort((panel1, panel2) => (panel1.position + panel1.offset) - (panel2.position + panel2.offset))\n      .map(panel => diffResult.prevList[panel.index]),\n    ...diffResult.added.map(idx => diffResult.list[idx])\n  ];\n};\n\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"./Flicking\";\n\nexport * from \"./exports\";\n\nexport default Flicking;\n"],"names":["__extends","message","code","_super","_this","Object","setPrototypeOf","FlickingError","prototype","name","Error","CODE","WRONG_TYPE","ELEMENT_NOT_FOUND","VAL_MUST_NOT_NULL","NOT_ATTACHED_TO_FLICKING","WRONG_OPTION","INDEX_OUT_OF_RANGE","POSITION_NOT_REACHABLE","TRANSFORM_NOT_SUPPORTED","STOP_CALLED_BY_USER","ANIMATION_INTERRUPTED","ANIMATION_ALREADY_PLAYING","NOT_ALLOWED_IN_FRAMEWORK","NOT_INITIALIZED","NO_ACTIVE","MESSAGE","wrongVal","correctTypes","map","type","join","selector","val","optionName","min","max","position","EVENTS","READY","BEFORE_RESIZE","AFTER_RESIZE","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","WILL_CHANGE","CHANGED","WILL_RESTORE","RESTORED","SELECT","NEED_PANEL","VISIBLE_CHANGE","REACH_EDGE","PANEL_CHANGE","ALIGN","PREV","CENTER","NEXT","DIRECTION","NONE","MOVE_TYPE","SNAP","FREE_SCROLL","getElement","el","parent","targetEl","isString","parentEl","document","queryResult","querySelector","ERROR","nodeType","Node","ELEMENT_NODE","checkExistence","value","nameOnErrMsg","clamp","x","Math","getFlickingAttached","nameToThrowOnError","toArray","iterable","slice","call","parseAlign","align","size","alignPoint","parseArithmeticExpression","parseBounce","bounce","parsedBounce","Array","isArray","parsedVal","cssValue","base","cssRegex","idx","calculatedValue","matchResult","exec","sign","unit","parsedValue","parseFloat","getDirection","start","end","parseElement","element","elements","forEach","tempDiv","createElement","innerHTML","push","children","firstChild","removeChild","getMinusCompensatedIndex","includes","array","target","array_1","__values","circulatePosition","pos","offset","findIndex","checker","length","getProgress","prev","next","getStyle","window","getComputedStyle","currentStyle","_el","_width","_height","_padding","left","right","top","bottom","_isBorderBoxSizing","_a","width","height","padding","isBorderBoxSizing","style","newWidth","newHeight","resize","elStyle","offsetWidth","offsetHeight","paddingLeft","paddingRight","paddingTop","paddingBottom","boxSizing","EVENT","HOLD","CHANGE","RELEASE","ANIMATION_END","FINISH","POSITION_KEY","STATE_TYPE","ctx","flicking","axesEvent","transitTo","renderer","panelCount","DISABLED","holdStartEvent","ComponentEvent","trigger","isCanceled","HOLDING","controller","control","animatingContext","moveStartEvent","isTrusted","holding","direction","ANIMATING","onChange","State","inputEvent","horizontal","offsetX","offsetY","DRAGGING","delta","flick","setTo","camera","IDLE","_releaseEvent","releaseEvent","srcEvent","clickedElement","touchEvent","touch","changedTouches","elementFromPoint","clientX","clientY","panels","clickedPanel","panels_1","panel","contains","cameraPosition","clickedPanelPosition","index","AXES","prevPosition","lookAt","moveEvent","destPos","duration","moveToPosition","stop","nextStateType","nextState","IdleState","HoldingState","DraggingState","AnimatingState","DisabledState","_state","eventType","externalCtx","currentState","onHold","onRelease","onAnimationEnd","onFinish","_resetInternalValues","_stateMachine","StateMachine","_axes","state","_animatingContext","_panInput","isEnable","get","axis","_flicking","Axes","range","circular","deceleration","interruptable","easing","PanInput","viewport","inputType","iOSEdgeSwipeThreshold","scale","axes","connect","key","on","e","fire","destroy","enable","disable","controlParams","axm","set","Promise","reject","startPos","animate","resetContext","once","_b","resolve","animationFinishHandler","off","interruptionHandler","newActivePanel","prevActivePanel","_activePanel","updateAdaptiveHeight","prevIndex","prevPanel","_controller","AxesController","animating","init","_progressInPanel","activePanel","clampToReachablePosition","update","nearestAnchor","findNearestAnchor","removed","canReach","circularEnabled","camPos_1","camRangeDiff","rangeDiff","possiblePositions","filter","reduce","nearestPosition","abs","Infinity","_triggerIndexChangeEvent","_animateToPosition","triggeringEvent","event","currentPanel","animateTo","animation","_setActive","then","render","catch","err","clampedPosition","anchorAtPosition","prevPos","isOverThreshold","threshold","adjacentAnchor","getNextAnchor","getPrevAnchor","targetPanel","targetPos","Control","_c","stopAtEdge","_stopAtEdge","progressInPanel","panelRange","newPosition","findAnchorIncludePosition","_index","_pos","_panel","transforms","supportedStyle","documentElement","transformName","transforms_1","prefixedTransform","_transform","_align","_position","_alignPos","_offset","_range","_visiblePanels","_anchors","NaN","nearestPanel","panelPos","bounceSize","prevRange","nextRange","nextPanel","nextPosition","viewportEl","firstElementChild","_checkTranslateSupport","_refreshVisiblePanels","_checkNeedPanel","_checkReachEnd","_applyTransform","anchor","anchors","anchorsIncludingPosition","includePosition","nearest","prevDist","anchorIdx","dist","visibleRange","includeRange","alignVal","AnchorPoint","adaptive","setSize","unRenderedPanels","rendered","sizeIncludingMargin","_needPanelTriggered","newVisiblePanels","canSee","prevVisiblePanels","added","visiblePanels","needPanelTriggered","cameraSize","cameraRange","needPanelThreshold","cameraPrev","cameraNext","firstPanel","lastPanel","firstPanelPrev","lastPanelNext","newPos","wasBetweenRange","isBetweenRange","actualPosition","getPanel","Camera","_circularOffset","_circularEnabled","lastAnchor","firstAnchor","positionInRange","anchorInRange","loopCount","floor","visibleInCurrentRange","margin","visibleSize","panelSizeSum","canSetCircularMode","every","updateCircularToggleDirection","_updateCircularOffset","toggled","toggle","some","isToggled","sum","toggledPrev","toggledNext","toggleDirection","_calcPanelAreaSum","alignPos","viewportSize","panelAreaSize","canSetBoundMode","reachablePanels","shouldPrependBoundAnchor","shouldAppendBoundAnchor","indexOffset_1","newAnchors","splice","nearestPanelAtMin","_findNearestPanel","panelAtMin","panelAtMax","panelIdx","markForShow","_d","strategy","RawRenderingStrategy","_renderingStrategy","_panels","panelAlign","_getPanelAlign","_collectPanels","_i","items","allPanelsInserted","addedPanels","item","insertingIdx","panelsPushed","panelsInserted","_createPanel","insertedSize","_getPanelSizeSum","increaseIndex","increasePosition","_insertPanelElements","_updateCameraAndControl","moveToPanel","updateOffset","activeIndex","allPanelsRemoved","deleteCount","removingIdx","panelsPulled","panelsRemoved","removedSize","decreaseIndex","decreasePosition","_removePanelElements","resetActive","marginDiff","updateRange","updateAnchors","resetNeedPanelHistory","updateInput","_removed","_resetInternalStates","_size","_margin","_toggled","_toggleDirection","cameraRangeDiff","progress","alignPosition","camPos","disappearPosNext","disappearPosPrev","checkingRange","marginLeft","marginRight","marginTop","marginBottom","_updateAlignPos","includeMargin","moveTo","_moveBy","togglePosition","_togglePosition","prevToggled","camRange","camAlignPosition","camVisibleRange","camVisibleSize","minimumVisible","maximumVisible","shouldBeVisibleAtMin","shouldBeVisibleAtMax","options","_rendered","Panel","cameraEl","wasRenderedPanels","parentElement","updateRenderingPanels","renderingPanels","_getRenderingPanelsByOrder","_resetPanelElementOrder","cameraElement","fragment","createDocumentFragment","appendChild","_removeAllChildsFromCamera","childNodes","node","TEXT_NODE","cameraChilds","ElementPanel","nextSibling","nextSiblingElement","insertBefore","reversedPanels","__spreadArray","reverse","nextPanelEl","nextElementSibling","sort","a","b","Renderer","visibleIndexes","visibles","markForHide","root","defaultIndex","_e","_f","_g","bound","_h","_j","_k","_l","_m","pow","_o","_p","moveType","_q","_r","_s","_t","_u","preventClickOnDrag","_v","disableOnInit","_w","renderOnlyVisible","_x","autoInit","_y","autoResize","_z","renderExternal","_control","preventDefault","_initialized","_plugins","_defaultIndex","_horizontal","_circular","_bound","_adaptive","_needPanelThreshold","_deceleration","_duration","_easing","_inputType","_moveType","_threshold","_interruptable","_bounce","_iOSEdgeSwipeThreshold","_preventClickOnDrag","_disableOnInit","_renderOnlyVisible","_autoResize","_autoInit","_renderExternal","_viewport","Viewport","_renderer","_createRenderer","_camera","_createCamera","_createControl","bind","_moveToInitialPanel","addEventListener","_preventClickWhenDragged","disableInput","plugin","removeEventListener","includePanelHTML","visiblePanelsOnly","status","panelInfo","html","outerHTML","getProgressInPanel","visibleOffset","batchRemove","batchInsert","panelIndex","newCameraPos","plugins","foundIndex","prevWidth","prevHeight","prevProgressInPanel","forceRenderAllPanels","updatePanelSize","updateAlignPos","updatePosition","sizeChanged","insert","moveTypes","keys","moveTypeStr","moveTypeOptions","JSON","stringify","SnapControl","FreeControl","cameraOption","console","warn","CircularCamera","BoundCamera","LinearCamera","renderingStrategy","VisibleRenderingStrategy","rendererOptions","VanillaRenderer","initialPanel","Flicking","Component","_externalComponent","externalComponent","withFlickingMethods","flickingName","proto","getOwnPropertyNames","startsWith","descriptor","getOwnPropertyDescriptor","defineProperty","args","getterDescriptor","diffResult","startIdx_1","prevIdx_1","removedIdx","ordered","__read","prevIdx","newIdx","indexDiff","startIdx_2","prevIdx_2","addedIdx","startIdx","endIdx","elIdx","prevList","removedPanels","panel1","panel2","list"],"mappings":"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"}