{"version":3,"file":"flicking.js","sources":["../src/core/FlickingError.ts","../src/const/error.ts","../src/const/external.ts","../src/utils.ts","../src/core/Viewport.ts","../src/const/axes.ts","../src/control/states/State.ts","../src/control/states/IdleState.ts","../src/control/states/HoldingState.ts","../src/control/states/DraggingState.ts","../src/control/states/AnimatingState.ts","../src/control/states/DisabledState.ts","../src/control/StateMachine.ts","../src/control/AxesController.ts","../src/control/Control.ts","../src/control/SnapControl.ts","../src/control/FreeControl.ts","../src/control/index.ts","../src/core/AnchorPoint.ts","../src/camera/Camera.ts","../src/camera/LinearCamera.ts","../src/camera/CircularCamera.ts","../src/camera/BoundCamera.ts","../src/camera/index.ts","../src/renderer/RenderingStrategy/RawRenderingStrategy.ts","../src/renderer/Renderer.ts","../src/core/panel/Panel.ts","../src/core/panel/ElementPanel.ts","../src/renderer/VanillaRenderer.ts","../src/renderer/ExternalRenderer.ts","../src/renderer/RenderingStrategy/VisibleRenderingStrategy.ts","../src/renderer/index.ts","../src/Flicking.ts","../src/core/panel/ExternalPanel.ts","../src/core/index.ts","../src/index.umd.ts"],"sourcesContent":["/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n/**\n * Special type of known error that {@link Flicking} throws.\n * @ko Flicking 내부에서 알려진 오류 발생시 throw되는 에러\n * @property {number} code Error code<ko>에러 코드</ko>\n * @property {string} message Error message<ko>에러 메시지</ko>\n * @see {@link Constants.ERROR_CODE ERROR_CODE}\n * @example\n * ```ts\n * import Flicking, { FlickingError, ERROR_CODES } from \"@egjs/flicking\";\n * try {\n *   const flicking = new Flicking(\".flicking-viewport\")\n * } catch (e) {\n *   if (e instanceof FlickingError && e.code === ERROR_CODES.ELEMENT_NOT_FOUND) {\n *     console.error(\"Element not found\")\n *   }\n * }\n * ```\n */\nclass FlickingError extends Error {\n  /**\n   * @param message Error message<ko>에러 메시지</ko>\n   * @param code Error code<ko>에러 코드</ko>\n   */\n  public constructor(\n    public message: string,\n    public code: number) {\n    super(message);\n    Object.setPrototypeOf(this, FlickingError.prototype);\n    this.name = \"FlickingError\";\n  }\n}\n\nexport default FlickingError;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\n\n/**\n * Error codes of {@link FlickingError}. Below are the conditions where each error code occurs.\n * @ko {@link FlickingError}의 에러 코드. 아래는 각각의 에러 코드가 발생하는 조건입니다.\n * @name ERROR_CODE\n * @constant\n * @type object\n * @property {number} WRONG_TYPE Parameter type is wrong<ko>패러미터의 타입이 잘못되었을 경우</ko>\n * @property {number} ELEMENT_NOT_FOUND Element is not found inside page with the given CSS selector<ko>주어진 CSS selector로 페이지 내에서 해당 엘리먼트를 찾지 못했을 경우</ko>\n * @property {number} VAL_MUST_NOT_NULL Expected non-null value, but given `null` or `undefined`<ko>값을 기대했으나, `null`이나 `undefined`를 받은 경우</ko>\n * @property {number} NOT_ATTACHED_TO_FLICKING When Flicking's component is not initialized (i.e. {@link Flicking#init} is not called)<ko>Flicking 내부 컴포넌트가 초기화되지 않은 경우 ({@link Flicking#init}이 호출되지 않은 경우)</ko>\n * @property {number} WRONG_OPTION One of the options is wrong<ko>옵션들 중 잘못된 값이 있을 때</ko>\n * @property {number} INDEX_OUT_OF_RANGE When the given index is out of possible range<ko>인덱스가 주어진 범위를 벗어난 경우</ko>\n * @property {number} POSITION_NOT_REACHABLE When {@link Control#moveToPosition}'s position parameter is out of possible range.<ko>{@link Control#moveToPosition}의 `position` 패러미터가 도달 가능한 범위를 벗어난 경우</ko>\n * @property {number} TRANSFORM_NOT_SUPPORTED CSS `transform` property is not available(<=IE8) <ko>CSS `transform` 속성을 사용할 수 없는 경우(<=IE8)</ko>\n * @property {number} STOP_CALLED_BY_USER When the event's `stop()` is called by user.<ko>사용자에 의해 이벤트의 `stop()`이 호출된 경우</ko>\n * @property {number} ANIMATION_INTERRUPTED When the animation is interrupted by user.<ko>사용자에 의해 애니메이션이 중단된 경우</ko>\n * @property {number} ANIMATION_ALREADY_PLAYING When the animation is already playing.<ko>현재 애니메이션이 이미 진행중인 경우</ko>\n * @property {number} NOT_ALLOWED_IN_FRAMEWORK When the non-allowed method is called from frameworks (React, Angular, Vue...)\n * <ko>프레임워크(React, Angular, Vue ...)에서 사용 불가능한 메소드를 호출했을 경우</ko>\n * @property {number} NOT_INITIALIZED When the {@link Flicking#init} is not called before but is needed<ko>{@link Flicking#init}의 호출이 필요하나, 아직 호출되지 않았을 경우</ko>\n * @property {number} NO_ACTIVE When there're no active panel that flicking has selected. This may be due to the absence of any panels<ko>현재 Flicking이 선택한 패널이 없을 경우. 일반적으로 패널이 하나도 없는 경우에 발생할 수 있습니다</ko>\n */\nexport const CODE = {\n  WRONG_TYPE: 0,\n  ELEMENT_NOT_FOUND: 1,\n  VAL_MUST_NOT_NULL: 2,\n  NOT_ATTACHED_TO_FLICKING: 3,\n  WRONG_OPTION: 4,\n  INDEX_OUT_OF_RANGE: 5,\n  POSITION_NOT_REACHABLE: 6,\n  TRANSFORM_NOT_SUPPORTED: 7,\n  STOP_CALLED_BY_USER: 8,\n  ANIMATION_INTERRUPTED: 9,\n  ANIMATION_ALREADY_PLAYING: 10,\n  NOT_ALLOWED_IN_FRAMEWORK: 11,\n  NOT_INITIALIZED: 12,\n  NO_ACTIVE: 13\n} as const;\n\nexport const MESSAGE = {\n  WRONG_TYPE: (wrongVal: any, correctTypes: string[]) => `${wrongVal}(${typeof wrongVal}) is not a ${correctTypes.map(type => `\"${type}\"`).join(\" or \")}.`,\n  ELEMENT_NOT_FOUND: (selector: string) => `Element with selector \"${selector}\" not found.`,\n  VAL_MUST_NOT_NULL: (val: any, name: string) => `${name} should be provided. Given: ${val}`,\n  NOT_ATTACHED_TO_FLICKING: (name: string) => `${name} is not attached to the Flicking instance. \"init()\" should be called first.`,\n  WRONG_OPTION: (optionName: string, val: any) => `Option \"${optionName}\" is not in correct format, given: ${val}`,\n  INDEX_OUT_OF_RANGE: (val: number, min: number, max: number) => `Index \"${val}\" is out of range: should be between ${min} and ${max}.`,\n  POSITION_NOT_REACHABLE: (position: number) => `Position \"${position}\" is not reachable.`,\n  TRANSFORM_NOT_SUPPORTED: \"Browser does not support CSS transform.\",\n  STOP_CALLED_BY_USER: \"Event stop() is called by user.\",\n  ANIMATION_INTERRUPTED: \"Animation is interrupted by user input.\",\n  ANIMATION_ALREADY_PLAYING: \"Animation is already playing.\",\n  NOT_ALLOWED_IN_FRAMEWORK: \"This behavior is not allowed in the frameworks like React, Vue, or Angular.\",\n  NOT_INITIALIZED: \"Flicking is not initialized yet, call init() first.\",\n  NO_ACTIVE: \"There's no active panel that Flicking has selected. This may be due to the absence of any panels.\"\n} as const;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nexport { CODE as ERROR_CODE } from \"./error\";\n\n/**\n * Event type object with event name strings of {@link Flicking}\n * @ko {@link Flicking}의 이벤트 이름 문자열들을 담은 객체\n * @type {object}\n * @property {\"holdStart\"} HOLD_START holdStart event<ko>holdStart 이벤트</ko>\n * @property {\"holdEnd\"} HOLD_END holdEnd event<ko>holdEnd 이벤트</ko>\n * @property {\"moveStart\"} MOVE_START moveStart event<ko>moveStart 이벤트</ko>\n * @property {\"move\"} MOVE move event<ko>move 이벤트</ko>\n * @property {\"moveEnd\"} MOVE_END moveEnd event<ko>moveEnd 이벤트</ko>\n * @property {\"willChange\"} WILL_CHANGE willChange event<ko>willChange 이벤트</ko>\n * @property {\"changed\"} CHANGED changed event<ko>changed 이벤트</ko>\n * @property {\"willRestore\"} WILL_RESTORE willRestore event<ko>willRestore 이벤트</ko>\n * @property {\"restored\"} RESTORED restored event<ko>restored 이벤트</ko>\n * @property {\"select\"} SELECT select event<ko>select 이벤트</ko>\n * @property {\"needPanel\"} NEED_PANEL needPanel event<ko>needPanel 이벤트</ko>\n * @property {\"panelChange\"} PANEL_CHANGE panelChange event<ko>panelChange 이벤트</ko>\n * @example\n * ```ts\n * import { EVENTS } from \"@egjs/flicking\";\n * EVENTS.MOVE_START; // \"moveStart\"\n * ```\n */\nexport const EVENTS = {\n  READY: \"ready\",\n  BEFORE_RESIZE: \"beforeResize\",\n  AFTER_RESIZE: \"afterResize\",\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  WILL_CHANGE: \"willChange\",\n  CHANGED: \"changed\",\n  WILL_RESTORE: \"willRestore\",\n  RESTORED: \"restored\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n  VISIBLE_CHANGE: \"visibleChange\",\n  REACH_EDGE: \"reachEdge\",\n  PANEL_CHANGE: \"panelChange\"\n} as const;\n\n/**\n * An object with all possible predefined literal string for the {@link Flicking#align align} option\n * @ko {@link Flicking#align align} 옵션에 사용되는 미리 정의된 리터럴 상수들을 담고 있는 객체\n * @type {object}\n * @property {\"prev\"} PREV left/top align<ko>좌/상 정렬</ko>\n * @property {\"center\"} CENTER center align<ko>중앙 정렬</ko>\n * @property {\"next\"} NEXT right/bottom align<ko>우/하 정렬</ko>\n */\nexport const ALIGN = {\n  PREV: \"prev\",\n  CENTER: \"center\",\n  NEXT: \"next\"\n} as const;\n\n/**\n * An object of directions\n * @ko 방향을 나타내는 값들을 담고 있는 객체\n * @type {object}\n * @property {\"PREV\"} PREV \"left\" when {@link Flicking#horizontal horizontal} is true, and \"top\" when {@link Flicking#horizontal horizontal} is false\n * <ko>{@link Flicking#horizontal horizontal}가 `true`일 경우 왼쪽, {@link Flicking#horizontal horizontal}가 `false`일 경우 위쪽을 의미합니다</ko>\n * @property {\"NEXT\"} NEXT \"right\" when {@link Flicking#horizontal horizontal} is true, and \"bottom\" when {@link Flicking#horizontal horizontal} is false\n * <ko>{@link Flicking#horizontal horizontal}가 `true`일 경우 오른쪽, {@link Flicking#horizontal horizontal}가 `false`일 경우 아래쪽을 의미합니다</ko>\n * @property {null} NONE This value usually means it's the same position<ko>주로 제자리인 경우를 의미합니다</ko>\n */\nexport const DIRECTION = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n  NONE: null\n} as const;\n\n/**\n * An object with all possible {@link Flicking#moveType moveType}s\n * @ko Flicking이 제공하는 {@link Flicking#moveType moveType}들을 담고 있는 객체\n * @type {object}\n * @property {\"snap\"} SNAP Flicking's {@link Flicking#moveType moveType} that enables {@link SnapControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link SnapControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n * @property {\"freeScroll\"} FREE_SCROLL Flicking's {@link Flicking#moveType moveType} that enables {@link FreeControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link FreeControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n */\nexport const MOVE_TYPE = {\n  SNAP: \"snap\",\n  FREE_SCROLL: \"freeScroll\"\n} as const;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking, { FlickingOptions } from \"./Flicking\";\nimport FlickingError from \"./core/FlickingError\";\nimport * as ERROR from \"./const/error\";\nimport { ALIGN, DIRECTION } from \"./const/external\";\nimport { LiteralUnion, Merged, ValueOf } from \"./type/internal\";\nimport { ElementLike } from \"./type/external\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const merge = <From extends object, To extends object>(target: From, ...sources: To[]): Merged<From, To> => {\n  sources.forEach(source => {\n    Object.keys(source).forEach(key => {\n      target[key] = source[key] as unknown;\n    });\n  });\n\n  return target as Merged<From, To>;\n};\n\nexport const getElement = (el: HTMLElement | string | null, parent?: HTMLElement): HTMLElement => {\n  let targetEl: HTMLElement | null = null;\n\n  if (isString(el)) {\n    const parentEl = parent ? parent : document;\n    const queryResult = parentEl.querySelector(el);\n    if (!queryResult) {\n      throw new FlickingError(ERROR.MESSAGE.ELEMENT_NOT_FOUND(el), ERROR.CODE.ELEMENT_NOT_FOUND);\n    }\n    targetEl = queryResult as HTMLElement;\n  } else if (el && el.nodeType === Node.ELEMENT_NODE) {\n    targetEl = el;\n  }\n\n  if (!targetEl) {\n    throw new FlickingError(ERROR.MESSAGE.WRONG_TYPE(el, [\"HTMLElement\", \"string\"]), ERROR.CODE.WRONG_TYPE);\n  }\n\n  return targetEl;\n};\n\nexport const checkExistence = (value: any, nameOnErrMsg: string) => {\n  if (value == null) {\n    throw new FlickingError(ERROR.MESSAGE.VAL_MUST_NOT_NULL(value, nameOnErrMsg), ERROR.CODE.VAL_MUST_NOT_NULL);\n  }\n};\n\nexport const clamp = (x: number, min: number, max: number) => Math.max(Math.min(x, max), min);\n\nexport const getFlickingAttached = (val: Flicking | null, nameToThrowOnError: string): Flicking => {\n  if (!val) {\n    throw new FlickingError(ERROR.MESSAGE.NOT_ATTACHED_TO_FLICKING(nameToThrowOnError), ERROR.CODE.NOT_ATTACHED_TO_FLICKING);\n  }\n\n  return val;\n};\n\nexport const toArray = <T>(iterable: ArrayLike<T>): T[] => [].slice.call(iterable) as T[];\n\nexport const parseAlign = (align: LiteralUnion<ValueOf<typeof ALIGN>> | number, size: number): number => {\n  let alignPoint: number | null;\n  if (isString(align)) {\n    switch (align) {\n      case ALIGN.PREV:\n        alignPoint = 0;\n        break;\n      case ALIGN.CENTER:\n        alignPoint = 0.5 * size;\n        break;\n      case ALIGN.NEXT:\n        alignPoint = size;\n        break;\n      default:\n        alignPoint = parseArithmeticExpression(align, size);\n        if (alignPoint == null) {\n          throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"align\", align), ERROR.CODE.WRONG_OPTION);\n        }\n    }\n  } else {\n    alignPoint = align as number;\n  }\n\n  return alignPoint;\n};\n\nexport const parseBounce = (bounce: FlickingOptions[\"bounce\"], size: number): number[] => {\n  let parsedBounce: Array<number | null>;\n\n  if (Array.isArray(bounce)) {\n    parsedBounce = (bounce as string[]).map(val => parseArithmeticExpression(val, size));\n  } else {\n    const parsedVal = parseArithmeticExpression(bounce, size);\n\n    parsedBounce = [parsedVal, parsedVal];\n  }\n\n  return parsedBounce.map(val => {\n    if (val == null) {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"bounce\", bounce), ERROR.CODE.WRONG_OPTION);\n    }\n    return val;\n  });\n};\n\nexport const parseArithmeticExpression = (cssValue: number | string, base: number): number | null => {\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return cssValue;\n  }\n\n  let idx = 0;\n  let calculatedValue = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n\n    let parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return null;\n    }\n\n    if (unit === \"%\") {\n      parsedValue = (parsedValue / 100) * base;\n    }\n\n    calculatedValue += sign === \"+\"\n      ? parsedValue\n      : -parsedValue;\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return null;\n  }\n\n  return calculatedValue;\n};\n\nexport const parseCSSSizeValue = (val: string | number): string => isString(val) ? val : `${val}px`;\n\nexport const getDirection = (start: number, end: number): ValueOf<typeof DIRECTION> => {\n  if (start === end) return DIRECTION.NONE;\n  return start < end ? DIRECTION.NEXT : DIRECTION.PREV;\n};\n\nexport const parseElement = (element: ElementLike | ElementLike[]): HTMLElement[] => {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n      while (tempDiv.firstChild) {\n        tempDiv.removeChild(tempDiv.firstChild);\n      }\n    } else if (el && el.nodeType === Node.ELEMENT_NODE) {\n      elements.push(el);\n    } else {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_TYPE(el, [\"HTMLElement\", \"string\"]), ERROR.CODE.WRONG_TYPE);\n    }\n  });\n\n  return elements;\n};\n\nexport const getMinusCompensatedIndex = (idx: number, max: number) => idx < 0 ? clamp(idx + max, 0, max) : clamp(idx, 0, max);\n\nexport const includes = <T>(array: T[], target: any): target is T => {\n  for (const val of array) {\n    if (val === target) return true;\n  }\n  return false;\n};\n\nexport const isString = (val: any): val is string => typeof val === \"string\";\n\nexport const circulatePosition = (pos: number, min: number, max: number) => {\n  const size = max - min;\n\n  if (pos < min) {\n    const offset = (min - pos) % size;\n    pos = max - offset;\n  } else if (pos > max) {\n    const offset = (pos - max) % size;\n    pos = min + offset;\n  }\n\n  return pos;\n};\n\nexport const find = <T>(array: T[], checker: (val: T) => boolean): T | null => {\n  for (const val of array) {\n    if (checker(val)) {\n      return val;\n    }\n  }\n\n  return null;\n};\n\nexport const findRight = <T>(array: T[], checker: (val: T) => boolean): T | null => {\n  for (let idx = array.length - 1; idx >= 0; idx--) {\n    const val = array[idx];\n    if (checker(val)) {\n      return val;\n    }\n  }\n\n  return null;\n};\n\nexport const findIndex = <T>(array: T[], checker: (val: T) => boolean): number => {\n  for (let idx = 0; idx < array.length; idx++) {\n    if (checker(array[idx])) {\n      return idx;\n    }\n  }\n\n  return -1;\n};\n\nexport const getProgress = (pos: number, prev: number, next: number) => (pos - prev) / (next - prev);\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nexport const getStyle = (el: HTMLElement): CSSStyleDeclaration => window.getComputedStyle(el) || (el as any).currentStyle as CSSStyleDeclaration;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getStyle, isString } from \"../utils\";\n\n/**\n * A component that manages viewport size\n * @ko 뷰포트 크기 정보를 담당하는 컴포넌트\n */\nclass Viewport {\n  private _el: HTMLElement;\n  private _width: number;\n  private _height: number;\n  private _isBorderBoxSizing: boolean;\n  private _padding: {\n    left: number;\n    right: number;\n    top: number;\n    bottom: number;\n  };\n\n  /**\n   * A viewport(root) element\n   * @ko 뷰포트(root) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n\n  /**\n   * Viewport width, without paddings\n   * @ko 뷰포트 너비\n   * @type {number}\n   * @readonly\n   */\n  public get width() { return this._width - this._padding.left - this._padding.right; }\n  /**\n   * Viewport height, without paddings\n   * @ko 뷰포트 높이\n   * @type {number}\n   * @readonly\n   */\n  public get height() { return this._height - this._padding.top - this._padding.bottom; }\n  /**\n   * Viewport paddings\n   * @ko 뷰포트 CSS padding 값\n   * @type {object}\n   * @property {number} left CSS `padding-left`\n   * @property {number} right CSS `padding-right`\n   * @property {number} top CSS `padding-top`\n   * @property {number} bottom CSS `padding-bottom`\n   * @readonly\n   */\n  public get padding() { return this._padding; }\n\n  /**\n   * @param el A viewport element<ko>뷰포트 엘리먼트</ko>\n   */\n  public constructor(el: HTMLElement) {\n    this._el = el;\n    this._width = 0;\n    this._height = 0;\n    this._padding = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this._isBorderBoxSizing = false;\n  }\n\n  /**\n   * Change viewport's size.\n   * This will change the actual size of `.flicking-viewport` element by changing its CSS width/height property\n   * @ko 뷰포트 크기를 변경합니다.\n   * `.flicking-viewport` 엘리먼트에 해당 크기의 CSS width/height를 적용합니다\n   * @param {object} [size] New viewport size<ko>새 뷰포트 크기</ko>\n   * @param {number|string} [size.width] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   * @param {number|string} [size.height] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   */\n  public setSize({\n    width,\n    height\n  }: Partial<{\n    width: number | string;\n    height: number | string;\n  }>) {\n    const el = this._el;\n    const padding = this._padding;\n    const isBorderBoxSizing = this._isBorderBoxSizing;\n\n    if (width != null) {\n      if (isString(width)) {\n        el.style.width = width;\n      } else {\n        const newWidth = isBorderBoxSizing\n          ? width + padding.left + padding.right\n          : width;\n        el.style.width = `${newWidth}px`;\n      }\n    }\n    if (height != null) {\n      if (isString(height)) {\n        el.style.height = height;\n      } else {\n        const newHeight = isBorderBoxSizing\n          ? height + padding.top + padding.bottom\n          : height;\n        el.style.height = `${newHeight}px`;\n      }\n    }\n    this.resize();\n  }\n\n  /**\n   * Update width/height to the current viewport element's size\n   * @ko 현재 뷰포트 엘리먼트의 크기로 너비/높이를 업데이트합니다\n   */\n  public resize() {\n    const el = this._el;\n    const elStyle = getStyle(el);\n\n    this._width = el.offsetWidth;\n    this._height = el.offsetHeight;\n    this._padding = {\n      left: parseFloat(elStyle.paddingLeft),\n      right: parseFloat(elStyle.paddingRight),\n      top: parseFloat(elStyle.paddingTop),\n      bottom: parseFloat(elStyle.paddingBottom)\n    };\n    this._isBorderBoxSizing = elStyle.boxSizing === \"border-box\";\n  }\n}\n\nexport default Viewport;\n","/**\n * All possible @egjs/axes event keys\n * @internal\n */\nexport const EVENT = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\"\n} as const;\n\n/**\n * An Axis key that Flicking uses\n * @internal\n */\nexport const POSITION_KEY = \"flick\";\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OnAnimationEnd, OnChange, OnFinish, OnHold, OnRelease } from \"@egjs/axes\";\n\nimport Flicking from \"../../Flicking\";\n\nexport enum STATE_TYPE {\n  IDLE,\n  HOLDING,\n  DRAGGING,\n  ANIMATING,\n  DISABLED\n}\n\n/**\n * A component that shows the current status of the user input or the animation\n * @ko 현재 사용자 입력 또는 애니메이션 상태를 나타내는 컴포넌트\n * @internal\n */\nabstract class State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract readonly holding: boolean;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract readonly animating: boolean;\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onHold(ctx: {\n    flicking: Flicking;\n    axesEvent: OnHold;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onChange(ctx: {\n    flicking: Flicking;\n    axesEvent: OnChange;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onRelease(ctx: {\n    flicking: Flicking;\n    axesEvent: OnRelease;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onAnimationEnd(ctx: {\n    flicking: Flicking;\n    axesEvent: OnAnimationEnd;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event of Axes<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onFinish(ctx: {\n    flicking: Flicking;\n    axesEvent: OnFinish;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n}\n\nexport default State;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A default state when there's no user input and no animation's playing\n * @ko 사용자의 입력이 없고, 애니메이션이 동작하고있지 않은 기본 상태\n * @internal\n */\nclass IdleState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly animating = false;\n\n  public onHold(ctx: Parameters<State[\"onHold\"]>[0]): void {\n    // Shouldn't do any action until any panels on flicking area\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    if (flicking.renderer.panelCount <= 0) {\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    const holdStartEvent = new ComponentEvent(EVENTS.HOLD_START, {\n      axesEvent\n    });\n\n    flicking.trigger(holdStartEvent);\n\n    if (holdStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      transitTo(STATE_TYPE.HOLDING);\n    }\n  }\n\n  // By methods call\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n    const controller = flicking.control.controller;\n    const animatingContext = controller.animatingContext;\n\n    const moveStartEvent = new ComponentEvent(EVENTS.MOVE_START, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(animatingContext.start, animatingContext.end),\n      axesEvent\n    });\n    flicking.trigger(moveStartEvent);\n\n    if (moveStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n      transitTo(STATE_TYPE.ANIMATING).onChange(ctx);\n    }\n  }\n}\n\nexport default IdleState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Panel from \"../../core/panel/Panel\";\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when user's holding the Flicking area, but not moved a single pixel yet\n * @ko 사용자의 입력이 시작되었으나, 아직 움직이지는 않은 상태\n * @internal\n */\nclass HoldingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly holding = true;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly animating = false;\n\n  private _releaseEvent: OnRelease | null = null;\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    const inputEvent = axesEvent.inputEvent as { offsetX: number; offsetY: number };\n\n    const offset = flicking.horizontal\n      ? inputEvent.offsetX\n      : inputEvent.offsetY;\n\n    const moveStartEvent = new ComponentEvent(EVENTS.MOVE_START, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(0, -offset),\n      axesEvent\n    });\n    flicking.trigger(moveStartEvent);\n\n    if (moveStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n      transitTo(STATE_TYPE.DRAGGING).onChange(ctx);\n    }\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    flicking.trigger(new ComponentEvent(EVENTS.HOLD_END, { axesEvent }));\n\n    if (axesEvent.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      axesEvent.setTo({ flick: flicking.camera.position }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't handle select event here,\n    // As \"finish\" axes event happens\n    this._releaseEvent = axesEvent;\n  }\n\n  public onFinish(ctx: Parameters<State[\"onFinish\"]>[0]): void {\n    const { flicking, transitTo } = ctx;\n\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this._releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this._releaseEvent;\n\n    // Static click\n    /* eslint-disable @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access */\n    const srcEvent = releaseEvent.inputEvent.srcEvent;\n\n    let clickedElement: HTMLElement;\n    if (srcEvent.type === \"touchend\") {\n      const touchEvent = srcEvent as TouchEvent;\n      const touch = touchEvent.changedTouches[0];\n      clickedElement = document.elementFromPoint(touch.clientX, touch.clientY) as HTMLElement;\n    } else {\n      clickedElement = srcEvent.target;\n    }\n    /* eslint-enable */\n\n    const panels = flicking.renderer.panels;\n    let clickedPanel: Panel | null = null;\n\n    for (const panel of panels) {\n      if (panel.contains(clickedElement)) {\n        clickedPanel = panel;\n        break;\n      }\n    }\n\n    if (clickedPanel) {\n      const cameraPosition = flicking.camera.position;\n      const clickedPanelPosition = clickedPanel.position;\n\n      flicking.trigger(new ComponentEvent(EVENTS.SELECT, {\n        index: clickedPanel.index,\n        panel: clickedPanel,\n        // Direction to the clicked panel\n        direction: getDirection(cameraPosition, clickedPanelPosition)\n      }));\n    }\n  }\n}\n\nexport default HoldingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport * as AXES from \"../../const/axes\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when user's dragging the Flicking area\n * @ko 사용자가 드래깅중인 상태\n * @internal\n */\nclass DraggingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly holding = true;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    if (!axesEvent.delta[AXES.POSITION_KEY]) {\n      return;\n    }\n\n    const camera = flicking.camera;\n    const prevPosition = camera.position;\n\n    void camera.lookAt(axesEvent.pos[AXES.POSITION_KEY]);\n\n    const moveEvent = new ComponentEvent(EVENTS.MOVE, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(0, axesEvent.delta[AXES.POSITION_KEY]),\n      axesEvent\n    });\n    flicking.trigger(moveEvent);\n\n    if (moveEvent.isCanceled()) {\n      // Return to previous position\n      void camera.lookAt(prevPosition);\n      transitTo(STATE_TYPE.DISABLED);\n    }\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n    flicking.trigger(new ComponentEvent(EVENTS.HOLD_END, {\n      axesEvent\n    }));\n\n    if (flicking.renderer.panelCount <= 0) {\n      // There're no panels\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    transitTo(STATE_TYPE.ANIMATING);\n\n    const control = flicking.control;\n    const position = axesEvent.destPos[AXES.POSITION_KEY];\n    const duration = Math.max(axesEvent.duration, flicking.duration);\n\n    void control.moveToPosition(position, duration, axesEvent);\n  }\n}\n\nexport default DraggingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when Flicking's animating by user input or method call\n * @ko 사용자 입력이나 메소드 호출에 의해 Flicking의 애니메이션이 동작중인 상태\n * @internal\n */\nclass AnimatingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onHold(ctx: Parameters<State[\"onHold\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    const holdStartEvent = new ComponentEvent(EVENTS.HOLD_START, { axesEvent });\n    flicking.trigger(holdStartEvent);\n\n    if (holdStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      transitTo(STATE_TYPE.DRAGGING);\n    }\n  }\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    if (!axesEvent.delta.flick) {\n      return;\n    }\n\n    const camera = flicking.camera;\n    const prevPosition = camera.position;\n\n    void camera.lookAt(axesEvent.pos.flick);\n\n    const moveEvent = new ComponentEvent(EVENTS.MOVE, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(0, axesEvent.delta.flick),\n      axesEvent\n    });\n\n    flicking.trigger(moveEvent);\n\n    if (moveEvent.isCanceled()) {\n      // Return to previous position\n      void flicking.camera.lookAt(prevPosition);\n      transitTo(STATE_TYPE.DISABLED);\n    }\n  }\n\n  public onFinish(ctx: Parameters<State[\"onFinish\"]>[0]) {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    transitTo(STATE_TYPE.IDLE);\n\n    const controller = flicking.control.controller;\n    const animatingContext = controller.animatingContext;\n\n    flicking.trigger(new ComponentEvent(EVENTS.MOVE_END, {\n      isTrusted: axesEvent.isTrusted,\n      direction: getDirection(animatingContext.start, animatingContext.end),\n      axesEvent\n    }));\n  }\n}\n\nexport default AnimatingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when Flicking is stopped by event's `stop` method\n * @ko 이벤트의 `stop`호출에 의해 Flicking이 정지된 상태\n * @internal\n */\nclass DisabledState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onAnimationEnd(ctx: Parameters<State[\"onAnimationEnd\"]>[0]): void {\n    const { transitTo } = ctx;\n\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { axesEvent, transitTo } = ctx;\n\n    // Can stop Axes's change event\n    axesEvent.stop();\n\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { axesEvent, transitTo } = ctx;\n\n    // This is needed when stopped hold start event\n    if (axesEvent.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { AxesEvents } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport * as AXES from \"../const/axes\";\n\nimport IdleState from \"./states/IdleState\";\nimport HoldingState from \"./states/HoldingState\";\nimport DraggingState from \"./states/DraggingState\";\nimport AnimatingState from \"./states/AnimatingState\";\nimport DisabledState from \"./states/DisabledState\";\nimport State, { STATE_TYPE } from \"./states/State\";\n\n/**\n * @internal\n */\nclass StateMachine {\n  private _state: State;\n\n  public get state(): State { return this._state; }\n\n  public constructor() {\n    this._state = new IdleState();\n  }\n\n  public fire(eventType: keyof AxesEvents, externalCtx: {\n    flicking: Flicking;\n    axesEvent: any;\n  }) {\n    const currentState = this._state;\n    const ctx = { ...externalCtx, transitTo: this.transitTo };\n\n    switch (eventType) {\n      case AXES.EVENT.HOLD:\n        currentState.onHold(ctx);\n        break;\n      case AXES.EVENT.CHANGE:\n        currentState.onChange(ctx);\n        break;\n      case AXES.EVENT.RELEASE:\n        currentState.onRelease(ctx);\n        break;\n      case AXES.EVENT.ANIMATION_END:\n        currentState.onAnimationEnd(ctx);\n        break;\n      case AXES.EVENT.FINISH:\n        currentState.onFinish(ctx);\n        break;\n    }\n  }\n\n  public transitTo = (nextStateType: STATE_TYPE): State => {\n    let nextState: State;\n\n    switch (nextStateType) {\n      case STATE_TYPE.IDLE:\n        nextState = new IdleState();\n        break;\n      case STATE_TYPE.HOLDING:\n        nextState = new HoldingState();\n        break;\n      case STATE_TYPE.DRAGGING:\n        nextState = new DraggingState();\n        break;\n      case STATE_TYPE.ANIMATING:\n        nextState = new AnimatingState();\n        break;\n      case STATE_TYPE.DISABLED:\n        nextState = new DisabledState();\n        break;\n    }\n\n    this._state = nextState;\n\n    return this._state;\n  };\n}\n\nexport default StateMachine;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Axes, { PanInput, AxesEvents, OnRelease } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport * as AXES from \"../const/axes\";\nimport * as ERROR from \"../const/error\";\nimport { getFlickingAttached, parseBounce } from \"../utils\";\n\nimport StateMachine from \"./StateMachine\";\n\n/**\n * A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events\n * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트\n * @internal\n */\nclass AxesController {\n  private _flicking: Flicking | null;\n  private _axes: Axes | null;\n  private _panInput: PanInput | null;\n  private _stateMachine: StateMachine;\n\n  private _animatingContext: { start: number; end: number; offset: number };\n\n  /**\n   * An {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes}의 인스턴스\n   * @type {Axes}\n   * @see https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html\n   * @readonly\n   */\n  public get axes() { return this._axes; }\n  /**\n   * A activated {@link State} that shows the current status of the user input or the animation\n   * @ko 현재 활성화된 {@link State} 인스턴스로 사용자 입력 또는 애니메이션 상태를 나타냅니다\n   * @type {State}\n   */\n  public get state() { return this._stateMachine.state; }\n  /**\n   * A context of the current animation playing\n   * @ko 현재 재생중인 애니메이션 정보\n   * @type {object}\n   * @property {number} start A start position of the animation<ko>애니메이션 시작 지점</ko>\n   * @property {number} end A end position of the animation<ko>애니메이션 끝 지점</ko>\n   * @property {number} offset camera offset<ko>카메라 오프셋</ko>\n   * @readonly\n   */\n  public get animatingContext() { return this._animatingContext; }\n  /**\n   * A Boolean indicating whether the user input is enabled\n   * @ko 현재 사용자 입력이 활성화되었는지를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get enabled() { return this._panInput?.isEnable() ?? false; }\n  /**\n   * Current position value in {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} 인스턴스 내부의 현재 좌표 값\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._axes?.get([AXES.POSITION_KEY])[AXES.POSITION_KEY] ?? 0; }\n  /**\n   * Actual bounce size(px)\n   * @ko 적용된 bounce 크기(px 단위)\n   * @type {number[]}\n   * @readonly\n   */\n  public get bounce() { return this._axes?.axis[AXES.POSITION_KEY].bounce as number[] | undefined; }\n\n  /** */\n  public constructor() {\n    this._resetInternalValues();\n    this._stateMachine = new StateMachine();\n  }\n\n  /**\n   * Initialize AxesController\n   * @ko AxesController를 초기화합니다\n   * @param {Flicking} flicking An instance of Flicking\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n\n    this._axes = new Axes({\n      [AXES.POSITION_KEY]: {\n        range: [0, 0],\n        circular: false,\n        bounce: [0, 0]\n      }\n    }, {\n      deceleration: flicking.deceleration,\n      interruptable: flicking.interruptable,\n      easing: flicking.easing\n    });\n    this._panInput = new PanInput(flicking.viewport.element, {\n      inputType: flicking.inputType,\n      iOSEdgeSwipeThreshold: flicking.iOSEdgeSwipeThreshold,\n      scale: flicking.horizontal ? [-1, 0] : [0, -1]\n    });\n\n    const axes = this._axes;\n\n    axes.connect(flicking.horizontal ? [AXES.POSITION_KEY, \"\"] : [\"\", AXES.POSITION_KEY], this._panInput);\n\n    for (const key in AXES.EVENT) {\n      const eventType = AXES.EVENT[key] as keyof AxesEvents;\n\n      axes.on(eventType, (e: AxesEvents[typeof eventType]) => {\n        this._stateMachine.fire(eventType, {\n          flicking,\n          axesEvent: e\n        });\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Destroy AxesController and return to initial state\n   * @ko AxesController를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this._axes?.destroy();\n    this._panInput?.destroy();\n\n    this._resetInternalValues();\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @chainable\n   * @return {this}\n   */\n  public enable(): this {\n    this._panInput?.enable();\n\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @chainable\n   * @return {this}\n   */\n  public disable(): this {\n    this._panInput?.disable();\n\n    return this;\n  }\n\n  /**\n   * Update {@link https://naver.github.io/egjs-axes/ @egjs/axes}'s state\n   * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 상태를 갱신합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link AxesController#init init} is not called before\n   * <ko>{@link AxesController#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public update(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const axes = this._axes!;\n    const controlParams = camera.controlParams;\n    const axis = axes.axis[AXES.POSITION_KEY];\n\n    axis.circular = [controlParams.circular, controlParams.circular];\n    axis.range = [controlParams.range.min, controlParams.range.max];\n    axis.bounce = parseBounce(flicking.bounce, camera.size);\n\n    axes.axm.set({ [AXES.POSITION_KEY]: controlParams.position });\n\n    return this;\n  }\n\n  /**\n   * Run Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#setTo setTo} using the given position\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#setTo setTo} 메소드를 주어진 좌표를 이용하여 수행합니다\n   * @param {number} position A position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {number} [axesEvent] If provided, it'll use its {@link https://naver#github#io/egjs-axes/release/latest/doc/eg#Axes#html#setTo setTo} method instead<ko>이 값이 주어졌을 경우, 해당 이벤트의 {@link https://naver#github#io/egjs-axes/release/latest/doc/eg#Axes#html#setTo setTo} 메소드를 대신해서 사용합니다.</ko>\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public animateTo(position: number, duration: number, axesEvent?: OnRelease): Promise<void> {\n    const axes = this._axes;\n\n    if (!axes) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.NOT_ATTACHED_TO_FLICKING(\"Control\"), ERROR.CODE.NOT_ATTACHED_TO_FLICKING));\n    }\n\n    const startPos = axes.get([AXES.POSITION_KEY])[AXES.POSITION_KEY];\n\n    if (startPos === position) {\n      const flicking = getFlickingAttached(this._flicking, \"Control\");\n\n      return flicking.camera.lookAt(position);\n    }\n\n    this._animatingContext = {\n      start: startPos,\n      end: position,\n      offset: 0\n    };\n\n    const animate = () => {\n      const resetContext = () => {\n        this._animatingContext = { start: 0, end: 0, offset: 0 };\n      };\n\n      axes.once(AXES.EVENT.FINISH, resetContext);\n\n      if (axesEvent) {\n        axesEvent.setTo({ [AXES.POSITION_KEY]: position }, duration);\n      } else {\n        axes.setTo({ [AXES.POSITION_KEY]: position }, duration);\n      }\n    };\n\n    if (duration === 0) {\n      animate();\n      axes.axm.set({ [AXES.POSITION_KEY]: position });\n\n      return Promise.resolve();\n    } else {\n      return new Promise((resolve, reject) => {\n        const animationFinishHandler = () => {\n          axes.off(AXES.EVENT.HOLD, interruptionHandler);\n          resolve();\n        };\n\n        const interruptionHandler = () => {\n          axes.off(AXES.EVENT.FINISH, animationFinishHandler);\n          reject(new FlickingError(ERROR.MESSAGE.ANIMATION_INTERRUPTED, ERROR.CODE.ANIMATION_INTERRUPTED));\n        };\n\n        axes.once(AXES.EVENT.FINISH, animationFinishHandler);\n        axes.once(AXES.EVENT.HOLD, interruptionHandler);\n\n        animate();\n      });\n    }\n  }\n\n  protected _resetInternalValues() {\n    this._flicking = null;\n    this._axes = null;\n    this._panInput = null;\n    this._animatingContext = { start: 0, end: 0, offset: 0 };\n  }\n}\n\nexport default AxesController;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport Panel from \"../core/panel/Panel\";\nimport AxesController from \"../control/AxesController\";\nimport { DIRECTION, EVENTS } from \"../const/external\";\nimport * as ERROR from \"../const/error\";\nimport { getDirection, getFlickingAttached } from \"../utils\";\nimport { ValueOf } from \"../type/internal\";\n\n/**\n * A component that manages inputs and animation of Flicking\n * @ko Flicking의 입력 장치 & 애니메이션을 담당하는 컴포넌트\n */\nabstract class Control {\n  // Internal States\n  protected _flicking: Flicking | null;\n  protected _controller: AxesController;\n  protected _activePanel: Panel | null;\n\n  /**\n   * A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events\n   * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트\n   * @type {AxesController}\n   * @readonly\n   */\n  public get controller() { return this._controller; }\n  /**\n   * Index number of the {@link Flicking#currentPanel currentPanel}\n   * @ko {@link Flicking#currentPanel currentPanel}의 인덱스 번호\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get activeIndex() { return this._activePanel?.index ?? -1; }\n  /**\n   * An active panel\n   * @ko 현재 선택된 패널\n   * @type {Panel | null}\n   * @readonly\n   */\n  public get activePanel() { return this._activePanel; }\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get animating() { return this._controller.state.animating; }\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get holding() { return this._controller.state.holding; }\n\n  /** */\n  public constructor() {\n    this._flicking = null;\n    this._controller = new AxesController();\n    this._activePanel = null;\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @method\n   * @abstract\n   * @memberof Control\n   * @instance\n   * @name moveToPosition\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public abstract moveToPosition(position: number, duration: number, axesEvent?: OnRelease): Promise<void>;\n\n  /**\n   * Initialize Control\n   * @ko Control을 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n    this._controller.init(flicking);\n\n    return this;\n  }\n\n  /**\n   * Destroy Control and return to initial state\n   * @ko Control을 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this._controller.destroy();\n\n    this._flicking = null;\n    this._activePanel = null;\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @chainable\n   * @return {this}\n   */\n  public enable(): this {\n    this._controller.enable();\n\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @chainable\n   * @return {this}\n   */\n  public disable(): this {\n    this._controller.disable();\n\n    return this;\n  }\n\n  /**\n   * Update position after resizing\n   * @ko resize 이후에 position을 업데이트합니다\n   * @param {number} progressInPanel Previous camera's progress in active panel before resize<ko>Resize 이전 현재 선택된 패널 내에서의 카메라 progress 값</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {Promise<void>}\n   */\n  public async updatePosition(_progressInPanel: number): Promise<void> {   // eslint-disable-line @typescript-eslint/no-unused-vars\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    if (activePanel) {\n      await camera.lookAt(camera.clampToReachablePosition(activePanel.position));\n    }\n  }\n\n  /**\n   * Update {@link Control#controller controller}'s state\n   * @ko {@link Control#controller controller}의 내부 상태를 갱신합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateInput(): this {\n    this._controller.update();\n\n    return this;\n  }\n\n  /**\n   * Reset {@link Control#activePanel activePanel} and {@link Control#activeAnchor activeAnchor} to `null`\n   * @ko {@link Control#activePanel activePanel}와 {@link Control#activeAnchor activeAnchor}를 `null`로 초기화합니다\n   * @chainable\n   * @return {this}\n   */\n  public resetActive(): this {\n    this._activePanel = null;\n\n    return this;\n  }\n\n  /**\n   * Move {@link Camera} to the given panel\n   * @ko {@link Camera}를 해당 패널 위로 이동합니다\n   * @param {Panel} panel The target panel to move<ko>이동할 패널</ko>\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {number} duration Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @param {DIRECTION} [direction=DIRECTION.NONE] Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPanel(panel: Panel, {\n    duration,\n    direction = DIRECTION.NONE,\n    axesEvent\n  }: {\n    duration: number;\n    direction?: ValueOf<typeof DIRECTION>;\n    axesEvent?: OnRelease;\n  }) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n\n    let position = panel.position;\n    const nearestAnchor = camera.findNearestAnchor(position);\n\n    if (panel.removed || !nearestAnchor) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(panel.position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n    if (!camera.canReach(panel)) {\n      // Override position & panel if that panel is not reachable\n      position = nearestAnchor.position;\n      panel = nearestAnchor.panel;\n    } else if (flicking.circularEnabled) {\n      // Circular mode is enabled, find nearest distance to panel\n      const camPos = this._controller.position; // Actual position of the Axes\n      const camRangeDiff = camera.rangeDiff;\n      const possiblePositions = [position, position + camRangeDiff, position - camRangeDiff]\n        .filter(pos => {\n          if (direction === DIRECTION.NONE) return true;\n\n          return direction === DIRECTION.PREV\n            ? pos <= camPos\n            : pos >= camPos;\n        });\n\n      position = possiblePositions.reduce((nearestPosition, pos) => {\n        if (Math.abs(camPos - pos) < Math.abs(camPos - nearestPosition)) {\n          return pos;\n        } else {\n          return nearestPosition;\n        }\n      }, Infinity);\n    }\n\n    this._triggerIndexChangeEvent(panel, panel.position, axesEvent);\n\n    return this._animateToPosition({ position, duration, newActivePanel: panel, axesEvent });\n  }\n\n  protected _triggerIndexChangeEvent(panel: Panel, position: number, axesEvent?: OnRelease): void {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const triggeringEvent = panel !== this._activePanel ? EVENTS.WILL_CHANGE : EVENTS.WILL_RESTORE;\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    const event = new ComponentEvent(triggeringEvent, {\n      index: panel.index,\n      panel,\n      isTrusted: axesEvent?.isTrusted || false,\n      direction: getDirection(activePanel?.position ?? camera.position, position)\n    });\n    flicking.trigger(event);\n\n    if (event.isCanceled()) {\n      throw new FlickingError(ERROR.MESSAGE.STOP_CALLED_BY_USER, ERROR.CODE.STOP_CALLED_BY_USER);\n    }\n  }\n\n  protected async _animateToPosition({\n    position,\n    duration,\n    newActivePanel,\n    axesEvent\n  }: {\n    position: number;\n    duration: number;\n    newActivePanel: Panel;\n    axesEvent?: OnRelease;\n  }) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const currentPanel = this._activePanel;\n    const animate = () => this._controller.animateTo(position, duration, axesEvent);\n    const isTrusted = axesEvent?.isTrusted || false;\n\n    if (duration <= 0) {\n      const animation = animate();\n      this._setActive(newActivePanel, currentPanel, isTrusted);\n      return animation;\n    } else {\n      return animate().then(async () => {\n        this._setActive(newActivePanel, currentPanel, isTrusted);\n        await flicking.renderer.render();\n      }).catch(err => {\n        if (axesEvent && err instanceof FlickingError && err.code === ERROR.CODE.ANIMATION_INTERRUPTED) return;\n        throw err;\n      });\n    }\n  }\n\n  protected _setActive = (newActivePanel: Panel, prevActivePanel: Panel | null, isTrusted: boolean) => {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n\n    this._activePanel = newActivePanel;\n\n    flicking.camera.updateAdaptiveHeight();\n\n    if (newActivePanel !== prevActivePanel) {\n      flicking.trigger(new ComponentEvent(EVENTS.CHANGED, {\n        index: newActivePanel.index,\n        panel: newActivePanel,\n        prevIndex: prevActivePanel?.index ?? -1,\n        prevPanel: prevActivePanel,\n        isTrusted,\n        direction: prevActivePanel ? getDirection(prevActivePanel.position, newActivePanel.position) : DIRECTION.NONE\n      }));\n    } else {\n      flicking.trigger(new ComponentEvent(EVENTS.RESTORED, {\n        isTrusted\n      }));\n    }\n  };\n}\n\nexport default Control;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport Panel from \"../core/panel/Panel\";\nimport FlickingError from \"../core/FlickingError\";\nimport { getFlickingAttached } from \"../utils\";\nimport * as ERROR from \"../const/error\";\n\nimport Control from \"./Control\";\n\n/**\n * A {@link Control} that uses a release momentum to choose destination panel\n * @ko 입력을 중단한 시점의 가속도에 영향받아 도달할 패널을 계산하는 이동 방식을 사용하는 {@link Control}\n */\nclass SnapControl extends Control {\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    const clampedPosition = camera.clampToReachablePosition(position);\n    const anchorAtPosition = camera.findNearestAnchor(clampedPosition);\n\n    if (!anchorAtPosition || !activePanel) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const prevPos = activePanel.position;\n\n    const isOverThreshold = Math.abs(position - prevPos) >= flicking.threshold;\n    const adjacentAnchor = (position > prevPos)\n      ? camera.getNextAnchor(anchorAtPosition)\n      : camera.getPrevAnchor(anchorAtPosition);\n\n    let targetPos: number;\n    let targetPanel: Panel;\n\n    if (isOverThreshold && anchorAtPosition.position !== activePanel.position) {\n      // Move to anchor at position\n      targetPanel = anchorAtPosition.panel;\n      targetPos = anchorAtPosition.position;\n    } else if (isOverThreshold && adjacentAnchor) {\n      // Move to adjacent anchor\n      targetPanel = adjacentAnchor.panel;\n      targetPos = adjacentAnchor.position;\n    } else {\n      // Restore to active panel\n      targetPos = camera.clampToReachablePosition(activePanel.position);\n      targetPanel = activePanel;\n    }\n\n    this._triggerIndexChangeEvent(targetPanel, position, axesEvent);\n\n    return this._animateToPosition({\n      position: targetPos,\n      duration,\n      newActivePanel: targetPanel,\n      axesEvent\n    });\n  }\n}\n\nexport default SnapControl;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport FlickingError from \"../core/FlickingError\";\nimport * as ERROR from \"../const/error\";\nimport { getFlickingAttached } from \"../utils\";\n\nimport Control from \"./Control\";\n\n/**\n * An options for the {@link FreeControl}\n * @ko {@link FreeControl} 생성시 사용되는 옵션\n * @interface\n * @property {boolean} stopAtEdge Make scroll animation to stop at the start/end of the scroll area, not going out the bounce area\n * <ko>스크롤 애니메이션을 스크롤 영역의 시작과 끝부분에서 멈추도록 하여, 바운스 영역을 넘어가지 않도록 합니다</ko>\n */\nexport interface FreeControlOptions {\n  stopAtEdge: boolean;\n}\n\n/**\n * A {@link Control} that can be scrolled freely without alignment\n * @ko 패널이 정해진 지점에 정렬되지 않고, 자유롭게 스크롤할 수 있는 이동 방식을 사용하는 {@link Control}\n */\nclass FreeControl extends Control {\n  private _stopAtEdge: FreeControlOptions[\"stopAtEdge\"];\n\n  /**\n   * Make scroll animation to stop at the start/end of the scroll area, not going out the bounce area\n   * @ko 스크롤 애니메이션을 스크롤 영역의 시작과 끝부분에서 멈추도록 하여, 바운스 영역을 넘어가지 않도록 합니다\n   * @type {boolean}\n   * @default true\n   */\n  public get stopAtEdge() { return this._stopAtEdge; }\n\n  public set stopAtEdge(val: FreeControlOptions[\"stopAtEdge\"]) { this._stopAtEdge = val; }\n\n  /** */\n  public constructor({\n    stopAtEdge = true\n  }: Partial<FreeControlOptions> = {}) {\n    super();\n\n    this._stopAtEdge = stopAtEdge;\n  }\n\n  /**\n   * Update position after resizing\n   * @ko resize 이후에 position을 업데이트합니다\n   * @param {number} progressInPanel Previous camera's progress in active panel before resize<ko>Resize 이전 현재 선택된 패널 내에서의 카메라 progress 값</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {Promise<void>}\n   */\n  public async updatePosition(progressInPanel: number): Promise<void> {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    if (activePanel) {\n      const panelRange = activePanel.range;\n      const newPosition = panelRange.min + (panelRange.max - panelRange.min) * progressInPanel;\n\n      await camera.lookAt(camera.clampToReachablePosition(newPosition));\n    }\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n\n    const camera = flicking.camera;\n    const targetPos = camera.clampToReachablePosition(position);\n\n    const anchorAtPosition = camera.findAnchorIncludePosition(targetPos);\n\n    if (!anchorAtPosition) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const targetPanel = anchorAtPosition.panel;\n\n    // Trigger only change event\n    if (targetPanel !== this._activePanel) {\n      this._triggerIndexChangeEvent(targetPanel, position, axesEvent);\n    }\n\n    return this._animateToPosition({ position: this._stopAtEdge ? targetPos : position, duration, newActivePanel: targetPanel, axesEvent });\n  }\n}\n\nexport default FreeControl;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Control from \"./Control\";\nimport SnapControl from \"./SnapControl\";\nimport FreeControl from \"./FreeControl\";\nimport AxesController from \"./AxesController\";\nimport State from \"./states/State\";\nimport IdleState from \"./states/IdleState\";\nimport HoldingState from \"./states/HoldingState\";\nimport DraggingState from \"./states/DraggingState\";\nimport AnimatingState from \"./states/AnimatingState\";\nimport DisabledState from \"./states/DisabledState\";\nimport StateMachine from \"./StateMachine\";\n\nexport {\n  Control,\n  SnapControl,\n  FreeControl,\n  AxesController,\n  State,\n  IdleState,\n  HoldingState,\n  DraggingState,\n  AnimatingState,\n  DisabledState,\n  StateMachine\n};\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"./panel/Panel\";\n\n/**\n * A data component that has actual position where the camera should be stopped at\n * @ko 카메라가 정지해야하는 실제 위치를 담고 있는 데이터 컴포넌트\n */\nclass AnchorPoint {\n  private _index: number;\n  private _pos: number;\n  private _panel: Panel;\n\n  /**\n   * Index of AnchorPoint\n   * @ko AnchorPoint의 인덱스\n   * @type {number}\n   * @readonly\n   */\n  public get index() { return this._index; }\n  /**\n   * Position of AnchorPoint\n   * @ko AnchorPoint의 좌표\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._pos; }\n  /**\n   * A {@link Panel} instance AnchorPoint is referencing to\n   * @ko AnchorPoint가 참조하고 있는 {@link Panel}\n   * @type {Panel}\n   * @readonly\n   */\n  public get panel() { return this._panel; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 객체</ko>\n   * @param {number} [options.index] Index of AnchorPoint<ko>AnchorPoint의 인덱스</ko>\n   * @param {number} [options.position] Position of AnchorPoint<ko>AnchorPoint의 좌표</ko>\n   * @param {Panel} [options.panel] A {@link Panel} instance AnchorPoint is referencing to<ko>AnchorPoint가 참조하고 있는 {@link Panel}</ko>\n   */\n  public constructor({\n    index,\n    position,\n    panel\n  }: {\n    index: number;\n    position: number;\n    panel: Panel;\n  }) {\n    this._index = index;\n    this._pos = position;\n    this._panel = panel;\n  }\n}\n\nexport default AnchorPoint;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking, { FlickingOptions } from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport * as ERROR from \"../const/error\";\nimport { ALIGN, DIRECTION, EVENTS } from \"../const/external\";\nimport { checkExistence, clamp, getFlickingAttached, getProgress, includes, parseAlign } from \"../utils\";\n\nexport interface CameraOptions {\n  align: FlickingOptions[\"align\"];\n}\n\n/**\n * A component that manages actual movement inside the viewport\n * @ko 뷰포트 내에서의 실제 움직임을 담당하는 컴포넌트\n */\nabstract class Camera {\n  // Options\n  protected _align: FlickingOptions[\"align\"];\n\n  // Internal states\n  protected _flicking: Flicking | null;\n  protected _el: HTMLElement;\n  protected _transform: string;\n  protected _position: number;\n  protected _alignPos: number;\n  protected _offset: number;\n  protected _range: { min: number; max: number };\n  protected _visiblePanels: Panel[];\n  protected _anchors: AnchorPoint[];\n  protected _needPanelTriggered: { prev: boolean; next: boolean };\n\n  // Internal states getter\n  /**\n   * The camera(`.flicking-camera`) element\n   * @ko 카메라(`.flicking-camera`) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n  /**\n   * Current position of the camera\n   * @ko Camera의 현재 좌표\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._position; }\n  /**\n   * Align position inside the viewport where {@link Panel}'s {@link Panel#alignPosition alignPosition} should be located at\n   * @ko 패널의 정렬 기준 위치. 뷰포트 내에서 {@link Panel}의 {@link Panel#alignPosition alignPosition}이 위치해야 하는 곳입니다\n   * @type {number}\n   * @readonly\n   */\n  public get alignPosition() { return this._alignPos; }\n  /**\n   * Position offset, used for the {@link Flicking#renderOnlyVisible renderOnlyVisible} option\n   * @ko Camera의 좌표 오프셋. {@link Flicking#renderOnlyVisible renderOnlyVisible} 옵션을 위해 사용됩니다.\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get offset() { return this._offset; }\n  /**\n   * A range that Camera's {@link Camera#position position} can reach\n   * @ko Camera의 {@link Camera#position position}이 도달 가능한 범위\n   * @type {object}\n   * @property {number} min A minimum position<ko>최소 위치</ko>\n   * @property {number} min A maximum position<ko>최대 위치</ko>\n   * @readonly\n   */\n  public get range() { return this._range; }\n  /**\n   * A difference between Camera's minimum and maximum position that can reach\n   * @ko Camera가 도달 가능한 최소/최대 좌표의 차이\n   * @type {number}\n   * @readonly\n   */\n  public get rangeDiff() { return this._range.max - this._range.min; }\n  /**\n   * An array of visible panels from the current position\n   * @ko 현재 보이는 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   */\n  public get visiblePanels() { return this._visiblePanels; }\n  /**\n   * A range of the visible area from the current position\n   * @ko 현재 위치에서 보이는 범위\n   * @type {object}\n   * @property {number} min A minimum position<ko>최소 위치</ko>\n   * @property {number} min A maximum position<ko>최대 위치</ko>\n   * @readonly\n   */\n  public get visibleRange() { return { min: this._position - this._alignPos, max: this._position - this._alignPos + this.size }; }\n  /**\n   * An array of {@link AnchorPoint}s that Camera can be stopped at\n   * @ko 카메라가 도달 가능한 {@link AnchorPoint}의 목록\n   * @type {AnchorPoint[]}\n   * @readonly\n   */\n  public get anchorPoints() { return this._anchors; }\n  /**\n   * A current parameters of the Camera for updating {@link AxesController}\n   * @ko {@link AxesController}를 업데이트하기 위한 현재 Camera 패러미터들\n   * @type {object}\n   * @property {object} range Camera {@link Camera#range range}<ko>Camera가 도달 가능한 범위({@link Camera#range range})</ko>\n   * @property {number} position Current position<ko>현재 좌표</ko>\n   * @property {boolean} circular A Boolean indicating whether the {@link Flicking#circular circular} option is enabled<ko>{@link Flicking#circular circular}옵션 활성화 여부</ko>\n   * @readonly\n   */\n  public get controlParams() { return { range: this._range, position: this._position, circular: false }; }\n  /**\n   * A Boolean value indicating whether Camera's over the minimum or maximum position reachable\n   * @ko 현재 카메라가 도달 가능한 범위의 최소 혹은 최대점을 넘어섰는지를 나타냅니다\n   * @type {boolean}\n   * @readonly\n   */\n  public get atEdge() { return this._position <= this._range.min || this._position >= this._range.max; }\n  /**\n   * Return the size of the viewport\n   * @ko 뷰포트 크기를 반환합니다\n   * @type {number}\n   * @readonly\n   */\n  public get size() {\n    const flicking = this._flicking;\n    return flicking\n      ? flicking.horizontal\n        ? flicking.viewport.width\n        : flicking.viewport.height\n      : 0;\n  }\n\n  /**\n   * Return the camera's position progress from the first panel to last panel\n   * Range is from 0 to last panel's index\n   * @ko 첫번째 패널로부터 마지막 패널까지의 카메라 위치의 진행도를 반환합니다\n   * 범위는 0부터 마지막 패널의 인덱스까지입니다\n   * @type {number}\n   * @readonly\n   */\n  public get progress() {\n    const flicking = this._flicking;\n    const position = this._position + this._offset;\n    const nearestAnchor = this.findNearestAnchor(this._position);\n\n    if (!flicking || !nearestAnchor) {\n      return NaN;\n    }\n\n    const nearestPanel = nearestAnchor.panel;\n    const panelPos = nearestPanel.position + nearestPanel.offset;\n    const bounceSize = flicking.control.controller.bounce!;\n\n    const { min: prevRange, max: nextRange } = this.range;\n    const rangeDiff = this.rangeDiff;\n\n    if (position === panelPos) {\n      return nearestPanel.index;\n    }\n\n    if (position < panelPos) {\n      const prevPanel = nearestPanel.prev();\n      let prevPosition = prevPanel\n        ? prevPanel.position + prevPanel.offset\n        : prevRange - bounceSize[0];\n\n      // Looped\n      if (prevPosition > panelPos) {\n        prevPosition -= rangeDiff;\n      }\n\n      return nearestPanel.index - 1 + getProgress(position, prevPosition, panelPos);\n    } else {\n      const nextPanel = nearestPanel.next();\n      let nextPosition = nextPanel\n        ? nextPanel.position + nextPanel.offset\n        : nextRange + bounceSize[1];\n\n      // Looped\n      if (nextPosition < panelPos) {\n        nextPosition += rangeDiff;\n      }\n\n      return nearestPanel.index + getProgress(position, panelPos, nextPosition);\n    }\n  }\n\n  // Options Getter\n  /**\n   * A value indicating where the {@link Camera#alignPosition alignPosition} should be located at inside the viewport element\n   * @ko {@link Camera#alignPosition alignPosition}이 뷰포트 엘리먼트 내의 어디에 위치해야 하는지를 나타내는 값\n   * @type {ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Setter\n  public set align(val: FlickingOptions[\"align\"]) {\n    this._align = val;\n  }\n\n  /** */\n  public constructor({\n    align = ALIGN.CENTER\n  }: Partial<CameraOptions> = {}) {\n    this._flicking = null;\n    this._resetInternalValues();\n\n    // Options\n    this._align = align;\n  }\n\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @method\n   * @abstract\n   * @memberof Camera\n   * @instance\n   * @name updateRange\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public abstract updateRange(): this;\n\n  /**\n   * Initialize Camera\n   * @ko Camera를 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE VAL_MUST_NOT_NULL} If the camera element(`.flicking-camera`) does not exist inside viewport element\n   * <ko>{@link ERROR_CODE VAL_MUST_NOT_NULL} 뷰포트 엘리먼트 내부에 카메라 엘리먼트(`.flicking-camera`)가 존재하지 않을 경우</ko>\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n\n    const viewportEl = flicking.viewport.element;\n\n    checkExistence(viewportEl.firstElementChild, \"First element child of the viewport element\");\n    this._el = viewportEl.firstElementChild as HTMLElement;\n    this._checkTranslateSupport();\n\n    return this;\n  }\n\n  /**\n   * Destroy Camera and return to initial state\n   * @ko Camera를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): this {\n    this._flicking = null;\n    this._resetInternalValues();\n    return this;\n  }\n\n  /**\n   * Move to the given position and apply CSS transform\n   * @ko 해당 좌표로 이동하고, CSS transform을 적용합니다\n   * @param {number} pos A new position<ko>움직일 위치</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public async lookAt(pos: number): Promise<void> {\n    const prevPos = this._position;\n\n    this._position = pos;\n    await this._refreshVisiblePanels();\n    this._checkNeedPanel();\n    this._checkReachEnd(prevPos, pos);\n    this._applyTransform();\n  }\n\n  /**\n   * Return a previous {@link AnchorPoint} of given {@link AnchorPoint}\n   * If it does not exist, return `null` instead\n   * @ko 주어진 {@link AnchorPoint}의 이전 {@link AnchorPoint}를 반환합니다\n   * 존재하지 않을 경우 `null`을 반환합니다\n   * @param {AnchorPoint} anchor A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>\n   * @return {AnchorPoint | null} The previous {@link AnchorPoint}<ko>이전 {@link AnchorPoint}</ko>\n   */\n  public getPrevAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    return this._anchors[anchor.index - 1] || null;\n  }\n\n  /**\n   * Return a next {@link AnchorPoint} of given {@link AnchorPoint}\n   * If it does not exist, return `null` instead\n   * @ko 주어진 {@link AnchorPoint}의 다음 {@link AnchorPoint}를 반환합니다\n   * 존재하지 않을 경우 `null`을 반환합니다\n   * @param {AnchorPoint} anchor A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>\n   * @return {AnchorPoint | null} The next {@link AnchorPoint}<ko>다음 {@link AnchorPoint}</ko>\n   */\n  public getNextAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    return this._anchors[anchor.index + 1] || null;\n  }\n\n  /**\n   * Return the camera's position progress in the panel below\n   * Value is from 0 to 1 when the camera's inside panel\n   * Value can be lower than 0 or bigger than 1 when it's in the margin area\n   * @ko 현재 카메라 아래 패널에서의 위치 진행도를 반환합니다\n   * 반환값은 카메라가 패널 내부에 있을 경우 0부터 1까지의 값을 갖습니다\n   * 패널의 margin 영역에 있을 경우 0보다 작거나 1보다 큰 값을 반환할 수 있습니다\n   */\n  public getProgressInPanel(panel: Panel) {\n    const panelRange = panel.range;\n\n    return (this._position - panelRange.min) / (panelRange.max - panelRange.min);\n  }\n\n  /**\n   * Return {@link AnchorPoint} that includes given position\n   * If there's no {@link AnchorPoint} that includes the given position, return `null` instead\n   * @ko 주어진 좌표를 포함하는 {@link AnchorPoint}를 반환합니다\n   * 주어진 좌표를 포함하는 {@link AnchorPoint}가 없을 경우 `null`을 반환합니다\n   * @param {number} position A position to check<ko>확인할 좌표</ko>\n   * @return {AnchorPoint | null} The {@link AnchorPoint} that includes the given position<ko>해당 좌표를 포함하는 {@link AnchorPoint}</ko>\n   */\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    const anchors = this._anchors;\n    const anchorsIncludingPosition = anchors.filter(anchor => anchor.panel.includePosition(position, true));\n\n    return anchorsIncludingPosition.reduce((nearest: AnchorPoint | null, anchor) => {\n      if (!nearest) return anchor;\n\n      return Math.abs(nearest.position - position) < Math.abs(anchor.position - position)\n        ? nearest\n        : anchor;\n    }, null);\n  }\n\n  /**\n   * Return {@link AnchorPoint} nearest to given position\n   * If there're no {@link AnchorPoint}s, return `null` instead\n   * @ko 해당 좌표에서 가장 가까운 {@link AnchorPoint}를 반환합니다\n   * {@link AnchorPoint}가 하나도 없을 경우 `null`을 반환합니다\n   * @param {number} position A position to check<ko>확인할 좌표</ko>\n   * @return {AnchorPoint | null} The {@link AnchorPoint} nearest to the given position<ko>해당 좌표에 가장 인접한 {@link AnchorPoint}</ko>\n   */\n  public findNearestAnchor(position: number): AnchorPoint | null {\n    const anchors = this._anchors;\n\n    if (anchors.length <= 0) return null;\n\n    let prevDist = Infinity;\n    for (let anchorIdx = 0; anchorIdx < anchors.length; anchorIdx++) {\n      const anchor = anchors[anchorIdx];\n      const dist = Math.abs(anchor.position - position);\n\n      if (dist > prevDist) {\n        // Return previous anchor\n        return anchors[anchorIdx - 1];\n      }\n\n      prevDist = dist;\n    }\n\n    // Return last anchor\n    return anchors[anchors.length - 1];\n  }\n\n  /**\n   * Clamp the given position between camera's range\n   * @ko 주어진 좌표를 Camera가 도달 가능한 범위 사이의 값으로 만듭니다\n   * @param {number} position A position to clamp<ko>범위를 제한할 좌표</ko>\n   * @return {number} A clamped position<ko>범위 제한된 좌표</ko>\n   */\n  public clampToReachablePosition(position: number): number {\n    const range = this._range;\n    return clamp(position, range.min, range.max);\n  }\n\n  /**\n   * Check whether the given panel is inside of the Camera's range\n   * @ko 해당 {@link Panel}이 Camera가 도달 가능한 범위 내에 있는지를 반환합니다\n   * @param panel An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>\n   * @return {boolean} Whether the panel's inside Camera's range<ko>도달 가능한 범위 내에 해당 패널이 존재하는지 여부</ko>\n   */\n  public canReach(panel: Panel): boolean {\n    const range = this._range;\n\n    if (panel.removed) return false;\n\n    const panelPos = panel.position;\n\n    return panelPos >= range.min && panelPos <= range.max;\n  }\n\n  /**\n   * Check whether the given panel element is visible at the current position\n   * @ko 현재 좌표에서 해당 패널 엘리먼트를 볼 수 있는지 여부를 반환합니다\n   * @param panel An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>\n   * @return Whether the panel element is visible at the current position<ko>현재 위치에서 해당 패널 엘리먼트가 보이는지 여부</ko>\n   */\n  public canSee(panel: Panel): boolean {\n    const visibleRange = this.visibleRange;\n    // Should not include margin, as we don't declare what the margin is visible as what the panel is visible.\n    return panel.includeRange(visibleRange.min, visibleRange.max, false);\n  }\n\n  /**\n   * Update Camera's {@link Camera#alignPosition alignPosition}\n   * @ko Camera의 {@link Camera#alignPosition alignPosition}을 업데이트합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateAlignPos(): this {\n    const align = this._align;\n\n    const alignVal = typeof align === \"object\"\n      ? (align as { camera: string | number }).camera\n      : align;\n\n    this._alignPos = parseAlign(alignVal, this.size);\n\n    return this;\n  }\n\n  /**\n   * Update Camera's {@link Camera#anchorPoints anchorPoints}\n   * @ko Camera의 {@link Camera#anchorPoints anchorPoints}를 업데이트합니다\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {this}\n   */\n  public updateAnchors(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    this._anchors = panels.map((panel, index) => new AnchorPoint({\n      index,\n      position: panel.position,\n      panel\n    }));\n\n    return this;\n  }\n\n  /**\n   * Update Viewport's height to active panel's height\n   * @ko 현재 선택된 패널의 높이와 동일하도록 뷰포트의 높이를 업데이트합니다\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {this}\n   */\n  public updateAdaptiveHeight() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const activePanel = flicking.control.activePanel;\n\n    if (!flicking.horizontal || !flicking.adaptive || !activePanel) return;\n\n    flicking.viewport.setSize({\n      height: activePanel.height\n    });\n  }\n\n  public updateOffset() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const unRenderedPanels = flicking.panels.filter(panel => !panel.rendered);\n    const position = this._position;\n\n    this._offset = unRenderedPanels\n      .filter(panel => panel.position + panel.offset < position)\n      .reduce((offset, panel) => offset + panel.sizeIncludingMargin, 0);\n\n    this._applyTransform();\n  }\n\n  /**\n   * Reset the history of {@link Flicking#event:needPanel needPanel} events so it can be triggered again\n   * @ko 발생한 {@link Flicking#event:needPanel needPanel} 이벤트들을 초기화하여 다시 발생할 수 있도록 합니다\n   * @chainable\n   * @return {this}\n   */\n  public resetNeedPanelHistory(): this {\n    this._needPanelTriggered = { prev: false, next: false };\n    return this;\n  }\n\n  protected _resetInternalValues() {\n    this._position = 0;\n    this._alignPos = 0;\n    this._offset = 0;\n    this._range = { min: 0, max: 0 };\n    this._visiblePanels = [];\n    this._anchors = [];\n    this._needPanelTriggered = { prev: false, next: false };\n  }\n\n  protected async _refreshVisiblePanels() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    const newVisiblePanels = panels.filter(panel => this.canSee(panel));\n    const prevVisiblePanels = this._visiblePanels;\n    this._visiblePanels = newVisiblePanels;\n\n    const added: Panel[] = newVisiblePanels.filter(panel => !includes(prevVisiblePanels, panel));\n    const removed: Panel[] = prevVisiblePanels.filter(panel => !includes(newVisiblePanels, panel));\n\n    if (added.length > 0 || removed.length > 0) {\n      await flicking.renderer.render();\n\n      flicking.trigger(new ComponentEvent(EVENTS.VISIBLE_CHANGE, {\n        added,\n        removed,\n        visiblePanels: newVisiblePanels\n      }));\n    }\n  }\n\n  protected _checkNeedPanel(): void {\n    const needPanelTriggered = this._needPanelTriggered;\n\n    if (needPanelTriggered.prev && needPanelTriggered.next) return;\n\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    if (panels.length <= 0) {\n      if (!needPanelTriggered.prev) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.PREV }));\n        needPanelTriggered.prev = true;\n      }\n      if (!needPanelTriggered.next) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.NEXT }));\n        needPanelTriggered.next = true;\n      }\n\n      return;\n    }\n\n    const cameraPosition = this._position;\n    const cameraSize = this.size;\n    const cameraRange = this._range;\n    const needPanelThreshold = flicking.needPanelThreshold;\n\n    const cameraPrev = cameraPosition - this._alignPos;\n    const cameraNext = cameraPrev + cameraSize;\n\n    const firstPanel = panels[0];\n    const lastPanel = panels[panels.length - 1];\n\n    if (!needPanelTriggered.prev) {\n      const firstPanelPrev = firstPanel.range.min;\n\n      if (cameraPrev <= (firstPanelPrev + needPanelThreshold) || cameraPosition <= (cameraRange.min + needPanelThreshold)) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.PREV }));\n        needPanelTriggered.prev = true;\n      }\n    }\n\n    if (!needPanelTriggered.next) {\n      const lastPanelNext = lastPanel.range.max;\n\n      if (cameraNext >= (lastPanelNext - needPanelThreshold) || cameraPosition >= (cameraRange.max - needPanelThreshold)) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.NEXT }));\n        needPanelTriggered.next = true;\n      }\n    }\n  }\n\n  protected _checkReachEnd(prevPos: number, newPos: number): void {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const range = this._range;\n\n    const wasBetweenRange = prevPos > range.min && prevPos < range.max;\n    const isBetweenRange = newPos > range.min && newPos < range.max;\n\n    if (!wasBetweenRange || isBetweenRange) return;\n\n    const direction = newPos <= range.min ? DIRECTION.PREV : DIRECTION.NEXT;\n\n    flicking.trigger(new ComponentEvent(EVENTS.REACH_EDGE, {\n      direction\n    }));\n  }\n\n  protected _applyTransform(): void {\n    const el = this._el;\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n\n    const actualPosition = this._position - this._alignPos - this._offset;\n\n    el.style[this._transform] = flicking.horizontal\n      ? `translate(${-actualPosition}px)`\n      : `translate(0, ${-actualPosition}px)`;\n  }\n\n  protected _checkTranslateSupport = () => {\n    const transforms = [\"webkitTransform\", \"msTransform\", \"MozTransform\", \"OTransform\", \"transform\"];\n\n    const supportedStyle = document.documentElement.style;\n    let transformName = \"\";\n    for (const prefixedTransform of transforms) {\n      if (prefixedTransform in supportedStyle) {\n        transformName = prefixedTransform;\n      }\n    }\n\n    if (!transformName) {\n      throw new FlickingError(ERROR.MESSAGE.TRANSFORM_NOT_SUPPORTED, ERROR.CODE.TRANSFORM_NOT_SUPPORTED);\n    }\n\n    this._transform = transformName;\n  };\n}\n\nexport default Camera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getFlickingAttached } from \"../utils\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A {@link Camera} that can move from the position of the first panel to the position of the last panel\n * @ko 첫번째 패널의 좌표로부터 마지막 패널의 좌표로까지 이동할 수 있는 종류의 {@link Camera}\n */\nclass LinearCamera extends Camera {\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const renderer = flicking.renderer;\n\n    const firstPanel = renderer.getPanel(0);\n    const lastPanel = renderer.getPanel(renderer.panelCount - 1);\n\n    this._range = { min: firstPanel?.position ?? 0, max: lastPanel?.position ?? 0 };\n    return this;\n  }\n}\n\nexport default LinearCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport { DIRECTION } from \"../const/external\";\nimport { circulatePosition, getFlickingAttached } from \"../utils\";\nimport { ValueOf } from \"../type/internal\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A data of the position that changes order of the panel elements\n * @ko 패널 엘리먼트 순서가 변경되는 좌표의 데이터\n * @interface\n * @property {Panel} panel Toggling panel<ko>순서를 변경할 패널</ko>\n * @property {DIRECTION} direction Toggling position<ko>순서를 변경할 방향</ko>\n * @property {boolean} toggled Whether the panel has toggled its position to `direction`<ko>`direction` 방향으로 패널 위치를 변경했는지 여부를 나타내는 값</ko>\n */\nexport interface TogglePoint {\n  panel: Panel;\n  direction: ValueOf<typeof DIRECTION>;\n  toggled: boolean;\n}\n\n/**\n * A {@link Camera} that connects the last panel and the first panel, enabling continuous loop\n * @ko 첫번째 패널과 마지막 패널이 이어진 상태로, 무한히 회전할 수 있는 종류의 {@link Camera}\n */\nclass CircularCamera extends Camera {\n  private _circularOffset: number = 0;\n  private _circularEnabled: boolean = false;\n\n  public get offset() { return this._offset - this._circularOffset; }\n  public get controlParams() { return { range: this._range, position: this._position, circular: this._circularEnabled }; }\n\n  public getPrevAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    if (!this._circularEnabled || anchor.index !== 0) return super.getPrevAnchor(anchor);\n\n    const anchors = this._anchors;\n    const rangeDiff = this.rangeDiff;\n    const lastAnchor = anchors[anchors.length - 1];\n\n    return new AnchorPoint({\n      index: lastAnchor.index,\n      position: lastAnchor.position - rangeDiff,\n      panel: lastAnchor.panel\n    });\n  }\n\n  public getNextAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    const anchors = this._anchors;\n\n    if (!this._circularEnabled || anchor.index !== anchors.length - 1) return super.getNextAnchor(anchor);\n\n    const rangeDiff = this.rangeDiff;\n    const firstAnchor = anchors[0];\n\n    return new AnchorPoint({\n      index: firstAnchor.index,\n      position: firstAnchor.position + rangeDiff,\n      panel: firstAnchor.panel\n    });\n  }\n\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    if (!this._circularEnabled) return super.findAnchorIncludePosition(position);\n\n    const range = this._range;\n    const positionInRange = circulatePosition(position, range.min, range.max);\n    const anchorInRange = super.findAnchorIncludePosition(positionInRange);\n\n    if (!anchorInRange) return null;\n\n    const rangeDiff = this.rangeDiff;\n\n    if (position < range.min) {\n      const loopCount = -Math.floor((range.min - position) / rangeDiff) - 1;\n\n      return new AnchorPoint({\n        index: anchorInRange.index,\n        position: anchorInRange.position + rangeDiff * loopCount,\n        panel: anchorInRange.panel\n      });\n    } else if (position > range.max) {\n      const loopCount = Math.floor((position - range.max) / rangeDiff) + 1;\n\n      return new AnchorPoint({\n        index: anchorInRange.index,\n        position: anchorInRange.position + rangeDiff * loopCount,\n        panel: anchorInRange.panel\n      });\n    }\n\n    return anchorInRange;\n  }\n\n  public clampToReachablePosition(position: number): number {\n    // Basically all position is reachable for circular camera\n    return this._circularEnabled\n      ? position\n      : super.clampToReachablePosition(position);\n  }\n\n  public canReach(panel: Panel): boolean {\n    if (panel.removed) return false;\n\n    return this._circularEnabled\n      // Always reachable on circular mode\n      ? true\n      : super.canReach(panel);\n  }\n\n  public canSee(panel: Panel): boolean {\n    const range = this._range;\n    const rangeDiff = this.rangeDiff;\n    const visibleRange = this.visibleRange;\n    const visibleInCurrentRange = super.canSee(panel);\n\n    if (!this._circularEnabled) {\n      return visibleInCurrentRange;\n    }\n\n    // Check looped visible area for circular case\n    if (visibleRange.min < range.min) {\n      return visibleInCurrentRange || panel.includeRange(visibleRange.min + rangeDiff, visibleRange.max + rangeDiff, false);\n    } else if (visibleRange.max > range.max) {\n      return visibleInCurrentRange || panel.includeRange(visibleRange.min - rangeDiff, visibleRange.max - rangeDiff, false);\n    }\n\n    return visibleInCurrentRange;\n  }\n\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const renderer = flicking.renderer;\n\n    const panels = renderer.panels;\n    if (panels.length <= 0) {\n      this._resetInternalValues();\n      return this;\n    }\n\n    const firstPanel = panels[0]!;\n    const lastPanel = panels[panels.length - 1]!;\n    const firstPanelPrev = firstPanel.range.min - firstPanel.margin.prev;\n    const lastPanelNext = lastPanel.range.max + lastPanel.margin.next;\n\n    const visibleSize = this.size;\n    const panelSizeSum = lastPanelNext - firstPanelPrev;\n\n    const canSetCircularMode = panels\n      .every(panel => panelSizeSum - panel.size >= visibleSize);\n    this._circularEnabled = canSetCircularMode;\n\n    if (canSetCircularMode) {\n      this._range = { min: firstPanelPrev, max: lastPanelNext };\n\n      panels.forEach(panel => panel.updateCircularToggleDirection());\n    } else {\n      this._range = { min: firstPanel.position, max: lastPanel.position };\n    }\n\n    this._updateCircularOffset();\n\n    return this;\n  }\n\n  public async lookAt(pos: number) {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const prevPos = this._position;\n\n    if (pos === prevPos) return await super.lookAt(pos);\n\n    const panels = flicking.renderer.panels;\n    const toggled = panels.map(panel => panel.toggle(prevPos, pos));\n\n    this._position = pos;\n\n    if (toggled.some(isToggled => isToggled)) {\n      this._updateCircularOffset();\n      await flicking.renderer.render();\n    }\n\n    return await super.lookAt(pos);\n  }\n\n  protected _applyTransform(): void {\n    const el = this._el;\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n\n    const actualPosition = this._position - this._alignPos - this._offset + this._circularOffset;\n\n    el.style[this._transform] = flicking.horizontal\n      ? `translate(${-actualPosition}px)`\n      : `translate(0, ${-actualPosition}px)`;\n  }\n\n  protected _resetInternalValues() {\n    super._resetInternalValues();\n    this._circularOffset = 0;\n    this._circularEnabled = false;\n  }\n\n  private _calcPanelAreaSum(panels: Panel[]) {\n    return panels.reduce((sum: number, panel: Panel) => sum + panel.sizeIncludingMargin, 0);\n  }\n\n  private _updateCircularOffset() {\n    if (!this._circularEnabled) {\n      this._circularOffset = 0;\n      return;\n    }\n\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const toggledPrev: Panel[] = [];\n    const toggledNext: Panel[] = [];\n\n    flicking.panels\n      .filter(panel => panel.toggled)\n      .forEach(panel => {\n        if (panel.toggleDirection === DIRECTION.PREV) {\n          toggledPrev.push(panel);\n        } else {\n          toggledNext.push(panel);\n        }\n      });\n\n    this._circularOffset = this._calcPanelAreaSum(toggledPrev) - this._calcPanelAreaSum(toggledNext);\n  }\n}\n\nexport default CircularCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport { getFlickingAttached } from \"../utils\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A {@link Camera} that set range not to go out of the first/last panel, so it won't show empty spaces before/after the first/last panel\n * @ko 첫번째와 마지막 패널 밖으로 넘어가지 못하도록 범위를 설정하여, 첫번째/마지막 패널 전/후의 빈 공간을 보이지 않도록 하는 종류의 {@link Camera}\n */\nclass BoundCamera extends Camera {\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const renderer = flicking.renderer;\n    const alignPos = this._alignPos;\n\n    const firstPanel = renderer.getPanel(0);\n    const lastPanel = renderer.getPanel(renderer.panelCount - 1);\n\n    if (!firstPanel || !lastPanel) {\n      this._range = { min: 0, max: 0 };\n      return this;\n    }\n\n    const viewportSize = this.size;\n    const firstPanelPrev = firstPanel.range.min;\n    const lastPanelNext = lastPanel.range.max;\n    const panelAreaSize = lastPanelNext - firstPanelPrev;\n    const canSetBoundMode = viewportSize < panelAreaSize;\n\n    if (canSetBoundMode) {\n      this._range = { min: firstPanelPrev + alignPos, max: lastPanelNext - viewportSize + alignPos };\n    } else {\n      this._range = { min: firstPanel.position, max: lastPanel.position };\n    }\n\n    return this;\n  }\n\n  public updateAnchors(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    if (panels.length <= 0) {\n      this._anchors = [];\n      return this;\n    }\n\n    const range = this._range;\n    const reachablePanels = panels.filter(panel => this.canReach(panel));\n\n    if (reachablePanels.length > 0) {\n      const shouldPrependBoundAnchor = reachablePanels[0].position !== range.min;\n      const shouldAppendBoundAnchor = reachablePanels[reachablePanels.length - 1].position !== range.max;\n      const indexOffset = shouldPrependBoundAnchor ? 1 : 0;\n\n      const newAnchors = reachablePanels.map((panel, idx) => new AnchorPoint({\n        index: idx + indexOffset,\n        position: panel.position,\n        panel\n      }));\n\n      if (shouldPrependBoundAnchor) {\n        newAnchors.splice(0, 0, new AnchorPoint({\n          index: 0,\n          position: range.min,\n          panel: panels[reachablePanels[0].index - 1]\n        }));\n      }\n\n      if (shouldAppendBoundAnchor) {\n        newAnchors.push(new AnchorPoint({\n          index: newAnchors.length,\n          position: range.max,\n          panel: panels[reachablePanels[reachablePanels.length - 1].index + 1]\n        }));\n      }\n\n      this._anchors = newAnchors;\n    } else if (range.min !== range.max) {\n      // There're more than 2 panels\n      const nearestPanelAtMin = this._findNearestPanel(range.min, panels);\n      const panelAtMin = nearestPanelAtMin.index === panels.length - 1\n        ? nearestPanelAtMin.prev()!\n        : nearestPanelAtMin;\n      const panelAtMax = panelAtMin.next()!;\n\n      this._anchors = [\n        new AnchorPoint({\n          index: 0,\n          position: range.min,\n          panel: panelAtMin\n        }),\n        new AnchorPoint({\n          index: 1,\n          position: range.max,\n          panel: panelAtMax\n        })\n      ];\n    } else {\n      this._anchors = [new AnchorPoint({\n        index: 0,\n        position: range.min,\n        panel: this._findNearestPanel(range.min, panels)\n      })];\n    }\n\n    return this;\n  }\n\n  private _findNearestPanel(pos: number, panels: Panel[]): Panel {\n    let prevDist = Infinity;\n    for (let panelIdx = 0; panelIdx < panels.length; panelIdx++) {\n      const panel = panels[panelIdx];\n      const dist = Math.abs(panel.position - pos);\n\n      if (dist > prevDist) {\n        // Return previous anchor\n        return panels[panelIdx - 1];\n      }\n\n      prevDist = dist;\n    }\n\n    // Return last anchor\n    return panels[panels.length - 1];\n  }\n}\n\nexport default BoundCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Camera, { CameraOptions } from \"./Camera\";\nimport LinearCamera from \"./LinearCamera\";\nimport CircularCamera from \"./CircularCamera\";\nimport BoundCamera from \"./BoundCamera\";\n\nexport {\n  Camera,\n  LinearCamera,\n  CircularCamera,\n  BoundCamera\n};\n\nexport type {\n  CameraOptions\n};\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\n\nimport RenderingStrategy from \"./RenderingStrategy\";\n\nclass RawRenderingStrategy implements RenderingStrategy {\n  public updateRenderingPanels(flicking: Flicking) {\n    // RawRenderingStrategy always renders all panel elements\n    flicking.panels.forEach(panel => panel.markForShow());\n  }\n}\n\nexport default RawRenderingStrategy;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking, { FlickingOptions } from \"../Flicking\";\nimport Panel, { PanelOptions } from \"../core/panel/Panel\";\nimport { ALIGN, EVENTS } from \"../const/external\";\nimport { getFlickingAttached, getMinusCompensatedIndex, includes } from \"../utils\";\n\nimport RenderingStrategy from \"./RenderingStrategy/RenderingStrategy\";\nimport RawRenderingStrategy from \"./RenderingStrategy/RawRenderingStrategy\";\n\nexport interface RendererOptions {\n  align: FlickingOptions[\"align\"];\n  strategy: RenderingStrategy;\n}\n\n/**\n * A component that manages {@link Panel} and its elements\n * @ko {@link Panel}과 그 엘리먼트들을 관리하는 컴포넌트\n */\nabstract class Renderer {\n  // Internal States\n  protected _flicking: Flicking | null;\n  protected _panels: Panel[];\n  protected _renderingStrategy: RenderingStrategy;\n\n  // Options\n  protected _align: RendererOptions[\"align\"];\n\n  // Internal states Getter\n  /**\n   * Array of panels\n   * @ko 전체 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get panels() { return this._panels; }\n  /**\n   * Count of panels\n   * @ko 전체 패널의 개수\n   * @type {number}\n   * @readonly\n   */\n  public get panelCount() { return this._panels.length; }\n\n  // Options Getter\n  /**\n   * A {@link Panel}'s {@link Panel#align align} value that applied to all panels\n   * @ko {@link Panel}에 공통적으로 적용할 {@link Panel#align align} 값\n   * @type {Constants.ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Setter\n  public set align(val: RendererOptions[\"align\"]) {\n    this._align = val;\n\n    const panelAlign = this._getPanelAlign();\n    this._panels.forEach(panel => { panel.align = panelAlign; });\n  }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An {@link Flicking#align align} value that will be applied to all panels<ko>전체 패널에 적용될 {@link Flicking#align align} 값</ko>\n   */\n  public constructor({\n    align = ALIGN.CENTER,\n    strategy = new RawRenderingStrategy()\n  }: Partial<RendererOptions> = {}) {\n    this._align = align;\n    this._flicking = null;\n    this._renderingStrategy = strategy;\n    this._panels = [];\n  }\n\n  /**\n   * Render panel elements inside the camera element\n   * @ko 패널 엘리먼트들을 카메라 엘리먼트 내부에 렌더링합니다\n   * @method\n   * @abstract\n   * @memberof Renderer\n   * @instance\n   * @name render\n   * @chainable\n   * @return {this}\n   */\n  public abstract render(): Promise<void>;\n  public abstract forceRenderAllPanels(): Promise<void>;\n\n  protected abstract _collectPanels(): void;\n  protected abstract _createPanel(el: any, options: PanelOptions): Panel;\n  protected abstract _insertPanelElements(panels: Panel[], nextSibling: Panel | null): void;\n  protected abstract _removePanelElements(panels: Panel[]): void;\n\n  /**\n   * Initialize Renderer\n   * @ko Renderer를 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n    this._collectPanels();\n\n    return this;\n  }\n\n  /**\n   * Destroy Renderer and return to initial state\n   * @ko Renderer를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this._flicking = null;\n    this._panels = [];\n  }\n\n  /**\n   * Return the {@link Panel} at the given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.\n   * @return {Panel | null} Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>\n   * @see Panel\n   */\n  public getPanel(index: number): Panel | null {\n    return this._panels[index] || null;\n  }\n\n  /**\n   * Update all panel sizes\n   * @ko 모든 패널의 크기를 업데이트합니다\n   * @chainable\n   * @return {this}\n   */\n  public updatePanelSize(): this {\n    this._panels.forEach(panel => panel.resize());\n    return this;\n  }\n\n  /**\n   * Insert new panels at given index\n   * This will increase index of panels after by the number of panels added\n   * @ko 주어진 인덱스에 새로운 패널들을 추가합니다\n   * 해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.\n   * @param {number} index Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>\n   * @param {any[]} elements An array of element or framework component with element in it<ko>엘리먼트의 배열 혹은 프레임워크에서 엘리먼트를 포함한 컴포넌트들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   */\n  public batchInsert(...items: Array<{\n    index: number;\n    elements: any[];\n  }>): Panel[] {\n    const panels = this._panels;\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    const { control } = flicking;\n    const align = this._getPanelAlign();\n\n    const allPanelsInserted = items.reduce((addedPanels, item) => {\n      const insertingIdx = getMinusCompensatedIndex(item.index, panels.length);\n      const panelsPushed = panels.slice(insertingIdx);\n      const panelsInserted = item.elements.map(el => this._createPanel(el, { index: insertingIdx, align, flicking }));\n\n      panels.splice(insertingIdx, 0, ...panelsInserted);\n\n      // Resize the newly added panels\n      panelsInserted.forEach(panel => panel.resize());\n\n      const insertedSize = this._getPanelSizeSum(panelsInserted);\n\n      // Update panel indexes & positions\n      panelsPushed.forEach(panel => {\n        panel.increaseIndex(panelsInserted.length);\n        panel.increasePosition(insertedSize);\n      });\n\n      // Insert the actual elements as camera element's children\n      this._insertPanelElements(panelsInserted, panelsPushed[0] ?? null);\n\n      return [...addedPanels, ...panelsInserted];\n    }, []);\n\n    if (allPanelsInserted.length <= 0) return [];\n\n    // Update camera & control\n    this._updateCameraAndControl();\n\n    void this.render();\n\n    // Move to the first panel added if no panels existed\n    // FIXME: fix for animating case\n    if (allPanelsInserted.length > 0 && !control.animating) {\n      void control.moveToPanel(control.activePanel || allPanelsInserted[0], {\n        duration: 0\n      }).catch(() => void 0);\n    }\n\n    flicking.camera.updateOffset();\n\n    flicking.trigger(new ComponentEvent(EVENTS.PANEL_CHANGE, {\n      added: allPanelsInserted,\n      removed: []\n    }));\n\n    return allPanelsInserted;\n  }\n\n  /**\n   * Remove the panel at the given index\n   * This will decrease index of panels after by the number of panels removed\n   * @ko 주어진 인덱스의 패널을 제거합니다\n   * 해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다\n   * @param {number} index Index of panel to remove<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>\n   * @return An array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public batchRemove(...items: Array<{ index: number; deleteCount: number }>): Panel[] {\n    const panels = this._panels;\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    const { camera, control } = flicking;\n    const activePanel = control.activePanel;\n    const activeIndex = control.activeIndex;\n\n    const allPanelsRemoved = items.reduce((removed, item) => {\n      const { index, deleteCount } = item;\n      const removingIdx = getMinusCompensatedIndex(index, panels.length);\n\n      const panelsPulled = panels.slice(removingIdx + deleteCount);\n      const panelsRemoved = panels.splice(removingIdx, deleteCount);\n\n      if (panelsRemoved.length <= 0) return [];\n\n      // Update panel indexes & positions\n      const removedSize = this._getPanelSizeSum(panelsRemoved);\n      panelsPulled.forEach(panel => {\n        panel.decreaseIndex(panelsRemoved.length);\n        panel.decreasePosition(removedSize);\n      });\n\n      this._removePanelElements(panelsRemoved);\n\n      // Remove panel elements\n      panelsRemoved.forEach(panel => panel.destroy());\n\n      // Update camera & control\n      this._updateCameraAndControl();\n\n      if (includes(panelsRemoved, activePanel)) {\n        control.resetActive();\n      }\n\n      return [...removed, ...panelsRemoved];\n    }, []);\n\n    void this.render();\n\n    // FIXME: fix for animating case\n    if (allPanelsRemoved.length > 0 && !control.animating) {\n      const targetPanel = includes(allPanelsRemoved, activePanel)\n        ? (panels[activeIndex] || panels[panels.length - 1])\n        : activePanel;\n\n      if (targetPanel) {\n        void control.moveToPanel(targetPanel, {\n          duration: 0\n        }).catch(() => void 0);\n      } else {\n        // All panels removed\n        void camera.lookAt(0);\n      }\n    }\n\n    flicking.camera.updateOffset();\n\n    flicking.trigger(new ComponentEvent(EVENTS.PANEL_CHANGE, {\n      added: [],\n      removed: allPanelsRemoved\n    }));\n\n    return allPanelsRemoved;\n  }\n\n  protected _getPanelAlign() {\n    const align = this._align;\n\n    return typeof align === \"object\"\n      ? (align as { panel: string | number }).panel\n      : align;\n  }\n\n  protected _getPanelSizeSum(panels: Panel[]): number {\n    const firstPanel = panels[0];\n    const lastPanel = panels[panels.length - 1];\n\n    const marginDiff = lastPanel.margin.next - firstPanel.margin.prev;\n\n    return (lastPanel.range.max - firstPanel.range.min) + marginDiff;\n  }\n\n  protected _updateCameraAndControl() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const { camera, control } = flicking;\n\n    camera.updateRange();\n    camera.updateAnchors();\n    camera.resetNeedPanelHistory();\n    control.updateInput();\n  }\n}\n\nexport default Renderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\nimport { getProgress, getStyle, parseAlign } from \"../../utils\";\nimport { ALIGN, DIRECTION } from \"../../const/external\";\nimport { LiteralUnion, ValueOf } from \"../../type/internal\";\n\nexport interface PanelOptions {\n  index: number;\n  align: LiteralUnion<ValueOf<typeof ALIGN>> | number;\n  flicking: Flicking;\n}\n\nabstract class Panel {\n  // Internal States\n  protected _flicking: Flicking;\n  protected _index: number;\n  protected _pos: number;\n  protected _size: number;\n  protected _height: number;\n  protected _margin: { prev: number; next: number };\n  protected _alignPos: number; // Actual align pos\n  protected _removed: boolean;\n  protected _toggleDirection: ValueOf<typeof DIRECTION>;\n  protected _toggled: boolean;\n  protected _togglePosition: number;\n\n  // Options\n  protected _align: PanelOptions[\"align\"];\n\n  // Internal States Getter\n  /**\n   * `HTMLElement` that panel's referencing\n   * @ko 패널이 참조하고 있는 `HTMLElement`\n   * @type {HTMLElement}\n   * @readonly\n   */\n  abstract get element(): HTMLElement;\n  /**\n   * Index of the panel\n   * @ko 패널의 인덱스\n   * @type {number}\n   * @readonly\n   */\n  public get index() { return this._index; }\n  /**\n   * Position of the panel, including {@link Panel#alignPosition alignPosition}\n   * @ko 패널의 현재 좌표, {@link Panel#alignPosition alignPosition}을 포함하고 있습니다\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._pos + this._alignPos; }\n  /**\n   * Cached size of the panel element\n   * This is equal to {@link Panel#element element}'s `offsetWidth` if {@link Flicking#horizontal horizontal} is `true`, and `offsetHeight` else\n   * @ko 패널 엘리먼트의 캐시된 크기\n   * 이 값은 {@link Flicking#horizontal horizontal}이 `true`일 경우 {@link Panel#element element}의 `offsetWidth`와 동일하고, `false`일 경우 `offsetHeight`와 동일합니다\n   * @type {number}\n   * @readonly\n   */\n  public get size() { return this._size; }\n  /**\n   * Panel's size including CSS `margin`\n   * This value includes {@link Panel#element element}'s margin left/right if {@link Flicking#horizontal horizontal} is `true`, and margin top/bottom else\n   * @ko CSS `margin`을 포함한 패널의 크기\n   * 이 값은 {@link Flicking#horizontal horizontal}이 `true`일 경우 margin left/right을 포함하고, `false`일 경우 margin top/bottom을 포함합니다\n   * @type {number}\n   * @readonly\n   */\n  public get sizeIncludingMargin() { return this._size + this._margin.prev + this._margin.next; }\n  /**\n   * Height of the panel element\n   * @ko 패널 엘리먼트의 높이\n   * @type {number}\n   * @readonly\n   */\n  public get height() { return this._height; }\n  /**\n   * Cached CSS `margin` value of the panel element\n   * @ko 패널 엘리먼트의 CSS `margin` 값\n   * @type {object}\n   * @property {number} prev CSS `margin-left` when the {@link Flicking#horizontal horizontal} is `true`, and `margin-top` else\n   * <ko>{@link Flicking#horizontal horizontal}이 `true`일 경우 `margin-left`, `false`일 경우 `margin-top`에 해당하는 값</ko>\n   * @property {number} next CSS `margin-right` when the {@link Flicking#horizontal horizontal} is `true`, and `margin-bottom` else\n   * <ko>{@link Flicking#horizontal horizontal}이 `true`일 경우 `margin-right`, `false`일 경우 `margin-bottom`에 해당하는 값</ko>\n   * @readonly\n   */\n  public get margin() { return this._margin; }\n  /**\n   * Align position inside the panel where {@link Camera}'s {@link Camera#alignPosition alignPosition} inside viewport should be located at\n   * @ko 패널의 정렬 기준 위치. {@link Camera}의 뷰포트 내에서의 {@link Camera#alignPosition alignPosition}이 위치해야 하는 곳입니다\n   * @type {number}\n   * @readonly\n   */\n  public get alignPosition() { return this._alignPos; }\n  /**\n   * A value indicating whether the panel's {@link Flicking#remove remove}d\n   * @ko 패널이 {@link Flicking#remove remove}되었는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get removed() { return this._removed; }\n  /**\n   * A value indicating whether the panel's element is being rendered on the screen\n   * @ko 패널의 엘리먼트가 화면상에 렌더링되고있는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract get rendered();\n  /**\n   * Panel element's range of the bounding box\n   * @ko 패널 엘리먼트의 Bounding box 범위\n   * @type {object}\n   * @property {number} [min] Bounding box's left({@link Flicking#horizontal horizontal}: true) / top({@link Flicking#horizontal horizontal}: false)\n   * @property {number} [max] Bounding box's right({@link Flicking#horizontal horizontal}: true) / bottom({@link Flicking#horizontal horizontal}: false)\n   * @readonly\n   */\n  public get range() { return { min: this._pos, max: this._pos + this._size }; }\n  /**\n   * A value indicating whether the panel's position is toggled by circular behavior\n   * @ko 패널의 위치가 circular 동작에 의해 토글되었는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get toggled() { return this._toggled; }\n  /**\n   * A direction where the panel's position is toggled\n   * @ko 패널의 위치가 circular 동작에 의해 토글되는 방향\n   * @type {DIRECTION}\n   * @readonly\n   */\n  public get toggleDirection() { return this._toggleDirection; }\n  /**\n   * Actual position offset determined by {@link Panel#order}\n   * @ko {@link Panel#order}에 의한 실제 위치 변경값\n   * @type {number}\n   * @readonly\n   */\n  public get offset() {\n    const toggleDirection = this._toggleDirection;\n    const cameraRangeDiff = this._flicking.camera.rangeDiff;\n\n    return toggleDirection === DIRECTION.NONE || !this._toggled\n      ? 0\n      : toggleDirection === DIRECTION.PREV\n        ? -cameraRangeDiff\n        : cameraRangeDiff;\n  }\n\n  /**\n   * Progress of movement between previous or next panel relative to current panel\n   * @ko 이 패널로부터 이전/다음 패널으로의 이동 진행률\n   * @type {number}\n   * @readonly\n   */\n  public get progress() {\n    const flicking = this._flicking;\n\n    return this.index - flicking.camera.progress;\n  }\n\n  /**\n   * Progress of movement between points that panel is completely invisible outside of viewport(prev direction: -1, selected point: 0, next direction: 1)\n   * @ko 현재 패널이 뷰포트 영역 밖으로 완전히 사라지는 지점을 기준으로 하는 진행도(prev방향: -1, 선택 지점: 0, next방향: 1)\n   * @type {number}\n   * @readonly\n   */\n  public get outsetProgress() {\n    const position = this.position + this.offset;\n    const alignPosition = this._alignPos;\n    const camera = this._flicking.camera;\n    const camPos = camera.position;\n\n    if (camPos === position) {\n      return 0;\n    }\n\n    if (camPos < position) {\n      const disappearPosNext = position + (camera.size - camera.alignPosition) + alignPosition;\n\n      return -getProgress(camPos, position, disappearPosNext);\n    } else {\n      const disappearPosPrev = position - (camera.alignPosition + this._size - alignPosition);\n\n      return 1 - getProgress(camPos, disappearPosPrev, position);\n    }\n  }\n\n  /**\n   * Percentage of area where panel is visible in the viewport\n   * @ko 뷰포트 안에서 패널이 보이는 영역의 비율\n   * @type {number}\n   * @readonly\n   */\n  public get visibleRatio() {\n    const range = this.range;\n    const size = this._size;\n    const offset = this.offset;\n    const visibleRange = this._flicking.camera.visibleRange;\n\n    const checkingRange = {\n      min: range.min + offset,\n      max: range.max + offset\n    };\n\n    if (checkingRange.max <= visibleRange.min || checkingRange.min >= visibleRange.max) {\n      return 0;\n    }\n\n    let visibleSize = size;\n\n    if (visibleRange.min > checkingRange.min) {\n      visibleSize -= visibleRange.min - checkingRange.min;\n    }\n    if (visibleRange.max < checkingRange.max) {\n      visibleSize -= checkingRange.max - visibleRange.max;\n    }\n\n    return visibleSize / size;\n  }\n\n  // Options Getter\n  /**\n   * A value indicating where the {@link Panel#alignPosition alignPosition} should be located at inside the panel element\n   * @ko {@link Panel#alignPosition alignPosition}이 패널 내의 어디에 위치해야 하는지를 나타내는 값\n   * @type {Constants.ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Getter\n  public set align(val: PanelOptions[\"align\"]) { this._align = val; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor({\n    index,\n    align,\n    flicking\n  }: PanelOptions) {\n    this._index = index;\n    this._flicking = flicking;\n\n    this._align = align;\n\n    this._removed = false;\n    this._resetInternalStates();\n  }\n\n  /**\n   * Mark panel element to be appended on the camera element\n   * @internal\n   */\n  public abstract markForShow();\n\n  /**\n   * Mark panel element to be removed from the camera element\n   * @internal\n   */\n  public abstract markForHide();\n\n  /**\n   * Update size of the panel\n   * @ko 패널의 크기를 갱신합니다\n   * @chainable\n   * @return {this}\n   */\n  public resize(): this {\n    const el = this.element;\n    const elStyle = getStyle(el);\n    const flicking = this._flicking;\n    const horizontal = flicking.horizontal;\n    const prevPanel = flicking.renderer.panels[this._index - 1];\n\n    this._size = horizontal ? el.offsetWidth : el.offsetHeight;\n\n    this._margin = horizontal\n      ? {\n        prev: parseFloat(elStyle.marginLeft || \"0\"),\n        next: parseFloat(elStyle.marginRight || \"0\")\n      } : {\n        prev: parseFloat(elStyle.marginTop || \"0\"),\n        next: parseFloat(elStyle.marginBottom || \"0\")\n      };\n\n    this._pos = prevPanel\n      ? prevPanel.range.max + prevPanel.margin.next + this._margin.prev\n      : this._margin.prev;\n\n    this._height = horizontal ? el.offsetHeight : this._size;\n\n    this._updateAlignPos();\n\n    return this;\n  }\n\n  /**\n   * Check whether the given element is inside of this panel's {@link Panel#element element}\n   * @ko 해당 엘리먼트가 이 패널의 {@link Panel#element element} 내에 포함되어 있는지를 반환합니다\n   * @param {HTMLElement} element The HTMLElement to check<ko>확인하고자 하는 HTMLElement</ko>\n   * @return {boolean} A Boolean value indicating the element is inside of this panel {@link Panel#element element}<ko>패널의 {@link Panel#element element}내에 해당 엘리먼트 포함 여부</ko>\n   */\n  public contains(element: HTMLElement): boolean {\n    return this.element.contains(element);\n  }\n\n  /**\n   * Reset internal state and set {@link Panel#removed removed} to `true`\n   * @ko 내부 상태를 초기화하고 {@link Panel#removed removed}를 `true`로 설정합니다.\n   * @return {void}\n   */\n  public destroy(): void {\n    this._resetInternalStates();\n    this._removed = true;\n  }\n\n  /**\n   * Check whether the given position is inside of this panel's {@link Panel#range range}\n   * @ko 주어진 좌표가 현재 패널의 {@link Panel#range range}내에 속해있는지를 반환합니다.\n   * @param {number} pos A position to check<ko>확인하고자 하는 좌표</ko>\n   * @param {boolean} [includeMargin=false] Include {@link Panel#margin margin} to the range<ko>패널 영역에 {@link Panel#margin margin}값을 포함시킵니다</ko>\n   * @return {boolean} A Boolean value indicating whether the given position is included in the panel range<ko>해당 좌표가 패널 영역 내에 속해있는지 여부</ko>\n   */\n  public includePosition(pos: number, includeMargin: boolean = false): boolean {\n    return this.includeRange(pos, pos, includeMargin);\n  }\n\n  /**\n   * Check whether the given range is fully included in this panel's area\n   * @ko 주어진 범위가 이 패널 내부에 완전히 포함되는지를 반환합니다\n   * @param {number} min Minimum value of the range to check<ko>확인하고자 하는 최소 범위</ko>\n   * @param {number} max Maximum value of the range to check<ko>확인하고자 하는 최대 범위</ko>\n   * @param {boolean} [includeMargin=false] Include {@link Panel#margin margin} to the range<ko>패널 영역에 {@link Panel#margin margin}값을 포함시킵니다</ko>\n   * @returns {boolean} A Boolean value indicating whether the given range is fully included in the panel range<ko>해당 범위가 패널 영역 내에 완전히 속해있는지 여부</ko>\n   */\n  public includeRange(min: number, max: number, includeMargin: boolean = false): boolean {\n    const margin = this._margin;\n    const panelRange = this.range;\n\n    if (includeMargin) {\n      panelRange.min -= margin.prev;\n      panelRange.max += margin.next;\n    }\n\n    return max >= panelRange.min && min <= panelRange.max;\n  }\n\n  /**\n   * Move {@link Camera} to this panel\n   * @ko {@link Camera}를 이 패널로 이동합니다\n   * @param {number} [duration] Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @returns {Promise<void>} A Promise which will be resolved after reaching the panel<ko>패널 도달시에 resolve되는 Promise</ko>\n   */\n  public focus(duration?: number) {\n    return this._flicking.moveTo(this._index, duration);\n  }\n\n  /**\n   * Get previous(`index - 1`) panel. When the previous panel does not exist, this will return `null` instead\n   * If the {@link Flicking#circularEnabled circular} is enabled, this will return the last panel if called from the first panel\n   * @ko 이전(`index - 1`) 패널을 반환합니다. 이전 패널이 없을 경우 `null`을 반환합니다\n   * {@link Flicking#circularEnabled circular} 모드가 활성화되었을 때 첫번째 패널에서 이 메소드를 호출할 경우 마지막 패널을 반환합니다\n   * @returns {Panel | null} The previous panel<ko>이전 패널</ko>\n   */\n  public prev(): Panel | null {\n    const index = this._index;\n    const flicking = this._flicking;\n    const renderer = flicking.renderer;\n    const panelCount = renderer.panelCount;\n\n    if (panelCount === 1) return null;\n\n    return flicking.circularEnabled\n      ? renderer.getPanel(index === 0 ? panelCount - 1 : index - 1)\n      : renderer.getPanel(index - 1);\n  }\n\n  /**\n   * Get next(`index + 1`) panel. When the next panel does not exist, this will return `null` instead\n   * If the {@link Flicking#circularEnabled circular} is enabled, this will return the first panel if called from the last panel\n   * @ko 다음(`index + 1`) 패널을 반환합니다. 다음 패널이 없을 경우 `null`을 반환합니다\n   * {@link Flicking#circularEnabled circular} 모드가 활성화되었을 때 마지막 패널에서 이 메소드를 호출할 경우 첫번째 패널을 반환합니다\n   * @returns {Panel | null} The previous panel<ko>다음 패널</ko>\n   */\n  public next(): Panel | null {\n    const index = this._index;\n    const flicking = this._flicking;\n    const renderer = flicking.renderer;\n    const panelCount = renderer.panelCount;\n\n    if (panelCount === 1) return null;\n\n    return flicking.circularEnabled\n      ? renderer.getPanel(index === panelCount - 1 ? 0 : index + 1)\n      : renderer.getPanel(index + 1);\n  }\n\n  /**\n   * Increase panel's index by the given value\n   * @ko 패널의 인덱스를 주어진 값만큼 증가시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public increaseIndex(val: number): this {\n    this._index += Math.max(val, 0);\n    return this;\n  }\n\n  /**\n   * Decrease panel's index by the given value\n   * @ko 패널의 인덱스를 주어진 값만큼 감소시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public decreaseIndex(val: number): this {\n    this._index -= Math.max(val, 0);\n    return this;\n  }\n\n  /**\n   * Increase panel's position by the given value\n   * @ko 패널의 위치를 주어진 값만큼 증가시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public increasePosition(val: number): this {\n    this._moveBy(Math.max(val, 0));\n    return this;\n  }\n\n  /**\n   * Decrease panel's position by the given value\n   * @ko 패널의위치를 주어진 값만큼 감소시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public decreasePosition(val: number): this {\n    this._moveBy(-Math.max(val, 0));\n    return this;\n  }\n\n  /**\n   * @internal\n   * @return {boolean} toggled\n   */\n  public toggle(prevPos: number, newPos: number): boolean {\n    const toggleDirection = this._toggleDirection;\n    const togglePosition = this._togglePosition;\n\n    if (toggleDirection === DIRECTION.NONE || newPos === prevPos) return false;\n\n    const prevToggled = this._toggled;\n\n    if (newPos > prevPos) {\n      if (togglePosition >= prevPos && togglePosition <= newPos) {\n        this._toggled = toggleDirection === DIRECTION.NEXT;\n      }\n    } else {\n      if (togglePosition <= prevPos && togglePosition >= newPos) {\n        this._toggled = toggleDirection !== DIRECTION.NEXT;\n      }\n    }\n\n    return prevToggled !== this._toggled;\n  }\n\n  /**\n   * @internal\n   */\n  public updateCircularToggleDirection(): this {\n    const flicking = this._flicking;\n\n    if (!flicking.circularEnabled) {\n      this._toggleDirection = DIRECTION.NONE;\n      this._toggled = false;\n      return this;\n    }\n\n    const camera = flicking.camera;\n    const camRange = camera.range;\n    const camAlignPosition = camera.alignPosition;\n    const camVisibleRange = camera.visibleRange;\n    const camVisibleSize = camVisibleRange.max - camVisibleRange.min;\n\n    const minimumVisible = camRange.min - camAlignPosition;\n    const maximumVisible = camRange.max - camAlignPosition + camVisibleSize;\n\n    const shouldBeVisibleAtMin = this.includeRange(maximumVisible - camVisibleSize, maximumVisible, false);\n    const shouldBeVisibleAtMax = this.includeRange(minimumVisible, minimumVisible + camVisibleSize, false);\n\n    this._toggled = false;\n    if (shouldBeVisibleAtMin) {\n      this._toggleDirection = DIRECTION.PREV;\n      this._togglePosition = this.range.max + camRange.min - camRange.max + camAlignPosition;\n      this.toggle(Infinity, camera.position);\n    } else if (shouldBeVisibleAtMax) {\n      this._toggleDirection = DIRECTION.NEXT;\n      this._togglePosition = this.range.min + camRange.max - camVisibleSize + camAlignPosition;\n      this.toggle(-Infinity, camera.position);\n    } else {\n      this._toggleDirection = DIRECTION.NONE;\n      this._togglePosition = 0;\n    }\n\n    return this;\n  }\n\n  private _moveBy(val: number): this {\n    this._pos += val;\n\n    return this;\n  }\n\n  private _updateAlignPos() {\n    this._alignPos = parseAlign(this._align, this._size);\n  }\n\n  private _resetInternalStates() {\n    this._size = 0;\n    this._pos = 0;\n    this._margin = { prev: 0, next: 0 };\n    this._height = 0;\n    this._alignPos = 0;\n    this._toggled = false;\n    this._togglePosition = 0;\n    this._toggleDirection = DIRECTION.NONE;\n  }\n}\n\nexport default Panel;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel, { PanelOptions } from \"./Panel\";\n\nexport interface ElementPanelOptions extends PanelOptions {\n  el: HTMLElement;\n}\n\n/**\n * An slide data component that holds information of a single HTMLElement\n * @ko 슬라이드 데이터 컴포넌트로, 단일 HTMLElement의 정보를 갖고 있습니다\n */\nclass ElementPanel extends Panel {\n  private _el: HTMLElement;\n  private _rendered: boolean;\n\n  /**\n   * `HTMLElement` that panel's referencing\n   * @ko 패널이 참조하고 있는 `HTMLElement`\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n\n  public get rendered() { return this._rendered; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {HTMLElement} [options.el] A `HTMLElement` panel's referencing<ko>패널이 참조하는 `HTMLElement`</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor(options: ElementPanelOptions) {\n    super(options);\n\n    this._el = options.el;\n    this._rendered = true;\n  }\n\n  public markForShow() {\n    this._rendered = true;\n  }\n\n  public markForHide() {\n    this._rendered = false;\n  }\n}\n\nexport default ElementPanel;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getFlickingAttached, toArray } from \"../utils\";\nimport Panel, { PanelOptions } from \"../core/panel/Panel\";\nimport ElementPanel from \"../core/panel/ElementPanel\";\n\nimport Renderer from \"./Renderer\";\n\n/**\n *\n */\nclass VanillaRenderer extends Renderer {\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async render() {\n    const strategy = this._renderingStrategy;\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraEl = flicking.camera.element;\n    const wasRenderedPanels = this._panels.filter(panel => panel.element.parentElement === cameraEl);\n\n    strategy.updateRenderingPanels(flicking);\n    const renderingPanels = this._getRenderingPanelsByOrder();\n\n    this._removePanelElements(wasRenderedPanels.filter(panel => !panel.rendered));\n    this._insertPanelElements(renderingPanels.filter(panel => panel.element.parentElement !== cameraEl), null);\n    this._resetPanelElementOrder(renderingPanels);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async forceRenderAllPanels() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const camera = flicking.camera;\n    const cameraElement = camera.element;\n    const fragment = document.createDocumentFragment();\n\n    this._panels.forEach(panel => fragment.appendChild(panel.element));\n\n    this._removeAllChildsFromCamera();\n\n    cameraElement.appendChild(fragment);\n  }\n\n  protected _collectPanels() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    const cameraElement = flicking.camera.element;\n\n    // Remove all text nodes in the camera element\n    toArray(cameraElement.childNodes).forEach(node => {\n      if (node.nodeType === Node.TEXT_NODE) {\n        cameraElement.removeChild(node);\n      }\n    });\n\n    const align = this._getPanelAlign();\n    const cameraChilds = toArray(cameraElement.children);\n\n    this._panels = cameraChilds.map(\n      (el: HTMLElement, index: number) => new ElementPanel({ flicking, el, index, align })\n    );\n  }\n\n  protected _createPanel(el: HTMLElement, options: PanelOptions): ElementPanel {\n    return new ElementPanel({ el, ...options });\n  }\n\n  protected _insertPanelElements(panels: Panel[], nextSibling: Panel | null) {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const camera = flicking.camera;\n    const cameraElement = camera.element;\n    const nextSiblingElement = nextSibling?.element || null;\n    const fragment = document.createDocumentFragment();\n\n    panels.forEach(panel => fragment.appendChild(panel.element));\n    cameraElement.insertBefore(fragment, nextSiblingElement);\n\n    return this;\n  }\n\n  protected _removePanelElements(panels: Panel[]): this {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraElement = flicking.camera.element;\n\n    panels.forEach(panel => {\n      cameraElement.removeChild(panel.element);\n    });\n\n    return this;\n  }\n\n  private _resetPanelElementOrder(panels: Panel[]) {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraEl = flicking.camera.element;\n\n    // We're using reversed panels here as last panel should be the last element of camera element\n    const reversedPanels = [...panels].reverse();\n    reversedPanels.forEach((panel, idx) => {\n      const nextPanel = reversedPanels[idx - 1];\n      const nextPanelEl = nextPanel ? nextPanel.element : null;\n\n      if (panel.element.nextElementSibling !== nextPanelEl) {\n        cameraEl.insertBefore(panel.element, nextPanelEl);\n      }\n    });\n  }\n\n  private _removeAllChildsFromCamera() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraElement = flicking.camera.element;\n\n    // Remove other elements\n    while (cameraElement.firstChild) {\n      cameraElement.removeChild(cameraElement.firstChild);\n    }\n  }\n\n  private _getRenderingPanelsByOrder(): Panel[] {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const panels = flicking.renderer.panels;\n\n    return panels.filter(panel => panel.rendered)\n      .sort((a, b) => (a.position + a.offset) - (b.position + b.offset));\n  }\n}\n\nexport default VanillaRenderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\n\nimport Renderer from \"./Renderer\";\n\n/**\n *\n */\nabstract class ExternalRenderer extends Renderer {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _insertPanelElements(panels: Panel[], nextSibling: Panel | null): void {\n    // DO NOTHING\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _removePanelElements(panels: Panel[]): void {\n    // DO NOTHING\n  }\n}\n\nexport default ExternalRenderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\n\nimport RenderingStrategy from \"./RenderingStrategy\";\n\nclass VisibleRenderingStrategy implements RenderingStrategy {\n  public updateRenderingPanels(flicking: Flicking) {\n    const panels = flicking.renderer.panels;\n    const camera = flicking.camera;\n\n    const visibleIndexes = camera.visiblePanels.reduce((visibles, panel) => {\n      visibles[panel.index] = true;\n      return visibles;\n    }, {});\n\n    panels.forEach(panel => {\n      if (panel.index in visibleIndexes) {\n        panel.markForShow();\n      } else if (!flicking.holding) {\n        // During the input sequence,\n        // Do not remove panel elements as it won't trigger touchend event.\n        panel.markForHide();\n      }\n    });\n\n    camera.updateOffset();\n  }\n}\n\nexport default VisibleRenderingStrategy;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Renderer, { RendererOptions } from \"./Renderer\";\nimport VanillaRenderer from \"./VanillaRenderer\";\nimport ExternalRenderer from \"./ExternalRenderer\";\n\n\nexport {\n  Renderer,\n  VanillaRenderer,\n  ExternalRenderer\n};\n\nexport * from \"./RenderingStrategy\";\n\nexport type {\n  RendererOptions\n};\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nimport FlickingError from \"./core/FlickingError\";\nimport Viewport from \"./core/Viewport\";\nimport { Panel } from \"./core/panel\";\nimport { Control, FreeControl, SnapControl } from \"./control\";\nimport { BoundCamera, Camera, CircularCamera, LinearCamera } from \"./camera\";\nimport { Renderer, VanillaRenderer, ExternalRenderer, RawRenderingStrategy, VisibleRenderingStrategy } from \"./renderer\";\nimport { EVENTS, ALIGN, MOVE_TYPE, DIRECTION } from \"./const/external\";\nimport * as ERROR from \"./const/error\";\nimport { findIndex, getElement, includes, parseElement } from \"./utils\";\nimport { HoldStartEvent, HoldEndEvent, MoveStartEvent, SelectEvent, MoveEvent, MoveEndEvent, WillChangeEvent, WillRestoreEvent, NeedPanelEvent, VisibleChangeEvent, ReachEdgeEvent, ReadyEvent, AfterResizeEvent, BeforeResizeEvent, ChangedEvent, RestoredEvent, PanelChangeEvent } from \"./type/event\";\nimport { LiteralUnion, ValueOf } from \"./type/internal\";\nimport { ElementLike, Plugin, Status, MoveTypeOptions } from \"./type/external\";\n\n/**\n * @interface\n */\nexport interface FlickingEvents {\n  [EVENTS.READY]: ReadyEvent;\n  [EVENTS.BEFORE_RESIZE]: BeforeResizeEvent;\n  [EVENTS.AFTER_RESIZE]: AfterResizeEvent;\n  [EVENTS.HOLD_START]: HoldStartEvent;\n  [EVENTS.HOLD_END]: HoldEndEvent;\n  [EVENTS.MOVE_START]: MoveStartEvent;\n  [EVENTS.MOVE]: MoveEvent;\n  [EVENTS.MOVE_END]: MoveEndEvent;\n  [EVENTS.WILL_CHANGE]: WillChangeEvent;\n  [EVENTS.CHANGED]: ChangedEvent;\n  [EVENTS.WILL_RESTORE]: WillRestoreEvent;\n  [EVENTS.RESTORED]: RestoredEvent;\n  [EVENTS.SELECT]: SelectEvent;\n  [EVENTS.NEED_PANEL]: NeedPanelEvent;\n  [EVENTS.VISIBLE_CHANGE]: VisibleChangeEvent;\n  [EVENTS.REACH_EDGE]: ReachEdgeEvent;\n  [EVENTS.PANEL_CHANGE]: PanelChangeEvent;\n}\n\n/**\n * @interface\n */\nexport interface FlickingOptions {\n  // UI / LAYOUT\n  align: LiteralUnion<ValueOf<typeof ALIGN>> | number | { panel: number | string; camera: number | string };\n  defaultIndex: number;\n  horizontal: boolean;\n  circular: boolean;\n  bound: boolean;\n  adaptive: boolean;\n  // EVENT\n  needPanelThreshold: number;\n  // ANIMATION\n  deceleration: number;\n  duration: number;\n  easing: (x: number) => number;\n  // INPUT\n  inputType: string[];\n  moveType: ValueOf<typeof MOVE_TYPE> | MoveTypeOptions<ValueOf<typeof MOVE_TYPE>>;\n  threshold: number;\n  interruptable: boolean;\n  bounce: number | string | [number | string, number | string];\n  iOSEdgeSwipeThreshold: number;\n  preventClickOnDrag: boolean;\n  disableOnInit: boolean;\n  // PERFORMANCE\n  renderOnlyVisible: boolean;\n  // OTHERS\n  autoInit: boolean;\n  autoResize: boolean;\n  renderExternal: {\n    renderer: typeof ExternalRenderer;\n    rendererOptions: {[key: string]: any};\n  } | null;\n}\n\n/**\n * @extends Component\n * @support {\"ie\": \"9+(with polyfill)\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|@egjs/component}\n * @requires {@link https://github.com/naver/egjs-axes|@egjs/axes}\n */\nclass Flicking extends Component<FlickingEvents> {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @type {string}\n   * @readonly\n   * @example\n   * ```ts\n   * Flicking.VERSION;  // ex) 4.0.0\n   * ```\n   */\n  public static VERSION = \"#__VERSION__#\";\n\n  // Core components\n  private _viewport: Viewport;\n  private _camera: Camera;\n  private _control: Control;\n  private _renderer: Renderer;\n\n  // Options\n  private _align: FlickingOptions[\"align\"];\n  private _defaultIndex: FlickingOptions[\"defaultIndex\"];\n  private _horizontal: FlickingOptions[\"horizontal\"];\n  private _circular: FlickingOptions[\"circular\"];\n  private _bound: FlickingOptions[\"bound\"];\n  private _adaptive: FlickingOptions[\"adaptive\"];\n  private _needPanelThreshold: FlickingOptions[\"needPanelThreshold\"];\n  private _deceleration: FlickingOptions[\"deceleration\"];\n  private _duration: FlickingOptions[\"duration\"];\n  private _easing: FlickingOptions[\"easing\"];\n  private _inputType: FlickingOptions[\"inputType\"];\n  private _moveType: FlickingOptions[\"moveType\"];\n  private _threshold: FlickingOptions[\"threshold\"];\n  private _interruptable: FlickingOptions[\"interruptable\"];\n  private _bounce: FlickingOptions[\"bounce\"];\n  private _iOSEdgeSwipeThreshold: FlickingOptions[\"iOSEdgeSwipeThreshold\"];\n  private _preventClickOnDrag: FlickingOptions[\"preventClickOnDrag\"];\n  private _disableOnInit: FlickingOptions[\"disableOnInit\"];\n  private _renderOnlyVisible: FlickingOptions[\"renderOnlyVisible\"];\n  private _autoResize: FlickingOptions[\"autoResize\"];\n  private _autoInit: FlickingOptions[\"autoInit\"];\n  private _renderExternal: FlickingOptions[\"renderExternal\"];\n\n  // Internal State\n  private _initialized: boolean;\n  private _plugins: Plugin[];\n\n  // Components\n  /**\n   * {@link Control} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Control} 인스턴스\n   * @type {Control}\n   * @default SnapControl\n   * @readonly\n   * @see Control\n   * @see SnapControl\n   * @see FreeControl\n   */\n  public get control() { return this._control; }\n  /**\n   * {@link Camera} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Camera} 인스턴스\n   * @type {Camera}\n   * @default LinearCamera\n   * @readonly\n   * @see Camera\n   * @see LinearCamera\n   * @see BoundCamera\n   * @see CircularCamera\n   */\n  public get camera() { return this._camera; }\n  /**\n   * {@link Renderer} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Renderer} 인스턴스\n   * @type {Renderer}\n   * @default VanillaRenderer\n   * @readonly\n   * @see Renderer\n   * @see VanillaRenderer\n   * @see ExternalRenderer\n   */\n  public get renderer() { return this._renderer; }\n  /**\n   * A component that manages viewport size\n   * @ko 뷰포트 크기 정보를 담당하는 컴포넌트\n   * @type {Viewport}\n   * @readonly\n   * @see Viewport\n   */\n  public get viewport() { return this._viewport; }\n  // Internal States\n  /**\n   * Whether Flicking's {@link Flicking#init init()} is called.\n   * This is `true` when {@link Flicking#init init()} is called, and is `false` after calling {@link Flicking#destroy destroy()}.\n   * @ko Flicking의 {@link Flicking#init init()}이 호출되었는지를 나타내는 멤버 변수.\n   * 이 값은 {@link Flicking#init init()}이 호출되었으면 `true`로 변하고, {@link Flicking#destroy destroy()}호출 이후에 다시 `false`로 변경됩니다.\n   * @type {boolean}\n   * @default false\n   * @readonly\n   */\n  public get initialized() { return this._initialized; }\n  /**\n   * Whether the `circular` option is enabled.\n   * The {@link Flicking#circular circular} option can't be enabled when sum of the panel sizes are too small.\n   * @ko {@link Flicking#circular circular} 옵션이 활성화되었는지 여부를 나타내는 멤버 변수.\n   * {@link Flicking#circular circular} 옵션은 패널의 크기의 합이 충분하지 않을 경우 비활성화됩니다.\n   * @type {boolean}\n   * @default false\n   * @readonly\n   */\n  public get circularEnabled() { return this._camera.controlParams.circular; }\n  /**\n   * Index number of the {@link Flicking#currentPanel currentPanel}\n   * @ko {@link Flicking#currentPanel currentPanel}의 인덱스 번호\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get index() { return this._control.activeIndex; }\n  /**\n   * The root(`.flicking-viewport`) element\n   * @ko root(`.flicking-viewport`) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._viewport.element; }\n  /**\n   * Currently active panel\n   * @ko 현재 선택된 패널\n   * @type {Panel}\n   * @readonly\n   * @see Panel\n   */\n  public get currentPanel() { return this._control.activePanel; }\n  /**\n   * Array of panels\n   * @ko 전체 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get panels() { return this._renderer.panels; }\n  /**\n   * Count of panels\n   * @ko 전체 패널의 개수\n   * @type {number}\n   * @readonly\n   */\n  public get panelCount() { return this._renderer.panelCount; }\n  /**\n   * Array of panels that is visible at the current position\n   * @ko 현재 보이는 패널의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get visiblePanels() { return this._camera.visiblePanels; }\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get animating() { return this._control.animating; }\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get holding() { return this._control.holding; }\n  /**\n   * A current list of activated plugins\n   * @ko 현재 활성화된 플러그인 목록\n   * @type {Plugin[]}\n   * @readonly\n   */\n  public get activePlugins() { return this._plugins; }\n\n  // Options Getter\n  // UI / LAYOUT\n  /**\n   * Align position of the panels within viewport. You can set different values each for the panel and camera\n   * @ko 뷰포트 내에서 패널 정렬방식을 설정하는 옵션. 카메라와 패널 개별로 옵션을 설정할 수도 있습니다\n   * @type {ALIGN | string | number | { panel: string | number, camera: string | number }}\n   * @property {ALIGN | string | number} panel The align value for each {@link Panel}s<ko>개개의 {@link Panel}에 적용할 값</ko>\n   * @property {ALIGN | string | number} camera The align value for {@link Camera}<ko>{@link Camera}에 적용할 값</ko>\n   * @default \"center\"\n   * @example\n   * ```ts\n   * const possibleOptions = [\n   *   // Literal strings\n   *   \"prev\", \"center\", \"next\",\n   *   // % values, applied to both panel & camera\n   *   \"0%\", \"25%\", \"42%\",\n   *   // px values, arithmetic calculation with (+/-) is also allowed.\n   *   \"0px\", \"100px\", \"50% - 25px\",\n   *   // numbers, same to number + px (\"0px\", \"100px\")\n   *   0, 100, 1000,\n   *   // Setting a different value for panel & camera\n   *   { panel: \"10%\", camera: \"25%\" }\n   * ];\n   *\n   * possibleOptions.forEach(align => {\n   *   new Flicking(\"#el\", { align });\n   * });\n   * ```\n   */\n  public get align() { return this._align; }\n  /**\n   * Index of the panel to move when Flicking's {@link Flicking#init init()} is called. A zero-based integer\n   * @ko Flicking의 {@link Flicking#init init()}이 호출될 때 이동할 디폴트 패널의 인덱스로, 0부터 시작하는 정수입니다\n   * @type {number}\n   * @default 0\n   */\n  public get defaultIndex() { return this._defaultIndex; }\n  /**\n   * Direction of panel movement (true: horizontal, false: vertical)\n   * @ko 패널 이동 방향 (true: 가로방향, false: 세로방향)\n   * @type {boolean}\n   * @default true\n   */\n  public get horizontal() { return this._horizontal; }\n  /**\n   * Enables circular(continuous loop) mode, which connects first/last panel for continuous scrolling.\n   * @ko 순환 모드를 활성화합니다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능합니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get circular() { return this._circular; }\n  /**\n   * Prevent the view(camera element) from going out of the first/last panel, so it won't show empty spaces before/after the first/last panel\n   * Only can be enabled when `circular=false`\n   * @ko 뷰(카메라 엘리먼트)가 첫번째와 마지막 패널 밖으로 넘어가지 못하게 하여, 첫번째/마지막 패널 전/후의 빈 공간을 보이지 않도록 하는 옵션입니다\n   * `circular=false`인 경우에만 사용할 수 있습니다\n   * @type {boolean}\n   * @default false\n   */\n  public get bound() { return this._bound; }\n  /**\n   * Update height of the viewport element after movement same to the height of the panel below. This can be only enabled when `horizontal=true`\n   * @ko 이동한 후 뷰포트 엘리먼트의 크기를 현재 패널의 높이와 동일하게 설정합니다. `horizontal=true`인 경우에만 사용할 수 있습니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get adaptive() { return this._adaptive; }\n  // EVENTS\n  /**\n   * A Threshold from viewport edge before triggering `needPanel` event\n   * @ko `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리\n   * @type {number}\n   * @default 0\n   */\n  public get needPanelThreshold() { return this._needPanelThreshold; }\n  // ANIMATION\n  /**\n   * Deceleration value for panel movement animation which is triggered by user input. A higher value means a shorter animation time\n   * @ko 사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아집니다\n   * @type {number}\n   * @default 0.0075\n   */\n  public get deceleration() { return this._deceleration; }\n  /**\n   * An easing function applied to the panel movement animation. Default value is `easeOutCubic`\n   * @ko 패널 이동 애니메이션에 적용할 easing 함수. 기본값은 `easeOutCubic`이다\n   * @type {function}\n   * @default x => 1 - Math.pow(1 - x, 3)\n   * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n   */\n  public get easing() { return this._easing; }\n  /**\n   * Default duration of the animation (ms)\n   * @ko 디폴트 애니메이션 재생 시간 (ms)\n   * @type {number}\n   * @default 500\n   */\n  public get duration() { return this._duration; }\n  // INPUT\n  /**\n   * Types of input devices to enable\n   * @ko 활성화할 입력 장치 종류\n   * @type {string[]}\n   * @default [\"touch\", \"mouse\"]\n   * @see {@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Possible values (PanInputOption#inputType)}\n   * <ko>{@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 가능한 값들 (PanInputOption#inputType)}</ko>\n   */\n  public get inputType() { return this._inputType; }\n  /**\n   * Movement style by user input. This will change instance type of {@link Flicking#control}\n   * You can use the values of the constant {@link MOVE_TYPE}\n   * @ko 사용자 입력에 의한 이동 방식. 이 값에 따라 {@link Flicking#control}의 인스턴스 타입이 결정됩니다\n   * 상수 {@link MOVE_TYPE}에 정의된 값들을 이용할 수 있습니다\n   * @type {MOVE_TYPE | Pair<string, object>}\n   * @default \"snap\"\n   * @example\n   * |moveType|control|options|\n   * |:---:|:---:|:---:|\n   * |\"snap\"|{@link SnapControl}||\n   * |\"freeScroll\"|{@link FreeControl}|{@link FreeControlOptions}|\n   *\n   * ```ts\n   * import Flicking, { MOVE_TYPE } from \"@egjs/flicking\";\n   *\n   * const flicking = new Flicking({\n   *   moveType: MOVE_TYPE.SNAP\n   * });\n   * ```\n   *\n   * ```ts\n   * const flicking = new Flicking({\n   *   // If you want more specific settings for the moveType\n   *   // [moveType, options for that moveType]\n   *   // In this case, it's [\"freeScroll\", FreeControlOptions]\n   *   moveType: [MOVE_TYPE.FREE_SCROLL, { stopAtEdge: true }]\n   * });\n   * ```\n   */\n  public get moveType() { return this._moveType; }\n  /**\n   * Movement threshold to change panel (unit: px). It should be dragged above the threshold to change the current panel.\n   * @ko 패널 변경을 위한 이동 임계값 (단위: px). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.\n   * @type {number}\n   * @default 40\n   */\n  public get threshold() { return this._threshold; }\n  /**\n   * Set animation to be interruptable by click/touch.\n   * @ko 사용자의 클릭/터치로 인해 애니메이션을 도중에 멈출 수 있도록 설정합니다.\n   * @type {boolean}\n   * @default true\n   */\n  public get interruptable() { return this._interruptable; }\n  /**\n   * The size value of the bounce area. Only can be enabled when `circular=false`.\n   * You can set different bounce value for prev/next direction by using array.\n   * `number` for px value, and `string` for px, and % value relative to viewport size.\n   * You have to call {@link Control#updateInput} after changing this to take effect.\n   * @ko Flicking이 최대 영역을 넘어서 갈 수 있는 최대 크기. `circular=false`인 경우에만 사용할 수 있습니다.\n   * 배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정할 수 있습니다.\n   * `number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있습니다.\n   * 이 값을 변경시 {@link Control#updateInput}를 호출해야 합니다.\n   * @type {string | number | Array<string | number>}\n   * @default \"20%\"\n   * @example\n   * ```ts\n   * const possibleOptions = [\n   *   // % values, relative to viewport element(\".flicking-viewport\")'s size\n   *   \"0%\", \"25%\", \"42%\",\n   *   // px values, arithmetic calculation with (+/-) is also allowed.\n   *   \"0px\", \"100px\", \"50% - 25px\",\n   *   // numbers, same to number + px (\"0px\", \"100px\")\n   *   0, 100, 1000\n   * ];\n   * ```\n   *\n   * @example\n   * ```ts\n   * const flicking = new Flicking(\"#el\", { bounce: \"20%\" });\n   *\n   * flicking.bounce = \"100%\";\n   * flicking.control.updateInput(); // Call this to update!\n   * ```\n   */\n  public get bounce() { return this._bounce; }\n  /**\n   * Size of the area from the right edge in iOS safari (in px) which enables swipe-back or swipe-forward\n   * @ko iOS Safari에서 swipe를 통한 뒤로가기/앞으로가기를 활성화하는 오른쪽 끝으로부터의 영역의 크기 (px)\n   * @type {number}\n   * @default 30\n   */\n  public get iOSEdgeSwipeThreshold() { return this._iOSEdgeSwipeThreshold; }\n  /**\n   * Automatically prevent `click` event if the user has dragged at least a single pixel on the viewport element\n   * @ko 사용자가 뷰포트 영역을 1픽셀이라도 드래그했을 경우 자동으로 {@link https://developer.mozilla.org/ko/docs/Web/API/Element/click_event click} 이벤트를 취소합니다\n   * @type {boolean}\n   * @default true\n   */\n  public get preventClickOnDrag() { return this._preventClickOnDrag; }\n  /**\n   * Automatically call {@link Flicking#disableInput disableInput()} on initialization\n   * @ko Flicking init시에 {@link Flicking#disableInput disableInput()}을 바로 호출합니다\n   * @type {boolean}\n   * @default false\n   */\n  public get disableOnInit() { return this._disableOnInit; }\n  // PERFORMANCE\n  /**\n   * Whether to render visible panels only. This can dramatically increase performance when there're many panels.\n   * @ko 보이는 패널만 렌더링할지 여부를 설정합니다. 패널이 많을 경우에 퍼포먼스를 크게 향상시킬 수 있습니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get renderOnlyVisible() { return this._renderOnlyVisible; }\n  // OTHERS\n  /**\n   * Call {@link Flicking#init init()} automatically when creating Flicking's instance\n   * @ko Flicking 인스턴스를 생성할 때 자동으로 {@link Flicking#init init()}를 호출합니다\n   * @type {boolean}\n   * @default true\n   * @readonly\n   */\n  public get autoInit() { return this._autoInit; }\n  /**\n   * Attach Flicking's {@link Flicking#resize resize} method to window's resize event.\n   * Flicking will automatically call {@link Flicking#resize resize} window size and orientation change.\n   * @ko Flicking의 {@link Flicking#resize resize} 메소드를 window의 resize 이벤트 핸들러로 등록합니다.\n   * 설정시 window 창 크기 및 orientation 변경에 의해 자동으로 {@link Flicking#resize resize}를 호출합니다.\n   * @type {boolean}\n   * @default true\n   */\n  public get autoResize() { return this._autoResize; }\n  /**\n   * This is an option for the frameworks(React, Vue, Angular, ...). Don't set it as it's automatically managed by Flicking.\n   * @ko 프레임워크(React, Vue, Angular, ...)에서만 사용하는 옵션으로, 자동으로 설정되므로 따로 사용하실 필요 없습니다!\n   * @type {boolean}\n   * @default false\n   * @internal\n   * @readonly\n   */\n  public get renderExternal() { return this._renderExternal; }\n\n  // Options Setter\n  // UI / LAYOUT\n  public set align(val: FlickingOptions[\"align\"]) {\n    this._align = val;\n    this._renderer.align = val;\n    this._camera.align = val;\n  }\n\n  public set defaultIndex(val: FlickingOptions[\"defaultIndex\"]) { this._defaultIndex = val; }\n  public set horizontal(val: FlickingOptions[\"horizontal\"]) { this._horizontal = val; }\n  public set circular(val: FlickingOptions[\"circular\"]) { this._circular = val; }\n  public set bound(val: FlickingOptions[\"bound\"]) { this._bound = val; }\n  public set adaptive(val: FlickingOptions[\"adaptive\"]) { this._adaptive = val; }\n  // ANIMATION\n  public set deceleration(val: FlickingOptions[\"deceleration\"]) { this._deceleration = val; }\n  public set easing(val: FlickingOptions[\"easing\"]) { this._easing = val; }\n  public set duration(val: FlickingOptions[\"duration\"]) { this._duration = val; }\n  // INPUT\n  public set inputType(val: FlickingOptions[\"inputType\"]) { this._inputType = val; }\n  public set moveType(val: FlickingOptions[\"moveType\"]) { this._moveType = val; }\n  public set threshold(val: FlickingOptions[\"threshold\"]) { this._threshold = val; }\n  public set interruptable(val: FlickingOptions[\"interruptable\"]) { this._interruptable = val; }\n  public set bounce(val: FlickingOptions[\"bounce\"]) { this._bounce = val; }\n  public set iOSEdgeSwipeThreshold(val: FlickingOptions[\"iOSEdgeSwipeThreshold\"]) { this._iOSEdgeSwipeThreshold = val; }\n  public set preventClickOnDrag(val: FlickingOptions[\"preventClickOnDrag\"]) { this._preventClickOnDrag = val; }\n  public set disableOnInit(val: FlickingOptions[\"disableOnInit\"]) { this._disableOnInit = val; }\n  // PERFORMANCE\n  public set renderOnlyVisible(val: FlickingOptions[\"renderOnlyVisible\"]) { this._renderOnlyVisible = val; }\n  // OTHERS\n  public set autoResize(val: FlickingOptions[\"autoResize\"]) { this._autoResize = val; }\n\n  /**\n   * @param root A root HTMLElement to initialize Flicking on it. When it's a typeof `string`, it should be a css selector string\n   * <ko>Flicking을 초기화할 HTMLElement로, `string` 타입으로 지정시 css 선택자 문자열을 지정해야 합니다.</ko>\n   * @param {object} [options={}] An options object for Flicking.<ko>Flicking에 적용할 옵션 오브젝트</ko>\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE WRONG_TYPE}|When the root is not either string or HTMLElement|\n   * |{@link ERROR_CODE ELEMENT_NOT_FOUND}|When the element with given CSS selector does not exist|\n   * <ko>\n   *\n   * |code|조건|\n   * |---|---|\n   * |{@link ERROR_CODE WRONG_TYPE}|루트 엘리먼트가 string이나 HTMLElement가 아닐 경우|\n   * |{@link ERROR_CODE ELEMENT_NOT_FOUND}|주어진 CSS selector로 엘리먼트를 찾지 못했을 경우|\n   *\n   * </ko>\n   * @example\n   * ```ts\n   * import Flicking from \"@egjs/flicking\";\n   *\n   * // Creating new instance of Flicking with HTMLElement\n   * const flicking = new Flicking(document.querySelector(\".flicking-viewport\"), { circular: true });\n   *\n   * // Creating new instance of Flicking with CSS selector\n   * const flicking2 = new Flicking(\".flicking-viewport\", { circular: true });\n   * ```\n   */\n  public constructor(root: HTMLElement | string, {\n    align = ALIGN.CENTER,\n    defaultIndex = 0,\n    horizontal = true,\n    circular = false,\n    bound = false,\n    adaptive = false,\n    needPanelThreshold = 0,\n    deceleration = 0.0075,\n    duration = 500,\n    easing = x => 1 - Math.pow(1 - x, 3),\n    inputType = [\"mouse\", \"touch\"],\n    moveType = \"snap\",\n    threshold = 40,\n    interruptable = true,\n    bounce = \"20%\",\n    iOSEdgeSwipeThreshold = 30,\n    preventClickOnDrag = true,\n    disableOnInit = false,\n    renderOnlyVisible = false,\n    autoInit = true,\n    autoResize = true,\n    renderExternal = null\n  }: Partial<FlickingOptions> = {}) {\n    super();\n\n    // Internal states\n    this._initialized = false;\n    this._plugins = [];\n\n    // Bind options\n    this._align = align;\n    this._defaultIndex = defaultIndex;\n    this._horizontal = horizontal;\n    this._circular = circular;\n    this._bound = bound;\n    this._adaptive = adaptive;\n    this._needPanelThreshold = needPanelThreshold;\n    this._deceleration = deceleration;\n    this._duration = duration;\n    this._easing = easing;\n    this._inputType = inputType;\n    this._moveType = moveType;\n    this._threshold = threshold;\n    this._interruptable = interruptable;\n    this._bounce = bounce;\n    this._iOSEdgeSwipeThreshold = iOSEdgeSwipeThreshold;\n    this._preventClickOnDrag = preventClickOnDrag;\n    this._disableOnInit = disableOnInit;\n    this._renderOnlyVisible = renderOnlyVisible;\n    this._autoResize = autoResize;\n    this._autoInit = autoInit;\n    this._renderExternal = renderExternal;\n\n    // Create core components\n    this._viewport = new Viewport(getElement(root));\n    this._renderer = this._createRenderer();\n    this._camera = this._createCamera();\n    this._control = this._createControl();\n\n    this.resize = this.resize.bind(this);\n\n    if (this._autoInit) {\n      void this.init();\n    }\n  }\n\n  /**\n   * Initialize Flicking and move to the default index\n   * This is automatically called on Flicking's constructor when `autoInit` is true(default)\n   * @ko Flicking을 초기화하고, 디폴트 인덱스로 이동합니다\n   * 이 메소드는 `autoInit` 옵션이 true(default)일 경우 Flicking이 생성될 때 자동으로 호출됩니다\n   * @fires Flicking#ready\n   * @return {this}\n   */\n  public async init(): Promise<void> {\n    if (this._initialized) return;\n\n    const camera = this._camera;\n    const renderer = this._renderer;\n    const control = this._control;\n    const viewport = this._viewport;\n\n    camera.init(this);\n    renderer.init(this);\n    control.init(this);\n\n    await this.resize();\n\n    // Look at initial panel\n    this._moveToInitialPanel();\n\n    if (this._autoResize) {\n      window.addEventListener(\"resize\", this.resize);\n    }\n    if (this._preventClickOnDrag) {\n      viewport.element.addEventListener(\"click\", this._preventClickWhenDragged);\n    }\n    if (this._disableOnInit) {\n      this.disableInput();\n    }\n\n    this._plugins.forEach(plugin => plugin.init(this));\n\n    // Done initializing & emit ready event\n    this._initialized = true;\n    this.trigger(new ComponentEvent(EVENTS.READY));\n\n    return;\n  }\n\n  /**\n   * Destroy Flicking and remove all event handlers\n   * @ko Flicking과 하위 컴포넌트들을 초기 상태로 되돌리고, 부착된 모든 이벤트 핸들러를 제거합니다\n   * @return {void}\n   */\n  public destroy(): void {\n    if (!this._initialized) return;\n\n    this.off();\n    window.removeEventListener(\"resize\", this.resize);\n    this._viewport.element.removeEventListener(\"click\", this._preventClickWhenDragged);\n\n    this._control.destroy();\n    this._camera.destroy();\n    this._renderer.destroy();\n\n    this._plugins.forEach(plugin => plugin.destroy());\n\n    this._initialized = false;\n  }\n\n  /**\n   * Move to the previous panel (current index - 1)\n   * @ko 이전 패널로 이동합니다 (현재 인덱스 - 1)\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the panel movement animation (unit: ms)<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the previous panel does not exist|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|이전 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the previous panel<ko>이전 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public prev(duration: number = this._duration): Promise<void> {\n    return this.moveTo(this._control.activePanel?.prev()?.index ?? -1, duration, DIRECTION.PREV);\n  }\n\n  /**\n   * Move to the next panel (current index + 1)\n   * @ko 다음 패널로 이동합니다 (현재 인덱스 + 1)\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the next panel does not exist|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|다음 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the next panel<ko>다음 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public next(duration: number = this._duration) {\n    return this.moveTo(this._control.activePanel?.next()?.index ?? this._renderer.panelCount, duration, DIRECTION.NEXT);\n  }\n\n  /**\n   * Move to the panel with given index\n   * @ko 주어진 인덱스에 해당하는 패널로 이동합니다\n   * @param {number} index The index of the panel to move<ko>이동할 패널의 인덱스</ko>\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {DIRECTION} [direction=DIRECTION.NONE] Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the root is not either string or HTMLElement|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|해당 인덱스를 가진 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public moveTo(index: number, duration: number = this._duration, direction: ValueOf<typeof DIRECTION> = DIRECTION.NONE) {\n    const renderer = this._renderer;\n    const panelCount = renderer.panelCount;\n\n    const panel = renderer.getPanel(index);\n\n    if (!panel) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.INDEX_OUT_OF_RANGE(index, 0, panelCount - 1), ERROR.CODE.INDEX_OUT_OF_RANGE));\n    }\n\n    if (this._control.animating) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.ANIMATION_ALREADY_PLAYING, ERROR.CODE.ANIMATION_ALREADY_PLAYING));\n    }\n\n    return this._control.moveToPanel(panel, {\n      duration,\n      direction\n    });\n  }\n\n  /**\n   * Return the {@link Panel} at the given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.\n   * @return {Panel | null} Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>\n   * @see Panel\n   * @example\n   * ```ts\n   * const panel = flicking.getPanel(0);\n   * // Which is a shorthand to...\n   * const samePanel = flicking.panels[0];\n   * ```\n   */\n  public getPanel(index: number): Panel | null {\n    return this._renderer.getPanel(index);\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @return {this}\n   */\n  public enableInput(): this {\n    this._control.enable();\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @return {this}\n   */\n  public disableInput(): this {\n    this._control.disable();\n    return this;\n  }\n\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to {@link Flicking#setStatus setStatus()}\n   * @ko 현재 상태를 반환합니다. 반환받은 값을 {@link Flicking#setStatus setStatus()} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있습니다\n   * @param {object} options Status retrieving options<ko>Status 반환 옵션</ko>\n   * @param {boolean} [options.index=true] Include current panel index to the returning status. Camera will automatically move to the given index when the {@link Flicking#setStatus setStatus} is called<ko>현재 패널 인덱스를 반환값에 포함시킵니다. {@link Flicking#setStatus setStatus} 호출시 자동으로 해당 인덱스로 카메라를 움직입니다</ko>\n   * @param {boolean} [options.position=true] Include camera position to the returning status. This works only when the {@link Flicking#moveType moveType} is `freeScroll`<ko>카메라의 현재 위치를 반환값에 포함시킵니다. 이 옵션은 {@link Flicking#moveType moveType}이 `freeScroll`일 경우에만 동작합니다</ko>\n   * @param {boolean} [options.includePanelHTML=false] Include panel's `outerHTML` to the returning status<ko>패널의 `outerHTML`을 반환값에 포함시킵니다</ko>\n   * @param {boolean} [options.visiblePanelsOnly=false] Include only {@link Flicking#visiblePanel visiblePanel}'s HTML. This option is available only when the `includePanelHTML` is true\n   * <ko>현재 보이는 패널({@link Flicking#visiblePanel visiblePanel})의 HTML만 반환합니다. `includePanelHTML`이 `true`일 경우에만 동작합니다.</ko>\n   * @return {Partial<Status>} An object with current status value information<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus({\n    index = true,\n    position = true,\n    includePanelHTML = false,\n    visiblePanelsOnly = false\n  }: Partial<{\n    index: boolean;\n    position: boolean;\n    includePanelHTML: boolean;\n    visiblePanelsOnly: boolean;\n  }> = {}): Status {\n    const camera = this._camera;\n    const panels = visiblePanelsOnly ? this.visiblePanels : this.panels;\n\n    const status: Status = {\n      panels: panels.map(panel => {\n        const panelInfo: Status[\"panels\"][0] = { index: panel.index };\n\n        if (includePanelHTML) {\n          panelInfo.html = panel.element.outerHTML;\n        }\n\n        return panelInfo;\n      })\n    };\n\n    if (index) {\n      status.index = this.index;\n    }\n    if (position) {\n      const nearestAnchor = camera.findNearestAnchor(camera.position);\n\n      if (nearestAnchor) {\n        status.position = {\n          panel: nearestAnchor.panel.index,\n          progressInPanel: camera.getProgressInPanel(nearestAnchor.panel)\n        };\n      }\n\n    }\n\n    if (visiblePanelsOnly) {\n      const visiblePanels = this.visiblePanels;\n\n      status.visibleOffset = visiblePanels[0]?.index ?? 0;\n    }\n\n    return status;\n  }\n\n  /**\n   * Restore to the state of the given {@link Status}\n   * @ko 주어진 {@link Status}의 상태로 복원합니다\n   * @param {Partial<Status>} status Status value to be restored. You should use the return value of the {@link Flicking#getStatus getStatus()} method<ko>복원할 상태 값. {@link Flicking#getStatus getStatus()} 메서드의 반환값을 지정하면 됩니다</ko>\n   * @return {void}\n   */\n  public setStatus(status: Status): void {\n    if (!this._initialized) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_INITIALIZED, ERROR.CODE.NOT_INITIALIZED);\n    }\n\n    const {\n      index,\n      position,\n      visibleOffset,\n      panels\n    } = status;\n\n    const renderer = this._renderer;\n    const control = this._control;\n\n    // Can't add/remove panels on external rendering\n    if (panels[0]?.html && !this._renderExternal) {\n      renderer.batchRemove({ index: 0, deleteCount: this.panels.length });\n      renderer.batchInsert({ index: 0, elements: parseElement(panels.map(panel => panel.html!)) });\n    }\n\n    if (index) {\n      const panelIndex = visibleOffset\n        ? index - visibleOffset\n        : index;\n\n      void this.moveTo(panelIndex, 0).catch(() => void 0);\n    }\n\n    if (position && this._moveType === MOVE_TYPE.FREE_SCROLL) {\n      const { panel, progressInPanel } = position;\n      const panelIndex = visibleOffset\n        ? panel - visibleOffset\n        : panel;\n      const panelRange = renderer.panels[panelIndex].range;\n      const newCameraPos = panelRange.min + (panelRange.max - panelRange.min) * progressInPanel;\n\n      void control.moveToPosition(newCameraPos, 0).catch(() => void 0);\n    }\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가합니다\n   * @param {...Plugin} plugins The plugin(s) to add<ko>추가할 플러그인(들)</ko>\n   * @return {this}\n   * @see https://github.com/naver/egjs-flicking-plugins\n   */\n  public addPlugins(...plugins: Plugin[]) {\n    if (this._initialized) {\n      plugins.forEach(item => item.init(this));\n    }\n\n    this._plugins.push(...plugins);\n\n    return this;\n  }\n\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거합니다.\n   * @param {...Plugin} plugin The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {this}\n   * @see https://github.com/naver/egjs-flicking-plugins\n   */\n  public removePlugins(...plugins: Plugin[]) {\n    plugins.forEach(item => {\n      const foundIndex = findIndex(this._plugins, val => val === item);\n\n      if (foundIndex >= 0) {\n        item.destroy();\n        this._plugins.splice(foundIndex, 1);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Update viewport/panel sizes\n   * @ko 패널 및 뷰포트의 크기를 갱신합니다\n   * @method\n   * @fires Flicking#beforeResize\n   * @fires Flicking#afterResize\n   * @return {this}\n   */\n  public async resize(): Promise<void> {\n    const viewport = this._viewport;\n    const renderer = this._renderer;\n    const camera = this._camera;\n    const control = this._control;\n\n    const activePanel = control.activePanel;\n    const prevWidth = viewport.width;\n    const prevHeight = viewport.height;\n    const prevProgressInPanel = activePanel\n      ? camera.getProgressInPanel(activePanel)\n      : 0;\n\n    this.trigger(new ComponentEvent(EVENTS.BEFORE_RESIZE, {\n      width: prevWidth,\n      height: prevHeight,\n      element: viewport.element\n    }));\n\n    viewport.resize();\n    await renderer.forceRenderAllPanels(); // Render all panel elements, to update sizes\n    renderer.updatePanelSize();\n    await renderer.render();\n    camera.updateAlignPos();\n    camera.updateRange();\n    camera.updateAnchors();\n\n    if (control.animating) {\n      // TODO:\n    } else {\n      await control.updatePosition(prevProgressInPanel);\n      control.updateInput();\n    }\n\n    const newWidth = viewport.width;\n    const newHeight = viewport.height;\n    const sizeChanged = newWidth !== prevWidth || newHeight !== prevHeight;\n\n    this.trigger(new ComponentEvent(EVENTS.AFTER_RESIZE, {\n      width: viewport.width,\n      height: viewport.height,\n      prev: {\n        width: prevWidth,\n        height: prevHeight\n      },\n      sizeChanged,\n      element: viewport.element\n    }));\n  }\n\n  /**\n   * Add new panels after the last panel\n   * @ko 패널 목록의 제일 끝에 새로운 패널들을 추가합니다\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of appended panels<ko>추가된 패널들의 배열</ko>\n   * @see Panel\n   * @see ElementLike\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new Flicking(\"#flick\");\n   * // These are possible parameters\n   * flicking.append(document.createElement(\"div\"));\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\");\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public append(element: ElementLike | ElementLike[]): Panel[] {\n    return this.insert(this._renderer.panelCount, element);\n  }\n\n  /**\n   * Add new panels before the first panel\n   * This will increase index of panels after by the number of panels added\n   * @ko 패널 목록의 제일 앞(index 0)에 새로운 패널들을 추가합니다\n   * 추가한 패널의 개수만큼 기존 패널들의 인덱스가 증가합니다.\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   * @see Panel\n   * @see ElementLike\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.prepend(document.createElement(\"div\"));\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\");\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.prepend(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public prepend(element: ElementLike | ElementLike[]): Panel[] {\n    return this.insert(0, element);\n  }\n\n  /**\n   * Insert new panels at given index\n   * This will increase index of panels after by the number of panels added\n   * @ko 주어진 인덱스에 새로운 패널들을 추가합니다\n   * 해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.\n   * @param {number} index Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.insert(0, document.createElement(\"div\"));\n   * flicking.insert(2, \"\\<div\\>Panel\\</div\\>\");\n   * flicking.insert(1, [\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.insert(3, \"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public insert(index: number, element: ElementLike | ElementLike[]): Panel[] {\n    if (this._renderExternal) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_ALLOWED_IN_FRAMEWORK, ERROR.CODE.NOT_ALLOWED_IN_FRAMEWORK);\n    }\n\n    return this._renderer.batchInsert({ index, elements: parseElement(element) });\n  }\n\n  /**\n   * Remove the panel at the given index\n   * This will decrease index of panels after by the number of panels removed\n   * @ko 주어진 인덱스의 패널을 제거합니다\n   * 해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다\n   * @param {number} index Index of panel to remove<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>\n   * @return {Panel[]} An array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    if (this._renderExternal) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_ALLOWED_IN_FRAMEWORK, ERROR.CODE.NOT_ALLOWED_IN_FRAMEWORK);\n    }\n\n    return this._renderer.batchRemove({ index, deleteCount });\n  }\n\n  private _createControl(): Control {\n    const moveType = this._moveType;\n    const moveTypes = Object.keys(MOVE_TYPE).map(key => MOVE_TYPE[key] as ValueOf<typeof MOVE_TYPE>);\n\n    const moveTypeStr = Array.isArray(moveType)\n      ? moveType[0]\n      : moveType;\n\n    const moveTypeOptions = Array.isArray(moveType)\n      ? moveType[1] ?? {}\n      : {};\n\n    if (!includes(moveTypes, moveTypeStr)) {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"moveType\", JSON.stringify(moveType)), ERROR.CODE.WRONG_OPTION);\n    }\n\n    switch (moveTypeStr) {\n      case MOVE_TYPE.SNAP:\n        return new SnapControl();\n      case MOVE_TYPE.FREE_SCROLL:\n        return new FreeControl(moveTypeOptions);\n    }\n  }\n\n  private _createCamera(): Camera {\n    const cameraOption = { align: this._align };\n\n    if (this._circular) {\n      if (this._bound) {\n        // eslint-disable-next-line no-console\n        console.warn(\"\\\"circular\\\" and \\\"bound\\\" option cannot be used together, ignoring bound.\");\n      }\n      return new CircularCamera(cameraOption);\n    } else if (this._bound) {\n      return new BoundCamera(cameraOption);\n    } else {\n      return new LinearCamera(cameraOption);\n    }\n  }\n\n  private _createRenderer(): Renderer {\n    const renderingStrategy = this._renderOnlyVisible\n      ? new VisibleRenderingStrategy()\n      : new RawRenderingStrategy();\n\n    const rendererOptions = {\n      align: this._align,\n      strategy: renderingStrategy\n    };\n\n    const renderExternal = this._renderExternal;\n\n    return renderExternal\n      ? new (renderExternal.renderer as any)({ ...rendererOptions, ...renderExternal.rendererOptions })\n      : new VanillaRenderer(rendererOptions);\n  }\n\n  private _moveToInitialPanel(): void {\n    const renderer = this._renderer;\n    const control = this._control;\n    const initialPanel = renderer.getPanel(this._defaultIndex) || renderer.getPanel(0);\n\n    if (!initialPanel) return;\n\n    void control.moveToPanel(initialPanel, {\n      duration: 0\n    });\n  }\n\n  private _preventClickWhenDragged = (e: MouseEvent) => {\n    if (this._control.animating) {\n      e.preventDefault();\n    }\n  };\n}\n\nexport default Flicking;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel, { PanelOptions } from \"./Panel\";\n\nexport interface ExternalPanelOptions<T> extends PanelOptions {\n  externalComponent: T;\n}\n\n/**\n * An slide data component that holds information of a single HTMLElement\n * @ko 슬라이드 데이터 컴포넌트로, 단일 HTMLElement의 정보를 갖고 있습니다\n */\nabstract class ExternalPanel<T = any> extends Panel {\n  protected _externalComponent: T;\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {HTMLElement} [options.el] A `HTMLElement` panel's referencing<ko>패널이 참조하는 `HTMLElement`</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor(options: ExternalPanelOptions<T>) {\n    super(options);\n\n    this._externalComponent = options.externalComponent;\n  }\n}\n\nexport default ExternalPanel;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Viewport from \"./Viewport\";\nimport FlickingError from \"./FlickingError\";\nimport AnchorPoint from \"./AnchorPoint\";\n\nexport {\n  Viewport,\n  FlickingError,\n  AnchorPoint\n};\n\nexport * from \"./panel\";\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"./Flicking\";\nimport * as Core from \"./core\";\nimport * as Camera from \"./camera\";\nimport * as Control from \"./control\";\nimport * as Renderer from \"./renderer\";\nimport * as Constants from \"./const/external\";\nimport { merge } from \"./utils\";\n\nmerge(Flicking, Core);\nmerge(Flicking, Camera);\nmerge(Flicking, Control);\nmerge(Flicking, Renderer);\nmerge(Flicking, Constants);\n\nexport default Flicking;\n"],"names":["__extends","message","code","_super","_this","Object","setPrototypeOf","FlickingError","prototype","name","Error","CODE","WRONG_TYPE","ELEMENT_NOT_FOUND","VAL_MUST_NOT_NULL","NOT_ATTACHED_TO_FLICKING","WRONG_OPTION","INDEX_OUT_OF_RANGE","POSITION_NOT_REACHABLE","TRANSFORM_NOT_SUPPORTED","STOP_CALLED_BY_USER","ANIMATION_INTERRUPTED","ANIMATION_ALREADY_PLAYING","NOT_ALLOWED_IN_FRAMEWORK","NOT_INITIALIZED","NO_ACTIVE","MESSAGE","wrongVal","correctTypes","map","type","join","selector","val","optionName","min","max","position","EVENTS","READY","BEFORE_RESIZE","AFTER_RESIZE","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","WILL_CHANGE","CHANGED","WILL_RESTORE","RESTORED","SELECT","NEED_PANEL","VISIBLE_CHANGE","REACH_EDGE","PANEL_CHANGE","ALIGN","PREV","CENTER","NEXT","DIRECTION","NONE","MOVE_TYPE","SNAP","FREE_SCROLL","merge","target","_i","sources","forEach","source","keys","key","getElement","el","parent","targetEl","isString","parentEl","document","queryResult","querySelector","ERROR","nodeType","Node","ELEMENT_NODE","checkExistence","value","nameOnErrMsg","clamp","x","Math","getFlickingAttached","nameToThrowOnError","toArray","iterable","slice","call","parseAlign","align","size","alignPoint","parseArithmeticExpression","parseBounce","bounce","parsedBounce","Array","isArray","parsedVal","cssValue","base","cssRegex","idx","calculatedValue","matchResult","exec","sign","unit","parsedValue","parseFloat","getDirection","start","end","parseElement","element","elements","tempDiv","createElement","innerHTML","push","children","firstChild","removeChild","getMinusCompensatedIndex","includes","array","array_1","__values","circulatePosition","pos","offset","findIndex","checker","length","getProgress","prev","next","getStyle","window","getComputedStyle","currentStyle","_el","_width","_height","_padding","left","right","top","bottom","_isBorderBoxSizing","_a","width","height","padding","isBorderBoxSizing","style","newWidth","newHeight","resize","elStyle","offsetWidth","offsetHeight","paddingLeft","paddingRight","paddingTop","paddingBottom","boxSizing","EVENT","HOLD","CHANGE","RELEASE","ANIMATION_END","FINISH","POSITION_KEY","STATE_TYPE","ctx","flicking","axesEvent","transitTo","renderer","panelCount","DISABLED","holdStartEvent","ComponentEvent","trigger","isCanceled","HOLDING","controller","control","animatingContext","moveStartEvent","isTrusted","holding","direction","ANIMATING","onChange","State","inputEvent","horizontal","offsetX","offsetY","DRAGGING","delta","flick","setTo","camera","IDLE","_releaseEvent","releaseEvent","srcEvent","clickedElement","touchEvent","touch","changedTouches","elementFromPoint","clientX","clientY","panels","clickedPanel","panels_1","panel","contains","cameraPosition","clickedPanelPosition","index","AXES","prevPosition","lookAt","moveEvent","destPos","duration","moveToPosition","stop","nextStateType","nextState","IdleState","HoldingState","DraggingState","AnimatingState","DisabledState","_state","eventType","externalCtx","currentState","onHold","onRelease","onAnimationEnd","onFinish","_resetInternalValues","_stateMachine","StateMachine","_axes","state","_animatingContext","_panInput","isEnable","get","axis","_flicking","Axes","range","circular","deceleration","interruptable","easing","PanInput","viewport","inputType","iOSEdgeSwipeThreshold","scale","axes","connect","on","e","fire","destroy","enable","disable","controlParams","axm","set","Promise","reject","startPos","animate","resetContext","once","_b","resolve","animationFinishHandler","off","interruptionHandler","newActivePanel","prevActivePanel","_activePanel","updateAdaptiveHeight","prevIndex","prevPanel","_controller","AxesController","animating","init","_progressInPanel","activePanel","clampToReachablePosition","update","nearestAnchor","findNearestAnchor","removed","canReach","circularEnabled","camPos_1","camRangeDiff","rangeDiff","possiblePositions","filter","reduce","nearestPosition","abs","Infinity","_triggerIndexChangeEvent","_animateToPosition","triggeringEvent","event","currentPanel","animateTo","animation","_setActive","then","render","catch","err","clampedPosition","anchorAtPosition","prevPos","isOverThreshold","threshold","adjacentAnchor","getNextAnchor","getPrevAnchor","targetPanel","targetPos","Control","_c","stopAtEdge","_stopAtEdge","progressInPanel","panelRange","newPosition","findAnchorIncludePosition","_index","_pos","_panel","transforms","supportedStyle","documentElement","transformName","transforms_1","prefixedTransform","_transform","_align","_position","_alignPos","_offset","_range","_visiblePanels","_anchors","NaN","nearestPanel","panelPos","bounceSize","prevRange","nextRange","nextPanel","nextPosition","viewportEl","firstElementChild","_checkTranslateSupport","_refreshVisiblePanels","_checkNeedPanel","_checkReachEnd","_applyTransform","anchor","anchors","anchorsIncludingPosition","includePosition","nearest","prevDist","anchorIdx","dist","visibleRange","includeRange","alignVal","AnchorPoint","adaptive","setSize","unRenderedPanels","rendered","sizeIncludingMargin","_needPanelTriggered","newVisiblePanels","canSee","prevVisiblePanels","added","visiblePanels","needPanelTriggered","cameraSize","cameraRange","needPanelThreshold","cameraPrev","cameraNext","firstPanel","lastPanel","firstPanelPrev","lastPanelNext","newPos","wasBetweenRange","isBetweenRange","actualPosition","getPanel","Camera","_circularOffset","_circularEnabled","lastAnchor","firstAnchor","positionInRange","anchorInRange","loopCount","floor","visibleInCurrentRange","margin","visibleSize","panelSizeSum","canSetCircularMode","every","updateCircularToggleDirection","_updateCircularOffset","toggled","toggle","some","isToggled","sum","toggledPrev","toggledNext","toggleDirection","_calcPanelAreaSum","alignPos","viewportSize","panelAreaSize","canSetBoundMode","reachablePanels","shouldPrependBoundAnchor","shouldAppendBoundAnchor","indexOffset_1","newAnchors","splice","nearestPanelAtMin","_findNearestPanel","panelAtMin","panelAtMax","panelIdx","markForShow","_d","strategy","RawRenderingStrategy","_renderingStrategy","_panels","panelAlign","_getPanelAlign","_collectPanels","items","allPanelsInserted","addedPanels","item","insertingIdx","panelsPushed","panelsInserted","_createPanel","insertedSize","_getPanelSizeSum","increaseIndex","increasePosition","_insertPanelElements","_updateCameraAndControl","moveToPanel","updateOffset","activeIndex","allPanelsRemoved","deleteCount","removingIdx","panelsPulled","panelsRemoved","removedSize","decreaseIndex","decreasePosition","_removePanelElements","resetActive","marginDiff","updateRange","updateAnchors","resetNeedPanelHistory","updateInput","_removed","_resetInternalStates","_size","_margin","_toggled","_toggleDirection","cameraRangeDiff","progress","alignPosition","camPos","disappearPosNext","disappearPosPrev","checkingRange","marginLeft","marginRight","marginTop","marginBottom","_updateAlignPos","includeMargin","moveTo","_moveBy","togglePosition","_togglePosition","prevToggled","camRange","camAlignPosition","camVisibleRange","camVisibleSize","minimumVisible","maximumVisible","shouldBeVisibleAtMin","shouldBeVisibleAtMax","options","_rendered","Panel","cameraEl","wasRenderedPanels","parentElement","updateRenderingPanels","renderingPanels","_getRenderingPanelsByOrder","_resetPanelElementOrder","cameraElement","fragment","createDocumentFragment","appendChild","_removeAllChildsFromCamera","childNodes","node","TEXT_NODE","cameraChilds","ElementPanel","nextSibling","nextSiblingElement","insertBefore","reversedPanels","__spreadArray","reverse","nextPanelEl","nextElementSibling","sort","a","b","Renderer","visibleIndexes","visibles","markForHide","root","defaultIndex","_e","_f","_g","bound","_h","_j","_k","_l","_m","pow","_o","_p","moveType","_q","_r","_s","_t","_u","preventClickOnDrag","_v","disableOnInit","_w","renderOnlyVisible","_x","autoInit","_y","autoResize","_z","renderExternal","_control","preventDefault","_initialized","_plugins","_defaultIndex","_horizontal","_circular","_bound","_adaptive","_needPanelThreshold","_deceleration","_duration","_easing","_inputType","_moveType","_threshold","_interruptable","_bounce","_iOSEdgeSwipeThreshold","_preventClickOnDrag","_disableOnInit","_renderOnlyVisible","_autoResize","_autoInit","_renderExternal","_viewport","Viewport","_renderer","_createRenderer","_camera","_createCamera","_createControl","bind","_moveToInitialPanel","addEventListener","_preventClickWhenDragged","disableInput","plugin","removeEventListener","includePanelHTML","visiblePanelsOnly","status","panelInfo","html","outerHTML","getProgressInPanel","visibleOffset","batchRemove","batchInsert","panelIndex","newCameraPos","plugins","foundIndex","prevWidth","prevHeight","prevProgressInPanel","forceRenderAllPanels","updatePanelSize","updateAlignPos","updatePosition","sizeChanged","insert","moveTypes","moveTypeStr","moveTypeOptions","JSON","stringify","SnapControl","FreeControl","cameraOption","console","warn","CircularCamera","BoundCamera","LinearCamera","renderingStrategy","VisibleRenderingStrategy","rendererOptions","VanillaRenderer","initialPanel","Flicking","Component","_externalComponent","externalComponent","Core","Constants"],"mappings":"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"}