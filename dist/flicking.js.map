{"version":3,"file":"flicking.js","sources":["../src/core/FlickingError.ts","../src/const/error.ts","../src/const/external.ts","../src/utils.ts","../src/core/Viewport.ts","../src/const/axes.ts","../src/control/states/State.ts","../src/control/states/IdleState.ts","../src/control/states/HoldingState.ts","../src/control/states/DraggingState.ts","../src/control/states/AnimatingState.ts","../src/control/states/DisabledState.ts","../src/control/StateMachine.ts","../src/control/AxesController.ts","../src/control/Control.ts","../src/control/SnapControl.ts","../src/control/FreeControl.ts","../src/control/StrictControl.ts","../src/control/index.ts","../src/core/AnchorPoint.ts","../src/camera/Camera.ts","../src/camera/LinearCamera.ts","../src/camera/CircularCamera.ts","../src/camera/BoundCamera.ts","../src/camera/index.ts","../src/renderer/RenderingStrategy/RawRenderingStrategy.ts","../src/renderer/Renderer.ts","../src/core/panel/Panel.ts","../src/core/panel/ElementPanel.ts","../src/renderer/VanillaRenderer.ts","../src/renderer/ExternalRenderer.ts","../src/renderer/RenderingStrategy/VisibleRenderingStrategy.ts","../src/renderer/index.ts","../src/Flicking.ts","../src/core/panel/ExternalPanel.ts","../src/core/index.ts","../src/cfc/withFlickingMethods.ts","../src/cfc/sync.ts","../src/cfc/getRenderingPanels.ts","../src/cfc/getDefaultCameraTransform.ts","../src/index.umd.ts"],"sourcesContent":["/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n\n/**\n * Special type of known error that {@link Flicking} throws.\n * @ko Flicking 내부에서 알려진 오류 발생시 throw되는 에러\n * @property {number} code Error code<ko>에러 코드</ko>\n * @property {string} message Error message<ko>에러 메시지</ko>\n * @see {@link Constants.ERROR_CODE ERROR_CODE}\n * @example\n * ```ts\n * import Flicking, { FlickingError, ERROR_CODES } from \"@egjs/flicking\";\n * try {\n *   const flicking = new Flicking(\".flicking-viewport\")\n * } catch (e) {\n *   if (e instanceof FlickingError && e.code === ERROR_CODES.ELEMENT_NOT_FOUND) {\n *     console.error(\"Element not found\")\n *   }\n * }\n * ```\n */\nclass FlickingError extends Error {\n  /**\n   * @param message Error message<ko>에러 메시지</ko>\n   * @param code Error code<ko>에러 코드</ko>\n   */\n  public constructor(\n    public message: string,\n    public code: number) {\n    super(message);\n    Object.setPrototypeOf(this, FlickingError.prototype);\n    this.name = \"FlickingError\";\n  }\n}\n\nexport default FlickingError;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable @typescript-eslint/restrict-template-expressions */\n\n/**\n * Error codes of {@link FlickingError}. Below are the conditions where each error code occurs.\n * @ko {@link FlickingError}의 에러 코드. 아래는 각각의 에러 코드가 발생하는 조건입니다.\n * @name ERROR_CODE\n * @constant\n * @type object\n * @property {number} WRONG_TYPE Parameter type is wrong<ko>패러미터의 타입이 잘못되었을 경우</ko>\n * @property {number} ELEMENT_NOT_FOUND Element is not found inside page with the given CSS selector<ko>주어진 CSS selector로 페이지 내에서 해당 엘리먼트를 찾지 못했을 경우</ko>\n * @property {number} VAL_MUST_NOT_NULL Expected non-null value, but given `null` or `undefined`<ko>값을 기대했으나, `null`이나 `undefined`를 받은 경우</ko>\n * @property {number} NOT_ATTACHED_TO_FLICKING When Flicking's component is not initialized (i.e. {@link Flicking#init} is not called)<ko>Flicking 내부 컴포넌트가 초기화되지 않은 경우 ({@link Flicking#init}이 호출되지 않은 경우)</ko>\n * @property {number} WRONG_OPTION One of the options is wrong<ko>옵션들 중 잘못된 값이 있을 때</ko>\n * @property {number} INDEX_OUT_OF_RANGE When the given index is out of possible range<ko>인덱스가 주어진 범위를 벗어난 경우</ko>\n * @property {number} POSITION_NOT_REACHABLE When {@link Control#moveToPosition}'s position parameter is out of possible range.<ko>{@link Control#moveToPosition}의 `position` 패러미터가 도달 가능한 범위를 벗어난 경우</ko>\n * @property {number} TRANSFORM_NOT_SUPPORTED CSS `transform` property is not available(<=IE8) <ko>CSS `transform` 속성을 사용할 수 없는 경우(<=IE8)</ko>\n * @property {number} STOP_CALLED_BY_USER When the event's `stop()` is called by user.<ko>사용자에 의해 이벤트의 `stop()`이 호출된 경우</ko>\n * @property {number} ANIMATION_INTERRUPTED When the animation is interrupted by user.<ko>사용자에 의해 애니메이션이 중단된 경우</ko>\n * @property {number} ANIMATION_ALREADY_PLAYING When the animation is already playing.<ko>현재 애니메이션이 이미 진행중인 경우</ko>\n * @property {number} NOT_ALLOWED_IN_FRAMEWORK When the non-allowed method is called from frameworks (React, Angular, Vue...)\n * <ko>프레임워크(React, Angular, Vue ...)에서 사용 불가능한 메소드를 호출했을 경우</ko>\n * @property {number} NOT_INITIALIZED When the {@link Flicking#init} is not called before but is needed<ko>{@link Flicking#init}의 호출이 필요하나, 아직 호출되지 않았을 경우</ko>\n * @property {number} NO_ACTIVE When there're no active panel that flicking has selected. This may be due to the absence of any panels<ko>현재 Flicking이 선택한 패널이 없을 경우. 일반적으로 패널이 하나도 없는 경우에 발생할 수 있습니다</ko>\n */\nexport const CODE = {\n  WRONG_TYPE: 0,\n  ELEMENT_NOT_FOUND: 1,\n  VAL_MUST_NOT_NULL: 2,\n  NOT_ATTACHED_TO_FLICKING: 3,\n  WRONG_OPTION: 4,\n  INDEX_OUT_OF_RANGE: 5,\n  POSITION_NOT_REACHABLE: 6,\n  TRANSFORM_NOT_SUPPORTED: 7,\n  STOP_CALLED_BY_USER: 8,\n  ANIMATION_INTERRUPTED: 9,\n  ANIMATION_ALREADY_PLAYING: 10,\n  NOT_ALLOWED_IN_FRAMEWORK: 11,\n  NOT_INITIALIZED: 12,\n  NO_ACTIVE: 13\n} as const;\n\nexport const MESSAGE = {\n  WRONG_TYPE: (wrongVal: any, correctTypes: string[]) => `${wrongVal}(${typeof wrongVal}) is not a ${correctTypes.map(type => `\"${type}\"`).join(\" or \")}.`,\n  ELEMENT_NOT_FOUND: (selector: string) => `Element with selector \"${selector}\" not found.`,\n  VAL_MUST_NOT_NULL: (val: any, name: string) => `${name} should be provided. Given: ${val}`,\n  NOT_ATTACHED_TO_FLICKING: (name: string) => `${name} is not attached to the Flicking instance. \"init()\" should be called first.`,\n  WRONG_OPTION: (optionName: string, val: any) => `Option \"${optionName}\" is not in correct format, given: ${val}`,\n  INDEX_OUT_OF_RANGE: (val: number, min: number, max: number) => `Index \"${val}\" is out of range: should be between ${min} and ${max}.`,\n  POSITION_NOT_REACHABLE: (position: number) => `Position \"${position}\" is not reachable.`,\n  TRANSFORM_NOT_SUPPORTED: \"Browser does not support CSS transform.\",\n  STOP_CALLED_BY_USER: \"Event stop() is called by user.\",\n  ANIMATION_INTERRUPTED: \"Animation is interrupted by user input.\",\n  ANIMATION_ALREADY_PLAYING: \"Animation is already playing.\",\n  NOT_ALLOWED_IN_FRAMEWORK: \"This behavior is not allowed in the frameworks like React, Vue, or Angular.\",\n  NOT_INITIALIZED: \"Flicking is not initialized yet, call init() first.\",\n  NO_ACTIVE: \"There's no active panel that Flicking has selected. This may be due to the absence of any panels.\"\n} as const;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nexport { CODE as ERROR_CODE } from \"./error\";\n\n/**\n * Event type object with event name strings of {@link Flicking}\n * @ko {@link Flicking}의 이벤트 이름 문자열들을 담은 객체\n * @type {object}\n * @property {\"holdStart\"} HOLD_START holdStart event<ko>holdStart 이벤트</ko>\n * @property {\"holdEnd\"} HOLD_END holdEnd event<ko>holdEnd 이벤트</ko>\n * @property {\"moveStart\"} MOVE_START moveStart event<ko>moveStart 이벤트</ko>\n * @property {\"move\"} MOVE move event<ko>move 이벤트</ko>\n * @property {\"moveEnd\"} MOVE_END moveEnd event<ko>moveEnd 이벤트</ko>\n * @property {\"willChange\"} WILL_CHANGE willChange event<ko>willChange 이벤트</ko>\n * @property {\"changed\"} CHANGED changed event<ko>changed 이벤트</ko>\n * @property {\"willRestore\"} WILL_RESTORE willRestore event<ko>willRestore 이벤트</ko>\n * @property {\"restored\"} RESTORED restored event<ko>restored 이벤트</ko>\n * @property {\"select\"} SELECT select event<ko>select 이벤트</ko>\n * @property {\"needPanel\"} NEED_PANEL needPanel event<ko>needPanel 이벤트</ko>\n * @property {\"panelChange\"} PANEL_CHANGE panelChange event<ko>panelChange 이벤트</ko>\n * @example\n * ```ts\n * import { EVENTS } from \"@egjs/flicking\";\n * EVENTS.MOVE_START; // \"moveStart\"\n * ```\n */\nexport const EVENTS = {\n  READY: \"ready\",\n  BEFORE_RESIZE: \"beforeResize\",\n  AFTER_RESIZE: \"afterResize\",\n  HOLD_START: \"holdStart\",\n  HOLD_END: \"holdEnd\",\n  MOVE_START: \"moveStart\",\n  MOVE: \"move\",\n  MOVE_END: \"moveEnd\",\n  WILL_CHANGE: \"willChange\",\n  CHANGED: \"changed\",\n  WILL_RESTORE: \"willRestore\",\n  RESTORED: \"restored\",\n  SELECT: \"select\",\n  NEED_PANEL: \"needPanel\",\n  VISIBLE_CHANGE: \"visibleChange\",\n  REACH_EDGE: \"reachEdge\",\n  PANEL_CHANGE: \"panelChange\"\n} as const;\n\n/**\n * An object with all possible predefined literal string for the {@link Flicking#align align} option\n * @ko {@link Flicking#align align} 옵션에 사용되는 미리 정의된 리터럴 상수들을 담고 있는 객체\n * @type {object}\n * @property {\"prev\"} PREV left/top align<ko>좌/상 정렬</ko>\n * @property {\"center\"} CENTER center align<ko>중앙 정렬</ko>\n * @property {\"next\"} NEXT right/bottom align<ko>우/하 정렬</ko>\n */\nexport const ALIGN = {\n  PREV: \"prev\",\n  CENTER: \"center\",\n  NEXT: \"next\"\n} as const;\n\n/**\n * An object of directions\n * @ko 방향을 나타내는 값들을 담고 있는 객체\n * @type {object}\n * @property {\"PREV\"} PREV \"left\" when {@link Flicking#horizontal horizontal} is true, and \"top\" when {@link Flicking#horizontal horizontal} is false\n * <ko>{@link Flicking#horizontal horizontal}가 `true`일 경우 왼쪽, {@link Flicking#horizontal horizontal}가 `false`일 경우 위쪽을 의미합니다</ko>\n * @property {\"NEXT\"} NEXT \"right\" when {@link Flicking#horizontal horizontal} is true, and \"bottom\" when {@link Flicking#horizontal horizontal} is false\n * <ko>{@link Flicking#horizontal horizontal}가 `true`일 경우 오른쪽, {@link Flicking#horizontal horizontal}가 `false`일 경우 아래쪽을 의미합니다</ko>\n * @property {null} NONE This value usually means it's the same position<ko>주로 제자리인 경우를 의미합니다</ko>\n */\nexport const DIRECTION = {\n  PREV: \"PREV\",\n  NEXT: \"NEXT\",\n  NONE: null\n} as const;\n\n/**\n * An object with all possible {@link Flicking#moveType moveType}s\n * @ko Flicking이 제공하는 {@link Flicking#moveType moveType}들을 담고 있는 객체\n * @type {object}\n * @property {\"snap\"} SNAP Flicking's {@link Flicking#moveType moveType} that enables {@link SnapControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link SnapControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n * @property {\"freeScroll\"} FREE_SCROLL Flicking's {@link Flicking#moveType moveType} that enables {@link FreeControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link FreeControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n * @property {\"strict\"} STRICT Flicking's {@link Flicking#moveType moveType} that enables {@link StrictControl} as a Flicking's {@link Flicking#control control}\n * <ko>Flicking의 {@link Flicking#control control}을 {@link StrictControl}로 설정하게 하는 {@link Flicking#moveType moveType}</ko>\n */\nexport const MOVE_TYPE = {\n  SNAP: \"snap\",\n  FREE_SCROLL: \"freeScroll\",\n  STRICT: \"strict\"\n} as const;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking, { FlickingOptions } from \"./Flicking\";\nimport FlickingError from \"./core/FlickingError\";\nimport * as ERROR from \"./const/error\";\nimport { ALIGN, DIRECTION } from \"./const/external\";\nimport { LiteralUnion, Merged, ValueOf } from \"./type/internal\";\nimport { ElementLike } from \"./type/external\";\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport const merge = <From extends object, To extends object>(target: From, ...sources: To[]): Merged<From, To> => {\n  sources.forEach(source => {\n    Object.keys(source).forEach(key => {\n      target[key] = source[key] as unknown;\n    });\n  });\n\n  return target as Merged<From, To>;\n};\n\nexport const getElement = (el: HTMLElement | string | null, parent?: HTMLElement): HTMLElement => {\n  let targetEl: HTMLElement | null = null;\n\n  if (isString(el)) {\n    const parentEl = parent ? parent : document;\n    const queryResult = parentEl.querySelector(el);\n    if (!queryResult) {\n      throw new FlickingError(ERROR.MESSAGE.ELEMENT_NOT_FOUND(el), ERROR.CODE.ELEMENT_NOT_FOUND);\n    }\n    targetEl = queryResult as HTMLElement;\n  } else if (el && el.nodeType === Node.ELEMENT_NODE) {\n    targetEl = el;\n  }\n\n  if (!targetEl) {\n    throw new FlickingError(ERROR.MESSAGE.WRONG_TYPE(el, [\"HTMLElement\", \"string\"]), ERROR.CODE.WRONG_TYPE);\n  }\n\n  return targetEl;\n};\n\nexport const checkExistence = (value: any, nameOnErrMsg: string) => {\n  if (value == null) {\n    throw new FlickingError(ERROR.MESSAGE.VAL_MUST_NOT_NULL(value, nameOnErrMsg), ERROR.CODE.VAL_MUST_NOT_NULL);\n  }\n};\n\nexport const clamp = (x: number, min: number, max: number) => Math.max(Math.min(x, max), min);\n\nexport const getFlickingAttached = (val: Flicking | null, nameToThrowOnError: string): Flicking => {\n  if (!val) {\n    throw new FlickingError(ERROR.MESSAGE.NOT_ATTACHED_TO_FLICKING(nameToThrowOnError), ERROR.CODE.NOT_ATTACHED_TO_FLICKING);\n  }\n\n  return val;\n};\n\nexport const toArray = <T>(iterable: ArrayLike<T>): T[] => [].slice.call(iterable) as T[];\n\nexport const parseAlign = (align: LiteralUnion<ValueOf<typeof ALIGN>> | number, size: number): number => {\n  let alignPoint: number | null;\n  if (isString(align)) {\n    switch (align) {\n      case ALIGN.PREV:\n        alignPoint = 0;\n        break;\n      case ALIGN.CENTER:\n        alignPoint = 0.5 * size;\n        break;\n      case ALIGN.NEXT:\n        alignPoint = size;\n        break;\n      default:\n        alignPoint = parseArithmeticSize(align, size);\n        if (alignPoint == null) {\n          throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"align\", align), ERROR.CODE.WRONG_OPTION);\n        }\n    }\n  } else {\n    alignPoint = align as number;\n  }\n\n  return alignPoint;\n};\n\nexport const parseBounce = (bounce: FlickingOptions[\"bounce\"], size: number): number[] => {\n  let parsedBounce: Array<number | null>;\n\n  if (Array.isArray(bounce)) {\n    parsedBounce = (bounce as string[]).map(val => parseArithmeticSize(val, size));\n  } else {\n    const parsedVal = parseArithmeticSize(bounce, size);\n\n    parsedBounce = [parsedVal, parsedVal];\n  }\n\n  return parsedBounce.map(val => {\n    if (val == null) {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"bounce\", bounce), ERROR.CODE.WRONG_OPTION);\n    }\n    return val;\n  });\n};\n\nexport const parseArithmeticSize = (cssValue: number | string, base: number): number | null => {\n  const parsed = parseArithmeticExpression(cssValue);\n\n  if (parsed == null) return null;\n\n  return parsed.percentage * base + parsed.absolute;\n};\n\nexport const parseArithmeticExpression = (cssValue: number | string): { percentage: number; absolute: number } | null => {\n  const cssRegex = /(?:(\\+|\\-)\\s*)?(\\d+(?:\\.\\d+)?(%|px)?)/g;\n\n  if (typeof cssValue === \"number\") {\n    return { percentage: 0, absolute: cssValue };\n  }\n\n  const parsed = {\n    percentage: 0,\n    absolute: 0\n  };\n  let idx = 0;\n  let matchResult = cssRegex.exec(cssValue);\n  while (matchResult != null) {\n    let sign = matchResult[1];\n    const value = matchResult[2];\n    const unit = matchResult[3];\n    const parsedValue = parseFloat(value);\n\n    if (idx <= 0) {\n      sign = sign || \"+\";\n    }\n\n    // Return default value for values not in good form\n    if (!sign) {\n      return null;\n    }\n\n    const signMultiplier = sign === \"+\" ? 1 : -1;\n\n    if (unit === \"%\") {\n      parsed.percentage += signMultiplier * (parsedValue / 100);\n    } else {\n      parsed.absolute += signMultiplier * parsedValue;\n    }\n\n    // Match next occurrence\n    ++idx;\n    matchResult = cssRegex.exec(cssValue);\n  }\n\n  // None-matched\n  if (idx === 0) {\n    return null;\n  }\n\n  return parsed;\n};\n\nexport const parseCSSSizeValue = (val: string | number): string => isString(val) ? val : `${val}px`;\n\nexport const getDirection = (start: number, end: number): ValueOf<typeof DIRECTION> => {\n  if (start === end) return DIRECTION.NONE;\n  return start < end ? DIRECTION.NEXT : DIRECTION.PREV;\n};\n\nexport const parseElement = (element: ElementLike | ElementLike[]): HTMLElement[] => {\n  if (!Array.isArray(element)) {\n    element = [element];\n  }\n\n  const elements: HTMLElement[] = [];\n  element.forEach(el => {\n    if (isString(el)) {\n      const tempDiv = document.createElement(\"div\");\n      tempDiv.innerHTML = el;\n\n      elements.push(...toArray(tempDiv.children) as HTMLElement[]);\n      while (tempDiv.firstChild) {\n        tempDiv.removeChild(tempDiv.firstChild);\n      }\n    } else if (el && el.nodeType === Node.ELEMENT_NODE) {\n      elements.push(el);\n    } else {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_TYPE(el, [\"HTMLElement\", \"string\"]), ERROR.CODE.WRONG_TYPE);\n    }\n  });\n\n  return elements;\n};\n\nexport const getMinusCompensatedIndex = (idx: number, max: number) => idx < 0 ? clamp(idx + max, 0, max) : clamp(idx, 0, max);\n\nexport const includes = <T>(array: T[], target: any): target is T => {\n  for (const val of array) {\n    if (val === target) return true;\n  }\n  return false;\n};\n\nexport const isString = (val: any): val is string => typeof val === \"string\";\n\nexport const circulatePosition = (pos: number, min: number, max: number) => {\n  const size = max - min;\n\n  if (pos < min) {\n    const offset = (min - pos) % size;\n    pos = max - offset;\n  } else if (pos > max) {\n    const offset = (pos - max) % size;\n    pos = min + offset;\n  }\n\n  return pos;\n};\n\nexport const find = <T>(array: T[], checker: (val: T) => boolean): T | null => {\n  for (const val of array) {\n    if (checker(val)) {\n      return val;\n    }\n  }\n\n  return null;\n};\n\nexport const findRight = <T>(array: T[], checker: (val: T) => boolean): T | null => {\n  for (let idx = array.length - 1; idx >= 0; idx--) {\n    const val = array[idx];\n    if (checker(val)) {\n      return val;\n    }\n  }\n\n  return null;\n};\n\nexport const findIndex = <T>(array: T[], checker: (val: T) => boolean): number => {\n  for (let idx = 0; idx < array.length; idx++) {\n    if (checker(array[idx])) {\n      return idx;\n    }\n  }\n\n  return -1;\n};\n\nexport const getProgress = (pos: number, prev: number, next: number) => (pos - prev) / (next - prev);\n\n// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\nexport const getStyle = (el: HTMLElement): CSSStyleDeclaration => window.getComputedStyle(el) || (el as any).currentStyle as CSSStyleDeclaration;\n\nexport const isBetween = (val: number, min: number, max: number) => val >= min && val <= max;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getStyle, isString } from \"../utils\";\n\n/**\n * A component that manages viewport size\n * @ko 뷰포트 크기 정보를 담당하는 컴포넌트\n */\nclass Viewport {\n  private _el: HTMLElement;\n  private _width: number;\n  private _height: number;\n  private _isBorderBoxSizing: boolean;\n  private _padding: {\n    left: number;\n    right: number;\n    top: number;\n    bottom: number;\n  };\n\n  /**\n   * A viewport(root) element\n   * @ko 뷰포트(root) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n\n  /**\n   * Viewport width, without paddings\n   * @ko 뷰포트 너비\n   * @type {number}\n   * @readonly\n   */\n  public get width() { return this._width - this._padding.left - this._padding.right; }\n  /**\n   * Viewport height, without paddings\n   * @ko 뷰포트 높이\n   * @type {number}\n   * @readonly\n   */\n  public get height() { return this._height - this._padding.top - this._padding.bottom; }\n  /**\n   * Viewport paddings\n   * @ko 뷰포트 CSS padding 값\n   * @type {object}\n   * @property {number} left CSS `padding-left`\n   * @property {number} right CSS `padding-right`\n   * @property {number} top CSS `padding-top`\n   * @property {number} bottom CSS `padding-bottom`\n   * @readonly\n   */\n  public get padding() { return this._padding; }\n\n  /**\n   * @param el A viewport element<ko>뷰포트 엘리먼트</ko>\n   */\n  public constructor(el: HTMLElement) {\n    this._el = el;\n    this._width = 0;\n    this._height = 0;\n    this._padding = {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 0\n    };\n    this._isBorderBoxSizing = false;\n  }\n\n  /**\n   * Change viewport's size.\n   * This will change the actual size of `.flicking-viewport` element by changing its CSS width/height property\n   * @ko 뷰포트 크기를 변경합니다.\n   * `.flicking-viewport` 엘리먼트에 해당 크기의 CSS width/height를 적용합니다\n   * @param {object} [size] New viewport size<ko>새 뷰포트 크기</ko>\n   * @param {number|string} [size.width] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   * @param {number|string} [size.height] CSS string or number(in px)<ko>CSS 문자열 또는 숫자(px)</ko>\n   */\n  public setSize({\n    width,\n    height\n  }: Partial<{\n    width: number | string;\n    height: number | string;\n  }>) {\n    const el = this._el;\n    const padding = this._padding;\n    const isBorderBoxSizing = this._isBorderBoxSizing;\n\n    if (width != null) {\n      if (isString(width)) {\n        el.style.width = width;\n      } else {\n        const newWidth = isBorderBoxSizing\n          ? width + padding.left + padding.right\n          : width;\n        el.style.width = `${newWidth}px`;\n      }\n    }\n    if (height != null) {\n      if (isString(height)) {\n        el.style.height = height;\n      } else {\n        const newHeight = isBorderBoxSizing\n          ? height + padding.top + padding.bottom\n          : height;\n        el.style.height = `${newHeight}px`;\n      }\n    }\n    this.resize();\n  }\n\n  /**\n   * Update width/height to the current viewport element's size\n   * @ko 현재 뷰포트 엘리먼트의 크기로 너비/높이를 업데이트합니다\n   */\n  public resize() {\n    const el = this._el;\n    const elStyle = getStyle(el);\n\n    this._width = el.clientWidth;\n    this._height = el.clientHeight;\n    this._padding = {\n      left: parseFloat(elStyle.paddingLeft),\n      right: parseFloat(elStyle.paddingRight),\n      top: parseFloat(elStyle.paddingTop),\n      bottom: parseFloat(elStyle.paddingBottom)\n    };\n    this._isBorderBoxSizing = elStyle.boxSizing === \"border-box\";\n  }\n}\n\nexport default Viewport;\n","/**\n * All possible @egjs/axes event keys\n * @internal\n */\nexport const EVENT = {\n  HOLD: \"hold\",\n  CHANGE: \"change\",\n  RELEASE: \"release\",\n  ANIMATION_END: \"animationEnd\",\n  FINISH: \"finish\"\n} as const;\n\n/**\n * An Axis key that Flicking uses\n * @internal\n */\nexport const POSITION_KEY = \"flick\";\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nimport { OnAnimationEnd, OnChange, OnFinish, OnHold, OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking from \"../../Flicking\";\nimport { EVENTS } from \"../../const/external\";\nimport * as AXES from \"../../const/axes\";\nimport { circulatePosition, getDirection } from \"../../utils\";\n\nexport enum STATE_TYPE {\n  IDLE,\n  HOLDING,\n  DRAGGING,\n  ANIMATING,\n  DISABLED\n}\n\n/**\n * A component that shows the current status of the user input or the animation\n * @ko 현재 사용자 입력 또는 애니메이션 상태를 나타내는 컴포넌트\n * @internal\n */\nabstract class State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract readonly holding: boolean;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract readonly animating: boolean;\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:hold hold} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onHold(ctx: {\n    flicking: Flicking;\n    axesEvent: OnHold;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:change change} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onChange(ctx: {\n    flicking: Flicking;\n    axesEvent: OnChange;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onRelease(ctx: {\n    flicking: Flicking;\n    axesEvent: OnRelease;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} event of Axes\n   * <ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:animationEnd animationEnd} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onAnimationEnd(ctx: {\n    flicking: Flicking;\n    axesEvent: OnAnimationEnd;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  /**\n   * An event handler for Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트 핸들러\n   * @param {object} [ctx] Event context<ko>이벤트 콘텍스트</ko>\n   * @param {Flicking} [ctx.flicking] An instance of Flicking<ko>Flicking 인스턴스</ko>\n   * @param {object} [ctx.axesEvent] A {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} event of Axes<ko>Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:finish finish} 이벤트</ko>\n   * @param {function} [ctx.transitTo] A function for changing current state to other state<ko>다른 상태로 변경하기 위한 함수</ko>\n   * @return {void}\n   */\n  public onFinish(ctx: {\n    flicking: Flicking;\n    axesEvent: OnFinish;\n    transitTo: (nextState: STATE_TYPE) => State;\n  }): void {\n    // DO NOTHING\n  }\n\n  protected _moveToChangedPosition(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    if (!axesEvent.delta[AXES.POSITION_KEY]) {\n      return;\n    }\n\n    const camera = flicking.camera;\n    const prevPosition = camera.position;\n    const position = axesEvent.pos[AXES.POSITION_KEY];\n    const newPosition = flicking.circularEnabled\n      ? circulatePosition(position, camera.range.min, camera.range.max)\n      : position;\n\n    void camera.lookAt(newPosition);\n\n    const moveEvent = new ComponentEvent(EVENTS.MOVE, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(0, axesEvent.delta[AXES.POSITION_KEY]),\n      axesEvent\n    });\n\n    flicking.trigger(moveEvent);\n\n    if (moveEvent.isCanceled()) {\n      // Return to previous position\n      void camera.lookAt(prevPosition);\n      transitTo(STATE_TYPE.DISABLED);\n    }\n  }\n}\n\nexport default State;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A default state when there's no user input and no animation's playing\n * @ko 사용자의 입력이 없고, 애니메이션이 동작하고있지 않은 기본 상태\n * @internal\n */\nclass IdleState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly animating = false;\n\n  public onHold(ctx: Parameters<State[\"onHold\"]>[0]): void {\n    // Shouldn't do any action until any panels on flicking area\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    if (flicking.renderer.panelCount <= 0) {\n      transitTo(STATE_TYPE.DISABLED);\n      return;\n    }\n\n    const holdStartEvent = new ComponentEvent(EVENTS.HOLD_START, {\n      axesEvent\n    });\n\n    flicking.trigger(holdStartEvent);\n\n    if (holdStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      transitTo(STATE_TYPE.HOLDING);\n    }\n  }\n\n  // By methods call\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n    const controller = flicking.control.controller;\n    const animatingContext = controller.animatingContext;\n\n    const moveStartEvent = new ComponentEvent(EVENTS.MOVE_START, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(animatingContext.start, animatingContext.end),\n      axesEvent\n    });\n    flicking.trigger(moveStartEvent);\n\n    if (moveStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      // Trigger AnimatingState's onChange, to trigger \"move\" event immediately\n      transitTo(STATE_TYPE.ANIMATING).onChange(ctx);\n    }\n  }\n}\n\nexport default IdleState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Panel from \"../../core/panel/Panel\";\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when user's holding the Flicking area, but not moved a single pixel yet\n * @ko 사용자의 입력이 시작되었으나, 아직 움직이지는 않은 상태\n * @internal\n */\nclass HoldingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly holding = true;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly animating = false;\n\n  private _releaseEvent: OnRelease | null = null;\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    const inputEvent = axesEvent.inputEvent as { offsetX: number; offsetY: number };\n\n    const offset = flicking.horizontal\n      ? inputEvent.offsetX\n      : inputEvent.offsetY;\n\n    const moveStartEvent = new ComponentEvent(EVENTS.MOVE_START, {\n      isTrusted: axesEvent.isTrusted,\n      holding: this.holding,\n      direction: getDirection(0, -offset),\n      axesEvent\n    });\n    flicking.trigger(moveStartEvent);\n\n    if (moveStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      // Trigger DraggingState's onChange, to trigger \"move\" event immediately\n      transitTo(STATE_TYPE.DRAGGING).onChange(ctx);\n    }\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    flicking.trigger(new ComponentEvent(EVENTS.HOLD_END, { axesEvent }));\n\n    if (axesEvent.delta.flick !== 0) {\n      // Sometimes \"release\" event on axes triggered before \"change\" event\n      // Especially if user flicked panel fast in really short amount of time\n      // if delta is not zero, that means above case happened.\n\n      // Event flow should be HOLD_START -> MOVE_START -> MOVE -> HOLD_END\n      // At least one move event should be included between holdStart and holdEnd\n      axesEvent.setTo({ flick: flicking.camera.position }, 0);\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    // Can't handle select event here,\n    // As \"finish\" axes event happens\n    this._releaseEvent = axesEvent;\n  }\n\n  public onFinish(ctx: Parameters<State[\"onFinish\"]>[0]): void {\n    const { flicking, transitTo } = ctx;\n\n    // Should transite to IDLE state before select event\n    // As user expects hold is already finished\n    transitTo(STATE_TYPE.IDLE);\n\n    if (!this._releaseEvent) {\n      return;\n    }\n\n    // Handle release event here\n    // To prevent finish event called twice\n    const releaseEvent = this._releaseEvent;\n\n    // Static click\n    /* eslint-disable @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access */\n    const srcEvent = releaseEvent.inputEvent.srcEvent;\n\n    let clickedElement: HTMLElement;\n    if (srcEvent.type === \"touchend\") {\n      const touchEvent = srcEvent as TouchEvent;\n      const touch = touchEvent.changedTouches[0];\n      clickedElement = document.elementFromPoint(touch.clientX, touch.clientY) as HTMLElement;\n    } else {\n      clickedElement = srcEvent.target;\n    }\n    /* eslint-enable */\n\n    const panels = flicking.renderer.panels;\n    let clickedPanel: Panel | null = null;\n\n    for (const panel of panels) {\n      if (panel.contains(clickedElement)) {\n        clickedPanel = panel;\n        break;\n      }\n    }\n\n    if (clickedPanel) {\n      const cameraPosition = flicking.camera.position;\n      const clickedPanelPosition = clickedPanel.position;\n\n      flicking.trigger(new ComponentEvent(EVENTS.SELECT, {\n        index: clickedPanel.index,\n        panel: clickedPanel,\n        // Direction to the clicked panel\n        direction: getDirection(cameraPosition, clickedPanelPosition)\n      }));\n    }\n  }\n}\n\nexport default HoldingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport * as AXES from \"../../const/axes\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when user's dragging the Flicking area\n * @ko 사용자가 드래깅중인 상태\n * @internal\n */\nclass DraggingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly holding = true;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    this._moveToChangedPosition(ctx);\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    // Update last position to cope with Axes's animating behavior\n    // Axes uses start position when animation start\n    flicking.trigger(new ComponentEvent(EVENTS.HOLD_END, {\n      axesEvent\n    }));\n\n    if (flicking.renderer.panelCount <= 0) {\n      // There're no panels\n      transitTo(STATE_TYPE.IDLE);\n      return;\n    }\n\n    transitTo(STATE_TYPE.ANIMATING);\n\n    const control = flicking.control;\n    const position = axesEvent.destPos[AXES.POSITION_KEY];\n    const duration = Math.max(axesEvent.duration, flicking.duration);\n\n    void control.moveToPosition(position, duration, axesEvent);\n  }\n}\n\nexport default DraggingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport { EVENTS } from \"../../const/external\";\nimport { getDirection } from \"../../utils\";\n\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when Flicking's animating by user input or method call\n * @ko 사용자 입력이나 메소드 호출에 의해 Flicking의 애니메이션이 동작중인 상태\n * @internal\n */\nclass AnimatingState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onHold(ctx: Parameters<State[\"onHold\"]>[0]): void {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    flicking.control.updateInput();\n    const holdStartEvent = new ComponentEvent(EVENTS.HOLD_START, { axesEvent });\n    flicking.trigger(holdStartEvent);\n\n    if (holdStartEvent.isCanceled()) {\n      transitTo(STATE_TYPE.DISABLED);\n    } else {\n      transitTo(STATE_TYPE.DRAGGING);\n    }\n  }\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    this._moveToChangedPosition(ctx);\n  }\n\n  public onFinish(ctx: Parameters<State[\"onFinish\"]>[0]) {\n    const { flicking, axesEvent, transitTo } = ctx;\n\n    transitTo(STATE_TYPE.IDLE);\n\n    const controller = flicking.control.controller;\n    const animatingContext = controller.animatingContext;\n\n    flicking.trigger(new ComponentEvent(EVENTS.MOVE_END, {\n      isTrusted: axesEvent.isTrusted,\n      direction: getDirection(animatingContext.start, animatingContext.end),\n      axesEvent\n    }));\n  }\n}\n\nexport default AnimatingState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport State, { STATE_TYPE } from \"./State\";\n\n/**\n * A state that activates when Flicking is stopped by event's `stop` method\n * @ko 이벤트의 `stop`호출에 의해 Flicking이 정지된 상태\n * @internal\n */\nclass DisabledState extends State {\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {false}\n   * @readonly\n   */\n  public readonly holding = false;\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {true}\n   * @readonly\n   */\n  public readonly animating = true;\n\n  public onAnimationEnd(ctx: Parameters<State[\"onAnimationEnd\"]>[0]): void {\n    const { transitTo } = ctx;\n\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onChange(ctx: Parameters<State[\"onChange\"]>[0]): void {\n    const { axesEvent, transitTo } = ctx;\n\n    // Can stop Axes's change event\n    axesEvent.stop();\n\n    transitTo(STATE_TYPE.IDLE);\n  }\n\n  public onRelease(ctx: Parameters<State[\"onRelease\"]>[0]): void {\n    const { axesEvent, transitTo } = ctx;\n\n    // This is needed when stopped hold start event\n    if (axesEvent.delta.flick === 0) {\n      transitTo(STATE_TYPE.IDLE);\n    }\n  }\n}\n\nexport default DisabledState;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { AxesEvents } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport * as AXES from \"../const/axes\";\n\nimport IdleState from \"./states/IdleState\";\nimport HoldingState from \"./states/HoldingState\";\nimport DraggingState from \"./states/DraggingState\";\nimport AnimatingState from \"./states/AnimatingState\";\nimport DisabledState from \"./states/DisabledState\";\nimport State, { STATE_TYPE } from \"./states/State\";\n\n/**\n * @internal\n */\nclass StateMachine {\n  private _state: State;\n\n  public get state(): State { return this._state; }\n\n  public constructor() {\n    this._state = new IdleState();\n  }\n\n  public fire(eventType: keyof AxesEvents, externalCtx: {\n    flicking: Flicking;\n    axesEvent: any;\n  }) {\n    const currentState = this._state;\n    const ctx = { ...externalCtx, transitTo: this.transitTo };\n\n    switch (eventType) {\n      case AXES.EVENT.HOLD:\n        currentState.onHold(ctx);\n        break;\n      case AXES.EVENT.CHANGE:\n        currentState.onChange(ctx);\n        break;\n      case AXES.EVENT.RELEASE:\n        currentState.onRelease(ctx);\n        break;\n      case AXES.EVENT.ANIMATION_END:\n        currentState.onAnimationEnd(ctx);\n        break;\n      case AXES.EVENT.FINISH:\n        currentState.onFinish(ctx);\n        break;\n    }\n  }\n\n  public transitTo = (nextStateType: STATE_TYPE): State => {\n    let nextState: State;\n\n    switch (nextStateType) {\n      case STATE_TYPE.IDLE:\n        nextState = new IdleState();\n        break;\n      case STATE_TYPE.HOLDING:\n        nextState = new HoldingState();\n        break;\n      case STATE_TYPE.DRAGGING:\n        nextState = new DraggingState();\n        break;\n      case STATE_TYPE.ANIMATING:\n        nextState = new AnimatingState();\n        break;\n      case STATE_TYPE.DISABLED:\n        nextState = new DisabledState();\n        break;\n    }\n\n    this._state = nextState;\n\n    return this._state;\n  };\n}\n\nexport default StateMachine;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Axes, { PanInput, AxesEvents, OnRelease } from \"@egjs/axes\";\n\nimport Flicking from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport * as AXES from \"../const/axes\";\nimport * as ERROR from \"../const/error\";\nimport { getFlickingAttached, parseBounce } from \"../utils\";\nimport { ControlParams } from \"../type/external\";\n\nimport StateMachine from \"./StateMachine\";\n\n/**\n * A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events\n * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트\n * @internal\n */\nclass AxesController {\n  private _flicking: Flicking | null;\n  private _axes: Axes | null;\n  private _panInput: PanInput | null;\n  private _stateMachine: StateMachine;\n\n  private _animatingContext: { start: number; end: number; offset: number };\n  private _dragged: boolean;\n\n  /**\n   * An {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes}의 인스턴스\n   * @type {Axes}\n   * @see https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html\n   * @readonly\n   */\n  public get axes() { return this._axes; }\n  /**\n   * A activated {@link State} that shows the current status of the user input or the animation\n   * @ko 현재 활성화된 {@link State} 인스턴스로 사용자 입력 또는 애니메이션 상태를 나타냅니다\n   * @type {State}\n   */\n  public get state() { return this._stateMachine.state; }\n  /**\n   * A context of the current animation playing\n   * @ko 현재 재생중인 애니메이션 정보\n   * @type {object}\n   * @property {number} start A start position of the animation<ko>애니메이션 시작 지점</ko>\n   * @property {number} end A end position of the animation<ko>애니메이션 끝 지점</ko>\n   * @property {number} offset camera offset<ko>카메라 오프셋</ko>\n   * @readonly\n   */\n  public get animatingContext() { return this._animatingContext; }\n  /**\n   * A current control parameters of the Axes instance\n   * @ko 활성화된 현재 Axes 패러미터들\n   * @type {ControlParams}\n   */\n  public get controlParams(): ControlParams {\n    const axes = this._axes;\n\n    if (!axes) {\n      return {\n        range: { min: 0, max: 0 },\n        position: 0,\n        circular: false\n      };\n    }\n\n    const axis = axes.axis[AXES.POSITION_KEY];\n\n    return {\n      range: { min: axis.range![0], max: axis.range![1] },\n      circular: (axis.circular as boolean[])[0],\n      position: this.position\n    };\n  }\n\n  /**\n   * A Boolean indicating whether the user input is enabled\n   * @ko 현재 사용자 입력이 활성화되었는지를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get enabled() { return this._panInput?.isEnable() ?? false; }\n  /**\n   * Current position value in {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} 인스턴스 내부의 현재 좌표 값\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._axes?.get([AXES.POSITION_KEY])[AXES.POSITION_KEY] ?? 0; }\n  /**\n   * Current range value in {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} instance\n   * @ko {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html Axes} 인스턴스 내부의 현재 이동 범위 값\n   * @type {number[]}\n   * @readonly\n   */\n  public get range() { return this._axes?.axis[AXES.POSITION_KEY].range ?? [0, 0]; }\n  /**\n   * Actual bounce size(px)\n   * @ko 적용된 bounce 크기(px 단위)\n   * @type {number[]}\n   * @readonly\n   */\n  public get bounce() { return this._axes?.axis[AXES.POSITION_KEY].bounce as number[] | undefined; }\n\n  /** */\n  public constructor() {\n    this._resetInternalValues();\n    this._stateMachine = new StateMachine();\n  }\n\n  /**\n   * Initialize AxesController\n   * @ko AxesController를 초기화합니다\n   * @param {Flicking} flicking An instance of Flicking\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n\n    this._axes = new Axes({\n      [AXES.POSITION_KEY]: {\n        range: [0, 0],\n        circular: false,\n        bounce: [0, 0]\n      }\n    }, {\n      deceleration: flicking.deceleration,\n      interruptable: flicking.interruptable,\n      easing: flicking.easing\n    });\n    this._panInput = new PanInput(flicking.viewport.element, {\n      inputType: flicking.inputType,\n      iOSEdgeSwipeThreshold: flicking.iOSEdgeSwipeThreshold,\n      scale: flicking.horizontal ? [-1, 0] : [0, -1],\n      releaseOnScroll: true\n    });\n\n    const axes = this._axes;\n\n    axes.connect(flicking.horizontal ? [AXES.POSITION_KEY, \"\"] : [\"\", AXES.POSITION_KEY], this._panInput);\n\n    for (const key in AXES.EVENT) {\n      const eventType = AXES.EVENT[key] as keyof AxesEvents;\n\n      axes.on(eventType, (e: AxesEvents[typeof eventType]) => {\n        this._stateMachine.fire(eventType, {\n          flicking,\n          axesEvent: e\n        });\n      });\n    }\n\n    return this;\n  }\n\n  /**\n   * Destroy AxesController and return to initial state\n   * @ko AxesController를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this.removePreventClickHandler();\n\n    this._axes?.destroy();\n    this._panInput?.destroy();\n\n    this._resetInternalValues();\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @chainable\n   * @return {this}\n   */\n  public enable(): this {\n    this._panInput?.enable();\n\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @chainable\n   * @return {this}\n   */\n  public disable(): this {\n    this._panInput?.disable();\n\n    return this;\n  }\n\n  /**\n   * Update {@link https://naver.github.io/egjs-axes/ @egjs/axes}'s state\n   * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 상태를 갱신합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link AxesController#init init} is not called before\n   * <ko>{@link AxesController#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public update(controlParams: ControlParams): this {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const axes = this._axes!;\n    const axis = axes.axis[AXES.POSITION_KEY];\n\n    axis.circular = [controlParams.circular, controlParams.circular];\n    axis.range = [controlParams.range.min, controlParams.range.max];\n    axis.bounce = parseBounce(flicking.bounce, camera.size);\n\n    axes.axm.set({ [AXES.POSITION_KEY]: controlParams.position });\n\n    return this;\n  }\n\n  public addPreventClickHandler() {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const axes = this._axes!;\n    const cameraEl = flicking.camera.element;\n\n    axes.on(AXES.EVENT.HOLD, this._onAxesHold);\n    axes.on(AXES.EVENT.CHANGE, this._onAxesChange);\n    cameraEl.addEventListener(\"click\", this._preventClickWhenDragged, true);\n  }\n\n  public removePreventClickHandler() {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const axes = this._axes!;\n    const cameraEl = flicking.camera.element;\n\n    axes.off(AXES.EVENT.HOLD, this._onAxesHold);\n    axes.off(AXES.EVENT.CHANGE, this._onAxesChange);\n    cameraEl.removeEventListener(\"click\", this._preventClickWhenDragged, true);\n  }\n\n  /**\n   * Run Axes's {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#setTo setTo} using the given position\n   * @ko Axes의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#setTo setTo} 메소드를 주어진 좌표를 이용하여 수행합니다\n   * @param {number} position A position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {number} [axesEvent] If provided, it'll use its {@link https://naver#github#io/egjs-axes/release/latest/doc/eg#Axes#html#setTo setTo} method instead<ko>이 값이 주어졌을 경우, 해당 이벤트의 {@link https://naver#github#io/egjs-axes/release/latest/doc/eg#Axes#html#setTo setTo} 메소드를 대신해서 사용합니다.</ko>\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public animateTo(position: number, duration: number, axesEvent?: OnRelease): Promise<void> {\n    const axes = this._axes;\n\n    if (!axes) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.NOT_ATTACHED_TO_FLICKING(\"Control\"), ERROR.CODE.NOT_ATTACHED_TO_FLICKING));\n    }\n\n    const startPos = axes.get([AXES.POSITION_KEY])[AXES.POSITION_KEY];\n\n    if (startPos === position) {\n      const flicking = getFlickingAttached(this._flicking, \"Control\");\n\n      return flicking.camera.lookAt(position);\n    }\n\n    this._animatingContext = {\n      start: startPos,\n      end: position,\n      offset: 0\n    };\n\n    const animate = () => {\n      const resetContext = () => {\n        this._animatingContext = { start: 0, end: 0, offset: 0 };\n      };\n\n      axes.once(AXES.EVENT.FINISH, resetContext);\n\n      if (axesEvent) {\n        axesEvent.setTo({ [AXES.POSITION_KEY]: position }, duration);\n      } else {\n        axes.setTo({ [AXES.POSITION_KEY]: position }, duration);\n      }\n    };\n\n    if (duration === 0) {\n      animate();\n      axes.axm.set({ [AXES.POSITION_KEY]: position });\n\n      return Promise.resolve();\n    } else {\n      return new Promise((resolve, reject) => {\n        const animationFinishHandler = () => {\n          axes.off(AXES.EVENT.HOLD, interruptionHandler);\n          resolve();\n        };\n\n        const interruptionHandler = () => {\n          axes.off(AXES.EVENT.FINISH, animationFinishHandler);\n          reject(new FlickingError(ERROR.MESSAGE.ANIMATION_INTERRUPTED, ERROR.CODE.ANIMATION_INTERRUPTED));\n        };\n\n        axes.once(AXES.EVENT.FINISH, animationFinishHandler);\n        axes.once(AXES.EVENT.HOLD, interruptionHandler);\n\n        animate();\n      });\n    }\n  }\n\n  private _resetInternalValues() {\n    this._flicking = null;\n    this._axes = null;\n    this._panInput = null;\n    this._animatingContext = { start: 0, end: 0, offset: 0 };\n    this._dragged = false;\n  }\n\n  private _onAxesHold = () => {\n    this._dragged = false;\n  };\n\n  private _onAxesChange = () => {\n    this._dragged = true;\n  };\n\n  private _preventClickWhenDragged = (e: MouseEvent) => {\n    if (this._dragged) {\n      e.preventDefault();\n      e.stopPropagation();\n    }\n\n    this._dragged = false;\n  };\n}\n\nexport default AxesController;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport Panel from \"../core/panel/Panel\";\nimport AxesController from \"../control/AxesController\";\nimport { DIRECTION, EVENTS } from \"../const/external\";\nimport * as ERROR from \"../const/error\";\nimport { getDirection, getFlickingAttached } from \"../utils\";\nimport { ValueOf } from \"../type/internal\";\n\n/**\n * A component that manages inputs and animation of Flicking\n * @ko Flicking의 입력 장치 & 애니메이션을 담당하는 컴포넌트\n */\nabstract class Control {\n  // Internal States\n  protected _flicking: Flicking | null;\n  protected _controller: AxesController;\n  protected _activePanel: Panel | null;\n\n  /**\n   * A controller that handles the {@link https://naver.github.io/egjs-axes/ @egjs/axes} events\n   * @ko {@link https://naver.github.io/egjs-axes/ @egjs/axes}의 이벤트를 처리하는 컨트롤러 컴포넌트\n   * @type {AxesController}\n   * @readonly\n   */\n  public get controller() { return this._controller; }\n  /**\n   * Index number of the {@link Flicking#currentPanel currentPanel}\n   * @ko {@link Flicking#currentPanel currentPanel}의 인덱스 번호\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get activeIndex() { return this._activePanel?.index ?? -1; }\n  /**\n   * An active panel\n   * @ko 현재 선택된 패널\n   * @type {Panel | null}\n   * @readonly\n   */\n  public get activePanel() { return this._activePanel; }\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get animating() { return this._controller.state.animating; }\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get holding() { return this._controller.state.holding; }\n\n  /** */\n  public constructor() {\n    this._flicking = null;\n    this._controller = new AxesController();\n    this._activePanel = null;\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @method\n   * @abstract\n   * @memberof Control\n   * @instance\n   * @name moveToPosition\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public abstract moveToPosition(position: number, duration: number, axesEvent?: OnRelease): Promise<void>;\n\n  /**\n   * Initialize Control\n   * @ko Control을 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n    this._controller.init(flicking);\n\n    return this;\n  }\n\n  /**\n   * Destroy Control and return to initial state\n   * @ko Control을 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this._controller.destroy();\n\n    this._flicking = null;\n    this._activePanel = null;\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @chainable\n   * @return {this}\n   */\n  public enable(): this {\n    this._controller.enable();\n\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @chainable\n   * @return {this}\n   */\n  public disable(): this {\n    this._controller.disable();\n\n    return this;\n  }\n\n  /**\n   * Update position after resizing\n   * @ko resize 이후에 position을 업데이트합니다\n   * @param {number} progressInPanel Previous camera's progress in active panel before resize<ko>Resize 이전 현재 선택된 패널 내에서의 카메라 progress 값</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {Promise<void>}\n   */\n  public async updatePosition(_progressInPanel: number): Promise<void> {   // eslint-disable-line @typescript-eslint/no-unused-vars\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    if (activePanel) {\n      await camera.lookAt(camera.clampToReachablePosition(activePanel.position));\n    }\n  }\n\n  /**\n   * Update {@link Control#controller controller}'s state\n   * @ko {@link Control#controller controller}의 내부 상태를 갱신합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateInput(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n\n    this._controller.update(camera.controlParams);\n\n    return this;\n  }\n\n  /**\n   * Reset {@link Control#activePanel activePanel} to `null`\n   * @ko {@link Control#activePanel activePanel}을 `null`로 초기화합니다\n   * @chainable\n   * @return {this}\n   */\n  public resetActive(): this {\n    this._activePanel = null;\n\n    return this;\n  }\n\n  /**\n   * Move {@link Camera} to the given panel\n   * @ko {@link Camera}를 해당 패널 위로 이동합니다\n   * @param {Panel} panel The target panel to move<ko>이동할 패널</ko>\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {number} duration Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @param {DIRECTION} [direction=DIRECTION.NONE] Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPanel(panel: Panel, {\n    duration,\n    direction = DIRECTION.NONE,\n    axesEvent\n  }: {\n    duration: number;\n    direction?: ValueOf<typeof DIRECTION>;\n    axesEvent?: OnRelease;\n  }) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n\n    let position = panel.position;\n    const nearestAnchor = camera.findNearestAnchor(position);\n\n    if (panel.removed || !nearestAnchor) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(panel.position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n    if (!camera.canReach(panel)) {\n      // Override position & panel if that panel is not reachable\n      position = nearestAnchor.position;\n      panel = nearestAnchor.panel;\n    } else if (flicking.circularEnabled) {\n      // Circular mode is enabled, find nearest distance to panel\n      const camPos = this._controller.position; // Actual position of the Axes\n      const camRangeDiff = camera.rangeDiff;\n      const possiblePositions = [position, position + camRangeDiff, position - camRangeDiff]\n        .filter(pos => {\n          if (direction === DIRECTION.NONE) return true;\n\n          return direction === DIRECTION.PREV\n            ? pos <= camPos\n            : pos >= camPos;\n        });\n\n      position = possiblePositions.reduce((nearestPosition, pos) => {\n        if (Math.abs(camPos - pos) < Math.abs(camPos - nearestPosition)) {\n          return pos;\n        } else {\n          return nearestPosition;\n        }\n      }, Infinity);\n    }\n\n    this._triggerIndexChangeEvent(panel, panel.position, axesEvent);\n\n    return this._animateToPosition({ position, duration, newActivePanel: panel, axesEvent });\n  }\n\n  protected _triggerIndexChangeEvent(panel: Panel, position: number, axesEvent?: OnRelease): void {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const triggeringEvent = panel !== this._activePanel ? EVENTS.WILL_CHANGE : EVENTS.WILL_RESTORE;\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    const event = new ComponentEvent(triggeringEvent, {\n      index: panel.index,\n      panel,\n      isTrusted: axesEvent?.isTrusted || false,\n      direction: getDirection(activePanel?.position ?? camera.position, position)\n    });\n    flicking.trigger(event);\n\n    if (event.isCanceled()) {\n      throw new FlickingError(ERROR.MESSAGE.STOP_CALLED_BY_USER, ERROR.CODE.STOP_CALLED_BY_USER);\n    }\n  }\n\n  protected async _animateToPosition({\n    position,\n    duration,\n    newActivePanel,\n    axesEvent\n  }: {\n    position: number;\n    duration: number;\n    newActivePanel: Panel;\n    axesEvent?: OnRelease;\n  }) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const currentPanel = this._activePanel;\n    const animate = () => this._controller.animateTo(position, duration, axesEvent);\n    const isTrusted = axesEvent?.isTrusted || false;\n\n    if (duration <= 0) {\n      const animation = animate();\n      this._setActive(newActivePanel, currentPanel, isTrusted);\n      return animation;\n    } else {\n      return animate().then(async () => {\n        this._setActive(newActivePanel, currentPanel, isTrusted);\n        await flicking.renderer.render();\n      }).catch(err => {\n        if (axesEvent && err instanceof FlickingError && err.code === ERROR.CODE.ANIMATION_INTERRUPTED) return;\n        throw err;\n      });\n    }\n  }\n\n  protected _setActive(newActivePanel: Panel, prevActivePanel: Panel | null, isTrusted: boolean) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n\n    this._activePanel = newActivePanel;\n\n    flicking.camera.updateAdaptiveHeight();\n\n    if (newActivePanel !== prevActivePanel) {\n      flicking.trigger(new ComponentEvent(EVENTS.CHANGED, {\n        index: newActivePanel.index,\n        panel: newActivePanel,\n        prevIndex: prevActivePanel?.index ?? -1,\n        prevPanel: prevActivePanel,\n        isTrusted,\n        direction: prevActivePanel ? getDirection(prevActivePanel.position, newActivePanel.position) : DIRECTION.NONE\n      }));\n    } else {\n      flicking.trigger(new ComponentEvent(EVENTS.RESTORED, {\n        isTrusted\n      }));\n    }\n  }\n}\n\nexport default Control;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport Panel from \"../core/panel/Panel\";\nimport FlickingError from \"../core/FlickingError\";\nimport { getFlickingAttached } from \"../utils\";\nimport * as ERROR from \"../const/error\";\n\nimport Control from \"./Control\";\n\n/**\n * A {@link Control} that uses a release momentum to choose destination panel\n * @ko 입력을 중단한 시점의 가속도에 영향받아 도달할 패널을 계산하는 이동 방식을 사용하는 {@link Control}\n */\nclass SnapControl extends Control {\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    const clampedPosition = camera.clampToReachablePosition(position);\n    const anchorAtPosition = camera.findNearestAnchor(clampedPosition);\n\n    if (!anchorAtPosition || !activePanel) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const prevPos = activePanel.position;\n\n    const isOverThreshold = Math.abs(position - prevPos) >= flicking.threshold;\n    const adjacentAnchor = (position > prevPos)\n      ? camera.getNextAnchor(anchorAtPosition)\n      : camera.getPrevAnchor(anchorAtPosition);\n\n    let targetPos: number;\n    let targetPanel: Panel;\n\n    if (isOverThreshold && anchorAtPosition.position !== activePanel.position) {\n      // Move to anchor at position\n      targetPanel = anchorAtPosition.panel;\n      targetPos = anchorAtPosition.position;\n    } else if (isOverThreshold && adjacentAnchor) {\n      // Move to adjacent anchor\n      targetPanel = adjacentAnchor.panel;\n      targetPos = adjacentAnchor.position;\n    } else {\n      // Restore to active panel\n      targetPos = camera.clampToReachablePosition(activePanel.position);\n      targetPanel = activePanel;\n    }\n\n    this._triggerIndexChangeEvent(targetPanel, position, axesEvent);\n\n    return this._animateToPosition({\n      position: targetPos,\n      duration,\n      newActivePanel: targetPanel,\n      axesEvent\n    });\n  }\n}\n\nexport default SnapControl;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport FlickingError from \"../core/FlickingError\";\nimport * as ERROR from \"../const/error\";\nimport { getFlickingAttached } from \"../utils\";\n\nimport Control from \"./Control\";\n\n/**\n * An options for the {@link FreeControl}\n * @ko {@link FreeControl} 생성시 사용되는 옵션\n * @interface\n * @property {boolean} stopAtEdge Make scroll animation to stop at the start/end of the scroll area, not going out the bounce area\n * <ko>스크롤 애니메이션을 스크롤 영역의 시작과 끝부분에서 멈추도록 하여, 바운스 영역을 넘어가지 않도록 합니다</ko>\n */\nexport interface FreeControlOptions {\n  stopAtEdge: boolean;\n}\n\n/**\n * A {@link Control} that can be scrolled freely without alignment\n * @ko 패널이 정해진 지점에 정렬되지 않고, 자유롭게 스크롤할 수 있는 이동 방식을 사용하는 {@link Control}\n */\nclass FreeControl extends Control {\n  private _stopAtEdge: FreeControlOptions[\"stopAtEdge\"];\n\n  /**\n   * Make scroll animation to stop at the start/end of the scroll area, not going out the bounce area\n   * @ko 스크롤 애니메이션을 스크롤 영역의 시작과 끝부분에서 멈추도록 하여, 바운스 영역을 넘어가지 않도록 합니다\n   * @type {boolean}\n   * @default true\n   */\n  public get stopAtEdge() { return this._stopAtEdge; }\n\n  public set stopAtEdge(val: FreeControlOptions[\"stopAtEdge\"]) { this._stopAtEdge = val; }\n\n  /** */\n  public constructor({\n    stopAtEdge = true\n  }: Partial<FreeControlOptions> = {}) {\n    super();\n\n    this._stopAtEdge = stopAtEdge;\n  }\n\n  /**\n   * Update position after resizing\n   * @ko resize 이후에 position을 업데이트합니다\n   * @param {number} progressInPanel Previous camera's progress in active panel before resize<ko>Resize 이전 현재 선택된 패널 내에서의 카메라 progress 값</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {Promise<void>}\n   */\n  public async updatePosition(progressInPanel: number): Promise<void> {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n\n    if (activePanel) {\n      const panelRange = activePanel.range;\n      const newPosition = panelRange.min + (panelRange.max - panelRange.min) * progressInPanel;\n\n      await camera.lookAt(camera.clampToReachablePosition(newPosition));\n    }\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n\n    const camera = flicking.camera;\n    const targetPos = camera.clampToReachablePosition(position);\n\n    const anchorAtPosition = camera.findAnchorIncludePosition(targetPos);\n\n    if (!anchorAtPosition) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const targetPanel = anchorAtPosition.panel;\n\n    // Trigger only change event\n    if (targetPanel !== this._activePanel) {\n      this._triggerIndexChangeEvent(targetPanel, position, axesEvent);\n    }\n\n    return this._animateToPosition({ position: this._stopAtEdge ? targetPos : position, duration, newActivePanel: targetPanel, axesEvent });\n  }\n}\n\nexport default FreeControl;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { OnRelease } from \"@egjs/axes\";\n\nimport Panel from \"../core/panel/Panel\";\nimport FlickingError from \"../core/FlickingError\";\nimport { clamp, getFlickingAttached, getMinusCompensatedIndex, isBetween } from \"../utils\";\nimport * as ERROR from \"../const/error\";\n\nimport Control from \"./Control\";\n/**\n * An options for the {@link StrictControl}\n * @ko {@link StrictControl} 생성시 사용되는 옵션\n * @interface\n * @property {number} count Maximum number of panels that can be moved at a time<ko>최대로 움직일 수 있는 패널의 개수</ko>\n */\nexport interface StrictControlOptions {\n  count: number;\n}\n\n/**\n * A {@link Control} that allow you to select the maximum number of panels to move at a time\n * @ko 한번에 최대로 이동할 패널의 개수를 선택 가능한 {@link Control}\n */\nclass StrictControl extends Control {\n  private _count: number;\n  private _indexRange: { min: number; max: number };\n\n  /**\n   * Maximum number of panels that can be moved at a time\n   * @ko 최대로 움직일 수 있는 패널의 개수\n   * @type {number}\n   * @default 1\n   */\n  public get count() { return this._count; }\n\n  public set count(val: StrictControlOptions[\"count\"]) { this._count = val; }\n\n  /** */\n  public constructor({\n    count = 1\n  }: Partial<StrictControlOptions> = {}) {\n    super();\n\n    this._count = count;\n    this._resetIndexRange();\n  }\n\n  /**\n   * Destroy Control and return to initial state\n   * @ko Control을 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy() {\n    super.destroy();\n\n    this._resetIndexRange();\n  }\n\n  /**\n   * Update {@link Control#controller controller}'s state\n   * @ko {@link Control#controller controller}의 내부 상태를 갱신합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateInput(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const renderer = flicking.renderer;\n    const controller = this._controller;\n    const controlParams = camera.controlParams;\n    const count = this._count;\n\n    const activePanel = controller.state.animating\n      ? camera.findNearestAnchor(camera.position)?.panel\n      : this._activePanel;\n\n    if (!activePanel) {\n      controller.update(controlParams);\n      this._resetIndexRange();\n      return this;\n    }\n\n    const cameraRange = controlParams.range;\n    const currentPos = activePanel.position;\n    const currentIndex = activePanel.index;\n    const panelCount = renderer.panelCount;\n\n    let prevPanelIndex = currentIndex - count;\n    let nextPanelIndex = currentIndex + count;\n\n    if (prevPanelIndex < 0) {\n      prevPanelIndex = flicking.circularEnabled\n        ? getMinusCompensatedIndex((prevPanelIndex + 1) % panelCount - 1, panelCount)\n        : clamp(prevPanelIndex, 0, panelCount - 1);\n    }\n    if (nextPanelIndex >= panelCount) {\n      nextPanelIndex = flicking.circularEnabled\n        ? nextPanelIndex % panelCount\n        : clamp(nextPanelIndex, 0, panelCount - 1);\n    }\n\n    const prevPanel = renderer.panels[prevPanelIndex];\n    const nextPanel = renderer.panels[nextPanelIndex];\n\n    let prevPos = Math.max(prevPanel.position, cameraRange.min);\n    let nextPos = Math.min(nextPanel.position, cameraRange.max);\n\n    if (prevPos > currentPos) {\n      prevPos -= camera.rangeDiff;\n    }\n    if (nextPos < currentPos) {\n      nextPos += camera.rangeDiff;\n    }\n\n    controlParams.range = {\n      min: prevPos,\n      max: nextPos\n    };\n\n    if (controlParams.position < prevPos) {\n      controlParams.position += camera.rangeDiff;\n    }\n\n    if (controlParams.position > nextPos) {\n      controlParams.position -= camera.rangeDiff;\n    }\n\n    controlParams.circular = false;\n    controller.update(controlParams);\n\n    this._indexRange = {\n      min: prevPanel.index,\n      max: nextPanel.index\n    };\n\n    return this;\n  }\n\n  /**\n   * Move {@link Camera} to the given position\n   * @ko {@link Camera}를 주어진 좌표로 이동합니다\n   * @param {number} position The target position to move<ko>이동할 좌표</ko>\n   * @param {number} duration Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {object} [axesEvent] {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} event of {@link https://naver.github.io/egjs-axes/ Axes}\n   * <ko>{@link https://naver.github.io/egjs-axes/ Axes}의 {@link https://naver.github.io/egjs-axes/release/latest/doc/eg.Axes.html#event:release release} 이벤트</ko>\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|When the given panel is already removed or not in the Camera's {@link Camera#range range}|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|When {@link Control#init init} is not called before|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the animation is interrupted by user input|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE POSITION_NOT_REACHABLE}|주어진 패널이 제거되었거나, Camera의 {@link Camera#range range} 밖에 있을 경우|\n   * |{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING}|{@link Control#init init}이 이전에 호출되지 않은 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target position<ko>해당 좌표 도달시에 resolve되는 Promise</ko>\n   */\n  public async moveToPosition(position: number, duration: number, axesEvent?: OnRelease) {\n    const flicking = getFlickingAttached(this._flicking, \"Control\");\n    const camera = flicking.camera;\n    const activePanel = this._activePanel;\n    const axesRange = this._controller.range;\n    const indexRange = this._indexRange;\n    const cameraRange = camera.range;\n\n    const clampedPosition = clamp(camera.clampToReachablePosition(position), axesRange[0], axesRange[1]);\n    const anchorAtPosition = camera.findAnchorIncludePosition(clampedPosition);\n\n    if (!anchorAtPosition || !activePanel) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.POSITION_NOT_REACHABLE(position), ERROR.CODE.POSITION_NOT_REACHABLE));\n    }\n\n    const prevPos = activePanel.position;\n\n    const isOverThreshold = Math.abs(position - prevPos) >= flicking.threshold;\n    const adjacentAnchor = (position > prevPos)\n      ? camera.getNextAnchor(anchorAtPosition)\n      : camera.getPrevAnchor(anchorAtPosition);\n\n    let targetPos: number;\n    let targetPanel: Panel;\n\n    const anchors = camera.anchorPoints;\n    const firstAnchor = anchors[0];\n    const lastAnchor = anchors[anchors.length - 1];\n\n    const shouldBounceToFirst = position <= cameraRange.min && isBetween(firstAnchor.panel.index, indexRange.min, indexRange.max);\n    const shouldBounceToLast = position >= cameraRange.max && isBetween(lastAnchor.panel.index, indexRange.min, indexRange.max);\n\n    if (shouldBounceToFirst || shouldBounceToLast) {\n      // In bounce area\n      const targetAnchor = position < cameraRange.min ? firstAnchor : lastAnchor;\n\n      targetPanel = targetAnchor.panel;\n      targetPos = targetAnchor.position;\n    } else if (isOverThreshold && anchorAtPosition.position !== activePanel.position) {\n      // Move to anchor at position\n      targetPanel = anchorAtPosition.panel;\n      targetPos = anchorAtPosition.position;\n    } else if (isOverThreshold && adjacentAnchor && isBetween(adjacentAnchor.index, indexRange.min, indexRange.max)) {\n      // Move to adjacent anchor\n      targetPanel = adjacentAnchor.panel;\n      targetPos = adjacentAnchor.position;\n    } else {\n      // Restore to active panel\n      targetPos = camera.clampToReachablePosition(activePanel.position);\n      targetPanel = activePanel;\n    }\n\n    this._triggerIndexChangeEvent(targetPanel, position, axesEvent);\n\n    return this._animateToPosition({\n      position: targetPos,\n      duration,\n      newActivePanel: targetPanel,\n      axesEvent\n    });\n  }\n\n  protected _setActive = (newActivePanel: Panel, prevActivePanel: Panel | null, isTrusted: boolean) => {\n    super._setActive(newActivePanel, prevActivePanel, isTrusted);\n    this.updateInput();\n  };\n\n  private _resetIndexRange() {\n    this._indexRange = { min: 0, max: 0 };\n  }\n}\n\nexport default StrictControl;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Control from \"./Control\";\nimport SnapControl from \"./SnapControl\";\nimport FreeControl, { FreeControlOptions } from \"./FreeControl\";\nimport StrictControl, { StrictControlOptions } from \"./StrictControl\";\nimport AxesController from \"./AxesController\";\nimport State from \"./states/State\";\nimport IdleState from \"./states/IdleState\";\nimport HoldingState from \"./states/HoldingState\";\nimport DraggingState from \"./states/DraggingState\";\nimport AnimatingState from \"./states/AnimatingState\";\nimport DisabledState from \"./states/DisabledState\";\nimport StateMachine from \"./StateMachine\";\n\nexport {\n  Control,\n  SnapControl,\n  FreeControl,\n  StrictControl,\n  AxesController,\n  State,\n  IdleState,\n  HoldingState,\n  DraggingState,\n  AnimatingState,\n  DisabledState,\n  StateMachine\n};\n\nexport type {\n  FreeControlOptions,\n  StrictControlOptions\n};\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"./panel/Panel\";\n\n/**\n * A data component that has actual position where the camera should be stopped at\n * @ko 카메라가 정지해야하는 실제 위치를 담고 있는 데이터 컴포넌트\n */\nclass AnchorPoint {\n  private _index: number;\n  private _pos: number;\n  private _panel: Panel;\n\n  /**\n   * Index of AnchorPoint\n   * @ko AnchorPoint의 인덱스\n   * @type {number}\n   * @readonly\n   */\n  public get index() { return this._index; }\n  /**\n   * Position of AnchorPoint\n   * @ko AnchorPoint의 좌표\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._pos; }\n  /**\n   * A {@link Panel} instance AnchorPoint is referencing to\n   * @ko AnchorPoint가 참조하고 있는 {@link Panel}\n   * @type {Panel}\n   * @readonly\n   */\n  public get panel() { return this._panel; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 객체</ko>\n   * @param {number} [options.index] Index of AnchorPoint<ko>AnchorPoint의 인덱스</ko>\n   * @param {number} [options.position] Position of AnchorPoint<ko>AnchorPoint의 좌표</ko>\n   * @param {Panel} [options.panel] A {@link Panel} instance AnchorPoint is referencing to<ko>AnchorPoint가 참조하고 있는 {@link Panel}</ko>\n   */\n  public constructor({\n    index,\n    position,\n    panel\n  }: {\n    index: number;\n    position: number;\n    panel: Panel;\n  }) {\n    this._index = index;\n    this._pos = position;\n    this._panel = panel;\n  }\n}\n\nexport default AnchorPoint;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking, { FlickingOptions } from \"../Flicking\";\nimport FlickingError from \"../core/FlickingError\";\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport * as ERROR from \"../const/error\";\nimport { ALIGN, DIRECTION, EVENTS } from \"../const/external\";\nimport { checkExistence, clamp, getFlickingAttached, getProgress, includes, parseAlign } from \"../utils\";\n\nexport interface CameraOptions {\n  align: FlickingOptions[\"align\"];\n}\n\n/**\n * A component that manages actual movement inside the viewport\n * @ko 뷰포트 내에서의 실제 움직임을 담당하는 컴포넌트\n */\nabstract class Camera {\n  // Options\n  protected _align: FlickingOptions[\"align\"];\n\n  // Internal states\n  protected _flicking: Flicking | null;\n  protected _el: HTMLElement;\n  protected _transform: string;\n  protected _position: number;\n  protected _alignPos: number;\n  protected _offset: number;\n  protected _range: { min: number; max: number };\n  protected _visiblePanels: Panel[];\n  protected _anchors: AnchorPoint[];\n  protected _needPanelTriggered: { prev: boolean; next: boolean };\n\n  // Internal states getter\n  /**\n   * The camera(`.flicking-camera`) element\n   * @ko 카메라(`.flicking-camera`) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n  /**\n   * Current position of the camera\n   * @ko Camera의 현재 좌표\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._position; }\n  /**\n   * Align position inside the viewport where {@link Panel}'s {@link Panel#alignPosition alignPosition} should be located at\n   * @ko 패널의 정렬 기준 위치. 뷰포트 내에서 {@link Panel}의 {@link Panel#alignPosition alignPosition}이 위치해야 하는 곳입니다\n   * @type {number}\n   * @readonly\n   */\n  public get alignPosition() { return this._alignPos; }\n  /**\n   * Position offset, used for the {@link Flicking#renderOnlyVisible renderOnlyVisible} option\n   * @ko Camera의 좌표 오프셋. {@link Flicking#renderOnlyVisible renderOnlyVisible} 옵션을 위해 사용됩니다.\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get offset() { return this._offset; }\n  /**\n   * A range that Camera's {@link Camera#position position} can reach\n   * @ko Camera의 {@link Camera#position position}이 도달 가능한 범위\n   * @type {object}\n   * @property {number} min A minimum position<ko>최소 위치</ko>\n   * @property {number} min A maximum position<ko>최대 위치</ko>\n   * @readonly\n   */\n  public get range() { return this._range; }\n  /**\n   * A difference between Camera's minimum and maximum position that can reach\n   * @ko Camera가 도달 가능한 최소/최대 좌표의 차이\n   * @type {number}\n   * @readonly\n   */\n  public get rangeDiff() { return this._range.max - this._range.min; }\n  /**\n   * An array of visible panels from the current position\n   * @ko 현재 보이는 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   */\n  public get visiblePanels() { return this._visiblePanels; }\n  /**\n   * A range of the visible area from the current position\n   * @ko 현재 위치에서 보이는 범위\n   * @type {object}\n   * @property {number} min A minimum position<ko>최소 위치</ko>\n   * @property {number} min A maximum position<ko>최대 위치</ko>\n   * @readonly\n   */\n  public get visibleRange() { return { min: this._position - this._alignPos, max: this._position - this._alignPos + this.size }; }\n  /**\n   * An array of {@link AnchorPoint}s that Camera can be stopped at\n   * @ko 카메라가 도달 가능한 {@link AnchorPoint}의 목록\n   * @type {AnchorPoint[]}\n   * @readonly\n   */\n  public get anchorPoints() { return this._anchors; }\n  /**\n   * A current parameters of the Camera for updating {@link AxesController}\n   * @ko {@link AxesController}를 업데이트하기 위한 현재 Camera 패러미터들\n   * @type {ControlParams}\n   * @readonly\n   */\n  public get controlParams() { return { range: this._range, position: this._position, circular: false }; }\n  /**\n   * A Boolean value indicating whether Camera's over the minimum or maximum position reachable\n   * @ko 현재 카메라가 도달 가능한 범위의 최소 혹은 최대점을 넘어섰는지를 나타냅니다\n   * @type {boolean}\n   * @readonly\n   */\n  public get atEdge() { return this._position <= this._range.min || this._position >= this._range.max; }\n  /**\n   * Return the size of the viewport\n   * @ko 뷰포트 크기를 반환합니다\n   * @type {number}\n   * @readonly\n   */\n  public get size() {\n    const flicking = this._flicking;\n    return flicking\n      ? flicking.horizontal\n        ? flicking.viewport.width\n        : flicking.viewport.height\n      : 0;\n  }\n\n  /**\n   * Return the camera's position progress from the first panel to last panel\n   * Range is from 0 to last panel's index\n   * @ko 첫번째 패널로부터 마지막 패널까지의 카메라 위치의 진행도를 반환합니다\n   * 범위는 0부터 마지막 패널의 인덱스까지입니다\n   * @type {number}\n   * @readonly\n   */\n  public get progress() {\n    const flicking = this._flicking;\n    const position = this._position + this._offset;\n    const nearestAnchor = this.findNearestAnchor(this._position);\n\n    if (!flicking || !nearestAnchor) {\n      return NaN;\n    }\n\n    const nearestPanel = nearestAnchor.panel;\n    const panelPos = nearestPanel.position + nearestPanel.offset;\n    const bounceSize = flicking.control.controller.bounce!;\n\n    const { min: prevRange, max: nextRange } = this.range;\n    const rangeDiff = this.rangeDiff;\n\n    if (position === panelPos) {\n      return nearestPanel.index;\n    }\n\n    if (position < panelPos) {\n      const prevPanel = nearestPanel.prev();\n      let prevPosition = prevPanel\n        ? prevPanel.position + prevPanel.offset\n        : prevRange - bounceSize[0];\n\n      // Looped\n      if (prevPosition > panelPos) {\n        prevPosition -= rangeDiff;\n      }\n\n      return nearestPanel.index - 1 + getProgress(position, prevPosition, panelPos);\n    } else {\n      const nextPanel = nearestPanel.next();\n      let nextPosition = nextPanel\n        ? nextPanel.position + nextPanel.offset\n        : nextRange + bounceSize[1];\n\n      // Looped\n      if (nextPosition < panelPos) {\n        nextPosition += rangeDiff;\n      }\n\n      return nearestPanel.index + getProgress(position, panelPos, nextPosition);\n    }\n  }\n\n  // Options Getter\n  /**\n   * A value indicating where the {@link Camera#alignPosition alignPosition} should be located at inside the viewport element\n   * @ko {@link Camera#alignPosition alignPosition}이 뷰포트 엘리먼트 내의 어디에 위치해야 하는지를 나타내는 값\n   * @type {ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Setter\n  public set align(val: FlickingOptions[\"align\"]) {\n    this._align = val;\n  }\n\n  /** */\n  public constructor({\n    align = ALIGN.CENTER\n  }: Partial<CameraOptions> = {}) {\n    this._flicking = null;\n    this._resetInternalValues();\n\n    // Options\n    this._align = align;\n  }\n\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @method\n   * @abstract\n   * @memberof Camera\n   * @instance\n   * @name updateRange\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public abstract updateRange(): this;\n\n  /**\n   * Initialize Camera\n   * @ko Camera를 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE VAL_MUST_NOT_NULL} If the camera element(`.flicking-camera`) does not exist inside viewport element\n   * <ko>{@link ERROR_CODE VAL_MUST_NOT_NULL} 뷰포트 엘리먼트 내부에 카메라 엘리먼트(`.flicking-camera`)가 존재하지 않을 경우</ko>\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n\n    const viewportEl = flicking.viewport.element;\n\n    checkExistence(viewportEl.firstElementChild, \"First element child of the viewport element\");\n    this._el = viewportEl.firstElementChild as HTMLElement;\n    this._checkTranslateSupport();\n\n    return this;\n  }\n\n  /**\n   * Destroy Camera and return to initial state\n   * @ko Camera를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): this {\n    this._flicking = null;\n    this._resetInternalValues();\n    return this;\n  }\n\n  /**\n   * Move to the given position and apply CSS transform\n   * @ko 해당 좌표로 이동하고, CSS transform을 적용합니다\n   * @param {number} pos A new position<ko>움직일 위치</ko>\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public async lookAt(pos: number): Promise<void> {\n    const prevPos = this._position;\n\n    this._position = pos;\n    await this._refreshVisiblePanels();\n    this._checkNeedPanel();\n    this._checkReachEnd(prevPos, pos);\n    this._applyTransform();\n  }\n\n  /**\n   * Return a previous {@link AnchorPoint} of given {@link AnchorPoint}\n   * If it does not exist, return `null` instead\n   * @ko 주어진 {@link AnchorPoint}의 이전 {@link AnchorPoint}를 반환합니다\n   * 존재하지 않을 경우 `null`을 반환합니다\n   * @param {AnchorPoint} anchor A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>\n   * @return {AnchorPoint | null} The previous {@link AnchorPoint}<ko>이전 {@link AnchorPoint}</ko>\n   */\n  public getPrevAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    return this._anchors[anchor.index - 1] || null;\n  }\n\n  /**\n   * Return a next {@link AnchorPoint} of given {@link AnchorPoint}\n   * If it does not exist, return `null` instead\n   * @ko 주어진 {@link AnchorPoint}의 다음 {@link AnchorPoint}를 반환합니다\n   * 존재하지 않을 경우 `null`을 반환합니다\n   * @param {AnchorPoint} anchor A reference {@link AnchorPoint}<ko>기준 {@link AnchorPoint}</ko>\n   * @return {AnchorPoint | null} The next {@link AnchorPoint}<ko>다음 {@link AnchorPoint}</ko>\n   */\n  public getNextAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    return this._anchors[anchor.index + 1] || null;\n  }\n\n  /**\n   * Return the camera's position progress in the panel below\n   * Value is from 0 to 1 when the camera's inside panel\n   * Value can be lower than 0 or bigger than 1 when it's in the margin area\n   * @ko 현재 카메라 아래 패널에서의 위치 진행도를 반환합니다\n   * 반환값은 카메라가 패널 내부에 있을 경우 0부터 1까지의 값을 갖습니다\n   * 패널의 margin 영역에 있을 경우 0보다 작거나 1보다 큰 값을 반환할 수 있습니다\n   */\n  public getProgressInPanel(panel: Panel) {\n    const panelRange = panel.range;\n\n    return (this._position - panelRange.min) / (panelRange.max - panelRange.min);\n  }\n\n  /**\n   * Return {@link AnchorPoint} that includes given position\n   * If there's no {@link AnchorPoint} that includes the given position, return `null` instead\n   * @ko 주어진 좌표를 포함하는 {@link AnchorPoint}를 반환합니다\n   * 주어진 좌표를 포함하는 {@link AnchorPoint}가 없을 경우 `null`을 반환합니다\n   * @param {number} position A position to check<ko>확인할 좌표</ko>\n   * @return {AnchorPoint | null} The {@link AnchorPoint} that includes the given position<ko>해당 좌표를 포함하는 {@link AnchorPoint}</ko>\n   */\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    const anchors = this._anchors;\n    const anchorsIncludingPosition = anchors.filter(anchor => anchor.panel.includePosition(position, true));\n\n    return anchorsIncludingPosition.reduce((nearest: AnchorPoint | null, anchor) => {\n      if (!nearest) return anchor;\n\n      return Math.abs(nearest.position - position) < Math.abs(anchor.position - position)\n        ? nearest\n        : anchor;\n    }, null);\n  }\n\n  /**\n   * Return {@link AnchorPoint} nearest to given position\n   * If there're no {@link AnchorPoint}s, return `null` instead\n   * @ko 해당 좌표에서 가장 가까운 {@link AnchorPoint}를 반환합니다\n   * {@link AnchorPoint}가 하나도 없을 경우 `null`을 반환합니다\n   * @param {number} position A position to check<ko>확인할 좌표</ko>\n   * @return {AnchorPoint | null} The {@link AnchorPoint} nearest to the given position<ko>해당 좌표에 가장 인접한 {@link AnchorPoint}</ko>\n   */\n  public findNearestAnchor(position: number): AnchorPoint | null {\n    const anchors = this._anchors;\n\n    if (anchors.length <= 0) return null;\n\n    let prevDist = Infinity;\n    for (let anchorIdx = 0; anchorIdx < anchors.length; anchorIdx++) {\n      const anchor = anchors[anchorIdx];\n      const dist = Math.abs(anchor.position - position);\n\n      if (dist > prevDist) {\n        // Return previous anchor\n        return anchors[anchorIdx - 1];\n      }\n\n      prevDist = dist;\n    }\n\n    // Return last anchor\n    return anchors[anchors.length - 1];\n  }\n\n  /**\n   * Clamp the given position between camera's range\n   * @ko 주어진 좌표를 Camera가 도달 가능한 범위 사이의 값으로 만듭니다\n   * @param {number} position A position to clamp<ko>범위를 제한할 좌표</ko>\n   * @return {number} A clamped position<ko>범위 제한된 좌표</ko>\n   */\n  public clampToReachablePosition(position: number): number {\n    const range = this._range;\n    return clamp(position, range.min, range.max);\n  }\n\n  /**\n   * Check whether the given panel is inside of the Camera's range\n   * @ko 해당 {@link Panel}이 Camera가 도달 가능한 범위 내에 있는지를 반환합니다\n   * @param panel An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>\n   * @return {boolean} Whether the panel's inside Camera's range<ko>도달 가능한 범위 내에 해당 패널이 존재하는지 여부</ko>\n   */\n  public canReach(panel: Panel): boolean {\n    const range = this._range;\n\n    if (panel.removed) return false;\n\n    const panelPos = panel.position;\n\n    return panelPos >= range.min && panelPos <= range.max;\n  }\n\n  /**\n   * Check whether the given panel element is visible at the current position\n   * @ko 현재 좌표에서 해당 패널 엘리먼트를 볼 수 있는지 여부를 반환합니다\n   * @param panel An instance of {@link Panel} to check<ko>확인할 {@link Panel}의 인스턴스</ko>\n   * @return Whether the panel element is visible at the current position<ko>현재 위치에서 해당 패널 엘리먼트가 보이는지 여부</ko>\n   */\n  public canSee(panel: Panel): boolean {\n    const visibleRange = this.visibleRange;\n    // Should not include margin, as we don't declare what the margin is visible as what the panel is visible.\n    return panel.includeRange(visibleRange.min, visibleRange.max, false);\n  }\n\n  /**\n   * Update Camera's {@link Camera#alignPosition alignPosition}\n   * @ko Camera의 {@link Camera#alignPosition alignPosition}을 업데이트합니다\n   * @chainable\n   * @return {this}\n   */\n  public updateAlignPos(): this {\n    const align = this._align;\n\n    const alignVal = typeof align === \"object\"\n      ? (align as { camera: string | number }).camera\n      : align;\n\n    this._alignPos = parseAlign(alignVal, this.size);\n\n    return this;\n  }\n\n  /**\n   * Update Camera's {@link Camera#anchorPoints anchorPoints}\n   * @ko Camera의 {@link Camera#anchorPoints anchorPoints}를 업데이트합니다\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {this}\n   */\n  public updateAnchors(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    this._anchors = panels.map((panel, index) => new AnchorPoint({\n      index,\n      position: panel.position,\n      panel\n    }));\n\n    return this;\n  }\n\n  /**\n   * Update Viewport's height to active panel's height\n   * @ko 현재 선택된 패널의 높이와 동일하도록 뷰포트의 높이를 업데이트합니다\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @chainable\n   * @return {this}\n   */\n  public updateAdaptiveHeight() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const activePanel = flicking.control.activePanel;\n\n    if (!flicking.horizontal || !flicking.adaptive || !activePanel) return;\n\n    flicking.viewport.setSize({\n      height: activePanel.height\n    });\n  }\n\n  public updateOffset() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const unRenderedPanels = flicking.panels.filter(panel => !panel.rendered);\n    const position = this._position;\n\n    this._offset = unRenderedPanels\n      .filter(panel => panel.position + panel.offset < position)\n      .reduce((offset, panel) => offset + panel.sizeIncludingMargin, 0);\n\n    this._applyTransform();\n  }\n\n  /**\n   * Reset the history of {@link Flicking#event:needPanel needPanel} events so it can be triggered again\n   * @ko 발생한 {@link Flicking#event:needPanel needPanel} 이벤트들을 초기화하여 다시 발생할 수 있도록 합니다\n   * @chainable\n   * @return {this}\n   */\n  public resetNeedPanelHistory(): this {\n    this._needPanelTriggered = { prev: false, next: false };\n    return this;\n  }\n\n  protected _resetInternalValues() {\n    this._position = 0;\n    this._alignPos = 0;\n    this._offset = 0;\n    this._range = { min: 0, max: 0 };\n    this._visiblePanels = [];\n    this._anchors = [];\n    this._needPanelTriggered = { prev: false, next: false };\n  }\n\n  protected async _refreshVisiblePanels() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    const newVisiblePanels = panels.filter(panel => this.canSee(panel));\n    const prevVisiblePanels = this._visiblePanels;\n    this._visiblePanels = newVisiblePanels;\n\n    const added: Panel[] = newVisiblePanels.filter(panel => !includes(prevVisiblePanels, panel));\n    const removed: Panel[] = prevVisiblePanels.filter(panel => !includes(newVisiblePanels, panel));\n\n    if (added.length > 0 || removed.length > 0) {\n      await flicking.renderer.render();\n\n      flicking.trigger(new ComponentEvent(EVENTS.VISIBLE_CHANGE, {\n        added,\n        removed,\n        visiblePanels: newVisiblePanels\n      }));\n    }\n  }\n\n  protected _checkNeedPanel(): void {\n    const needPanelTriggered = this._needPanelTriggered;\n\n    if (needPanelTriggered.prev && needPanelTriggered.next) return;\n\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    if (panels.length <= 0) {\n      if (!needPanelTriggered.prev) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.PREV }));\n        needPanelTriggered.prev = true;\n      }\n      if (!needPanelTriggered.next) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.NEXT }));\n        needPanelTriggered.next = true;\n      }\n\n      return;\n    }\n\n    const cameraPosition = this._position;\n    const cameraSize = this.size;\n    const cameraRange = this._range;\n    const needPanelThreshold = flicking.needPanelThreshold;\n\n    const cameraPrev = cameraPosition - this._alignPos;\n    const cameraNext = cameraPrev + cameraSize;\n\n    const firstPanel = panels[0];\n    const lastPanel = panels[panels.length - 1];\n\n    if (!needPanelTriggered.prev) {\n      const firstPanelPrev = firstPanel.range.min;\n\n      if (cameraPrev <= (firstPanelPrev + needPanelThreshold) || cameraPosition <= (cameraRange.min + needPanelThreshold)) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.PREV }));\n        needPanelTriggered.prev = true;\n      }\n    }\n\n    if (!needPanelTriggered.next) {\n      const lastPanelNext = lastPanel.range.max;\n\n      if (cameraNext >= (lastPanelNext - needPanelThreshold) || cameraPosition >= (cameraRange.max - needPanelThreshold)) {\n        flicking.trigger(new ComponentEvent(EVENTS.NEED_PANEL, { direction: DIRECTION.NEXT }));\n        needPanelTriggered.next = true;\n      }\n    }\n  }\n\n  protected _checkReachEnd(prevPos: number, newPos: number): void {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const range = this._range;\n\n    const wasBetweenRange = prevPos > range.min && prevPos < range.max;\n    const isBetweenRange = newPos > range.min && newPos < range.max;\n\n    if (!wasBetweenRange || isBetweenRange) return;\n\n    const direction = newPos <= range.min ? DIRECTION.PREV : DIRECTION.NEXT;\n\n    flicking.trigger(new ComponentEvent(EVENTS.REACH_EDGE, {\n      direction\n    }));\n  }\n\n  protected _applyTransform(): void {\n    const el = this._el;\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n\n    const actualPosition = this._position - this._alignPos - this._offset;\n\n    el.style[this._transform] = flicking.horizontal\n      ? `translate(${-actualPosition}px)`\n      : `translate(0, ${-actualPosition}px)`;\n  }\n\n  protected _checkTranslateSupport = () => {\n    const transforms = [\"webkitTransform\", \"msTransform\", \"MozTransform\", \"OTransform\", \"transform\"];\n\n    const supportedStyle = document.documentElement.style;\n    let transformName = \"\";\n    for (const prefixedTransform of transforms) {\n      if (prefixedTransform in supportedStyle) {\n        transformName = prefixedTransform;\n      }\n    }\n\n    if (!transformName) {\n      throw new FlickingError(ERROR.MESSAGE.TRANSFORM_NOT_SUPPORTED, ERROR.CODE.TRANSFORM_NOT_SUPPORTED);\n    }\n\n    this._transform = transformName;\n  };\n}\n\nexport default Camera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getFlickingAttached } from \"../utils\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A {@link Camera} that can move from the position of the first panel to the position of the last panel\n * @ko 첫번째 패널의 좌표로부터 마지막 패널의 좌표로까지 이동할 수 있는 종류의 {@link Camera}\n */\nclass LinearCamera extends Camera {\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const renderer = flicking.renderer;\n\n    const firstPanel = renderer.getPanel(0);\n    const lastPanel = renderer.getPanel(renderer.panelCount - 1);\n\n    this._range = { min: firstPanel?.position ?? 0, max: lastPanel?.position ?? 0 };\n    return this;\n  }\n}\n\nexport default LinearCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport { DIRECTION } from \"../const/external\";\nimport { circulatePosition, getFlickingAttached } from \"../utils\";\nimport { ValueOf } from \"../type/internal\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A data of the position that changes order of the panel elements\n * @ko 패널 엘리먼트 순서가 변경되는 좌표의 데이터\n * @interface\n * @property {Panel} panel Toggling panel<ko>순서를 변경할 패널</ko>\n * @property {DIRECTION} direction Toggling position<ko>순서를 변경할 방향</ko>\n * @property {boolean} toggled Whether the panel has toggled its position to `direction`<ko>`direction` 방향으로 패널 위치를 변경했는지 여부를 나타내는 값</ko>\n */\nexport interface TogglePoint {\n  panel: Panel;\n  direction: ValueOf<typeof DIRECTION>;\n  toggled: boolean;\n}\n\n/**\n * A {@link Camera} that connects the last panel and the first panel, enabling continuous loop\n * @ko 첫번째 패널과 마지막 패널이 이어진 상태로, 무한히 회전할 수 있는 종류의 {@link Camera}\n */\nclass CircularCamera extends Camera {\n  private _circularOffset: number = 0;\n  private _circularEnabled: boolean = false;\n\n  public get offset() { return this._offset - this._circularOffset; }\n  public get controlParams() { return { range: this._range, position: this._position, circular: this._circularEnabled }; }\n\n  public getPrevAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    if (!this._circularEnabled || anchor.index !== 0) return super.getPrevAnchor(anchor);\n\n    const anchors = this._anchors;\n    const rangeDiff = this.rangeDiff;\n    const lastAnchor = anchors[anchors.length - 1];\n\n    return new AnchorPoint({\n      index: lastAnchor.index,\n      position: lastAnchor.position - rangeDiff,\n      panel: lastAnchor.panel\n    });\n  }\n\n  public getNextAnchor(anchor: AnchorPoint): AnchorPoint | null {\n    const anchors = this._anchors;\n\n    if (!this._circularEnabled || anchor.index !== anchors.length - 1) return super.getNextAnchor(anchor);\n\n    const rangeDiff = this.rangeDiff;\n    const firstAnchor = anchors[0];\n\n    return new AnchorPoint({\n      index: firstAnchor.index,\n      position: firstAnchor.position + rangeDiff,\n      panel: firstAnchor.panel\n    });\n  }\n\n  public findAnchorIncludePosition(position: number): AnchorPoint | null {\n    if (!this._circularEnabled) return super.findAnchorIncludePosition(position);\n\n    const range = this._range;\n    const positionInRange = circulatePosition(position, range.min, range.max);\n    const anchorInRange = super.findAnchorIncludePosition(positionInRange);\n\n    if (!anchorInRange) return null;\n\n    const rangeDiff = this.rangeDiff;\n\n    if (position < range.min) {\n      const loopCount = -Math.floor((range.min - position) / rangeDiff) - 1;\n\n      return new AnchorPoint({\n        index: anchorInRange.index,\n        position: anchorInRange.position + rangeDiff * loopCount,\n        panel: anchorInRange.panel\n      });\n    } else if (position > range.max) {\n      const loopCount = Math.floor((position - range.max) / rangeDiff) + 1;\n\n      return new AnchorPoint({\n        index: anchorInRange.index,\n        position: anchorInRange.position + rangeDiff * loopCount,\n        panel: anchorInRange.panel\n      });\n    }\n\n    return anchorInRange;\n  }\n\n  public clampToReachablePosition(position: number): number {\n    // Basically all position is reachable for circular camera\n    return this._circularEnabled\n      ? position\n      : super.clampToReachablePosition(position);\n  }\n\n  public canReach(panel: Panel): boolean {\n    if (panel.removed) return false;\n\n    return this._circularEnabled\n      // Always reachable on circular mode\n      ? true\n      : super.canReach(panel);\n  }\n\n  public canSee(panel: Panel): boolean {\n    const range = this._range;\n    const rangeDiff = this.rangeDiff;\n    const visibleRange = this.visibleRange;\n    const visibleInCurrentRange = super.canSee(panel);\n\n    if (!this._circularEnabled) {\n      return visibleInCurrentRange;\n    }\n\n    // Check looped visible area for circular case\n    if (visibleRange.min < range.min) {\n      return visibleInCurrentRange || panel.includeRange(visibleRange.min + rangeDiff, visibleRange.max + rangeDiff, false);\n    } else if (visibleRange.max > range.max) {\n      return visibleInCurrentRange || panel.includeRange(visibleRange.min - rangeDiff, visibleRange.max - rangeDiff, false);\n    }\n\n    return visibleInCurrentRange;\n  }\n\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const renderer = flicking.renderer;\n\n    const panels = renderer.panels;\n    if (panels.length <= 0) {\n      this._resetInternalValues();\n      return this;\n    }\n\n    const firstPanel = panels[0]!;\n    const lastPanel = panels[panels.length - 1]!;\n    const firstPanelPrev = firstPanel.range.min - firstPanel.margin.prev;\n    const lastPanelNext = lastPanel.range.max + lastPanel.margin.next;\n\n    const visibleSize = this.size;\n    const panelSizeSum = lastPanelNext - firstPanelPrev;\n\n    const canSetCircularMode = panels\n      .every(panel => panelSizeSum - panel.size >= visibleSize);\n    this._circularEnabled = canSetCircularMode;\n\n    if (canSetCircularMode) {\n      this._range = { min: firstPanelPrev, max: lastPanelNext };\n\n      panels.forEach(panel => panel.updateCircularToggleDirection());\n    } else {\n      this._range = { min: firstPanel.position, max: lastPanel.position };\n    }\n\n    this._updateCircularOffset();\n\n    return this;\n  }\n\n  public async lookAt(pos: number) {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const prevPos = this._position;\n\n    if (pos === prevPos) return await super.lookAt(pos);\n\n    const panels = flicking.renderer.panels;\n    const toggled = panels.map(panel => panel.toggle(prevPos, pos));\n\n    this._position = pos;\n\n    if (toggled.some(isToggled => isToggled)) {\n      this._updateCircularOffset();\n      await flicking.renderer.render();\n    }\n\n    return await super.lookAt(pos);\n  }\n\n  protected _applyTransform(): void {\n    const el = this._el;\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n\n    const actualPosition = this._position - this._alignPos - this._offset + this._circularOffset;\n\n    el.style[this._transform] = flicking.horizontal\n      ? `translate(${-actualPosition}px)`\n      : `translate(0, ${-actualPosition}px)`;\n  }\n\n  protected _resetInternalValues() {\n    super._resetInternalValues();\n    this._circularOffset = 0;\n    this._circularEnabled = false;\n  }\n\n  private _calcPanelAreaSum(panels: Panel[]) {\n    return panels.reduce((sum: number, panel: Panel) => sum + panel.sizeIncludingMargin, 0);\n  }\n\n  private _updateCircularOffset() {\n    if (!this._circularEnabled) {\n      this._circularOffset = 0;\n      return;\n    }\n\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const toggledPrev: Panel[] = [];\n    const toggledNext: Panel[] = [];\n\n    flicking.panels\n      .filter(panel => panel.toggled)\n      .forEach(panel => {\n        if (panel.toggleDirection === DIRECTION.PREV) {\n          toggledPrev.push(panel);\n        } else {\n          toggledNext.push(panel);\n        }\n      });\n\n    this._circularOffset = this._calcPanelAreaSum(toggledPrev) - this._calcPanelAreaSum(toggledNext);\n  }\n}\n\nexport default CircularCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\nimport AnchorPoint from \"../core/AnchorPoint\";\nimport { getFlickingAttached } from \"../utils\";\n\nimport Camera from \"./Camera\";\n\n/**\n * A {@link Camera} that set range not to go out of the first/last panel, so it won't show empty spaces before/after the first/last panel\n * @ko 첫번째와 마지막 패널 밖으로 넘어가지 못하도록 범위를 설정하여, 첫번째/마지막 패널 전/후의 빈 공간을 보이지 않도록 하는 종류의 {@link Camera}\n */\nclass BoundCamera extends Camera {\n  /**\n   * Update {@link Camera#range range} of Camera\n   * @ko Camera의 {@link Camera#range range}를 업데이트합니다\n   * @chainable\n   * @throws {FlickingError}\n   * {@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} When {@link Camera#init init} is not called before\n   * <ko>{@link ERROR_CODE NOT_ATTACHED_TO_FLICKING} {@link Camera#init init}이 이전에 호출되지 않은 경우</ko>\n   * @return {this}\n   */\n  public updateRange() {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const renderer = flicking.renderer;\n    const alignPos = this._alignPos;\n\n    const firstPanel = renderer.getPanel(0);\n    const lastPanel = renderer.getPanel(renderer.panelCount - 1);\n\n    if (!firstPanel || !lastPanel) {\n      this._range = { min: 0, max: 0 };\n      return this;\n    }\n\n    const viewportSize = this.size;\n    const firstPanelPrev = firstPanel.range.min;\n    const lastPanelNext = lastPanel.range.max;\n    const panelAreaSize = lastPanelNext - firstPanelPrev;\n    const canSetBoundMode = viewportSize < panelAreaSize;\n\n    if (canSetBoundMode) {\n      this._range = { min: firstPanelPrev + alignPos, max: lastPanelNext - viewportSize + alignPos };\n    } else {\n      this._range = { min: firstPanel.position, max: lastPanel.position };\n    }\n\n    return this;\n  }\n\n  public updateAnchors(): this {\n    const flicking = getFlickingAttached(this._flicking, \"Camera\");\n    const panels = flicking.renderer.panels;\n\n    if (panels.length <= 0) {\n      this._anchors = [];\n      return this;\n    }\n\n    const range = this._range;\n    const reachablePanels = panels.filter(panel => this.canReach(panel));\n\n    if (reachablePanels.length > 0) {\n      const shouldPrependBoundAnchor = reachablePanels[0].position !== range.min;\n      const shouldAppendBoundAnchor = reachablePanels[reachablePanels.length - 1].position !== range.max;\n      const indexOffset = shouldPrependBoundAnchor ? 1 : 0;\n\n      const newAnchors = reachablePanels.map((panel, idx) => new AnchorPoint({\n        index: idx + indexOffset,\n        position: panel.position,\n        panel\n      }));\n\n      if (shouldPrependBoundAnchor) {\n        newAnchors.splice(0, 0, new AnchorPoint({\n          index: 0,\n          position: range.min,\n          panel: panels[reachablePanels[0].index - 1]\n        }));\n      }\n\n      if (shouldAppendBoundAnchor) {\n        newAnchors.push(new AnchorPoint({\n          index: newAnchors.length,\n          position: range.max,\n          panel: panels[reachablePanels[reachablePanels.length - 1].index + 1]\n        }));\n      }\n\n      this._anchors = newAnchors;\n    } else if (range.min !== range.max) {\n      // There're more than 2 panels\n      const nearestPanelAtMin = this._findNearestPanel(range.min, panels);\n      const panelAtMin = nearestPanelAtMin.index === panels.length - 1\n        ? nearestPanelAtMin.prev()!\n        : nearestPanelAtMin;\n      const panelAtMax = panelAtMin.next()!;\n\n      this._anchors = [\n        new AnchorPoint({\n          index: 0,\n          position: range.min,\n          panel: panelAtMin\n        }),\n        new AnchorPoint({\n          index: 1,\n          position: range.max,\n          panel: panelAtMax\n        })\n      ];\n    } else {\n      this._anchors = [new AnchorPoint({\n        index: 0,\n        position: range.min,\n        panel: this._findNearestPanel(range.min, panels)\n      })];\n    }\n\n    return this;\n  }\n\n  private _findNearestPanel(pos: number, panels: Panel[]): Panel {\n    let prevDist = Infinity;\n    for (let panelIdx = 0; panelIdx < panels.length; panelIdx++) {\n      const panel = panels[panelIdx];\n      const dist = Math.abs(panel.position - pos);\n\n      if (dist > prevDist) {\n        // Return previous anchor\n        return panels[panelIdx - 1];\n      }\n\n      prevDist = dist;\n    }\n\n    // Return last anchor\n    return panels[panels.length - 1];\n  }\n}\n\nexport default BoundCamera;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Camera, { CameraOptions } from \"./Camera\";\nimport LinearCamera from \"./LinearCamera\";\nimport CircularCamera from \"./CircularCamera\";\nimport BoundCamera from \"./BoundCamera\";\n\nexport {\n  Camera,\n  LinearCamera,\n  CircularCamera,\n  BoundCamera\n};\n\nexport type {\n  CameraOptions\n};\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\n\nimport RenderingStrategy from \"./RenderingStrategy\";\n\nclass RawRenderingStrategy implements RenderingStrategy {\n  public updateRenderingPanels(flicking: Flicking) {\n    // RawRenderingStrategy always renders all panel elements\n    flicking.panels.forEach(panel => panel.markForShow());\n  }\n}\n\nexport default RawRenderingStrategy;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { ComponentEvent } from \"@egjs/component\";\n\nimport Flicking, { FlickingOptions } from \"../Flicking\";\nimport Panel, { PanelOptions } from \"../core/panel/Panel\";\nimport { ALIGN, EVENTS } from \"../const/external\";\nimport { getFlickingAttached, getMinusCompensatedIndex, includes } from \"../utils\";\n\nimport RenderingStrategy from \"./RenderingStrategy/RenderingStrategy\";\nimport RawRenderingStrategy from \"./RenderingStrategy/RawRenderingStrategy\";\n\nexport interface RendererOptions {\n  align: FlickingOptions[\"align\"];\n  strategy: RenderingStrategy;\n}\n\n/**\n * A component that manages {@link Panel} and its elements\n * @ko {@link Panel}과 그 엘리먼트들을 관리하는 컴포넌트\n */\nabstract class Renderer {\n  // Internal States\n  protected _flicking: Flicking | null;\n  protected _panels: Panel[];\n  protected _renderingStrategy: RenderingStrategy;\n\n  // Options\n  protected _align: RendererOptions[\"align\"];\n\n  // Internal states Getter\n  /**\n   * Array of panels\n   * @ko 전체 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get panels() { return this._panels; }\n  /**\n   * Count of panels\n   * @ko 전체 패널의 개수\n   * @type {number}\n   * @readonly\n   */\n  public get panelCount() { return this._panels.length; }\n\n  // Options Getter\n  /**\n   * A {@link Panel}'s {@link Panel#align align} value that applied to all panels\n   * @ko {@link Panel}에 공통적으로 적용할 {@link Panel#align align} 값\n   * @type {Constants.ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Setter\n  public set align(val: RendererOptions[\"align\"]) {\n    this._align = val;\n\n    const panelAlign = this._getPanelAlign();\n    this._panels.forEach(panel => { panel.align = panelAlign; });\n  }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An {@link Flicking#align align} value that will be applied to all panels<ko>전체 패널에 적용될 {@link Flicking#align align} 값</ko>\n   */\n  public constructor({\n    align = ALIGN.CENTER,\n    strategy = new RawRenderingStrategy()\n  }: Partial<RendererOptions> = {}) {\n    this._align = align;\n    this._flicking = null;\n    this._renderingStrategy = strategy;\n    this._panels = [];\n  }\n\n  /**\n   * Render panel elements inside the camera element\n   * @ko 패널 엘리먼트들을 카메라 엘리먼트 내부에 렌더링합니다\n   * @method\n   * @abstract\n   * @memberof Renderer\n   * @instance\n   * @name render\n   * @chainable\n   * @return {this}\n   */\n  public abstract render(): Promise<void>;\n  public abstract forceRenderAllPanels(): Promise<void>;\n\n  protected abstract _collectPanels(): void;\n  protected abstract _createPanel(el: any, options: PanelOptions): Panel;\n  protected abstract _insertPanelElements(panels: Panel[], nextSibling: Panel | null): void;\n  protected abstract _removePanelElements(panels: Panel[]): void;\n\n  /**\n   * Initialize Renderer\n   * @ko Renderer를 초기화합니다\n   * @param {Flicking} flicking An instance of {@link Flicking}<ko>Flicking의 인스턴스</ko>\n   * @chainable\n   * @return {this}\n   */\n  public init(flicking: Flicking): this {\n    this._flicking = flicking;\n    this._collectPanels();\n\n    return this;\n  }\n\n  /**\n   * Destroy Renderer and return to initial state\n   * @ko Renderer를 초기 상태로 되돌립니다\n   * @return {void}\n   */\n  public destroy(): void {\n    this._flicking = null;\n    this._panels = [];\n  }\n\n  /**\n   * Return the {@link Panel} at the given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.\n   * @return {Panel | null} Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>\n   * @see Panel\n   */\n  public getPanel(index: number): Panel | null {\n    return this._panels[index] || null;\n  }\n\n  /**\n   * Update all panel sizes\n   * @ko 모든 패널의 크기를 업데이트합니다\n   * @chainable\n   * @return {this}\n   */\n  public updatePanelSize(): this {\n    this._panels.forEach(panel => panel.resize());\n    return this;\n  }\n\n  /**\n   * Insert new panels at given index\n   * This will increase index of panels after by the number of panels added\n   * @ko 주어진 인덱스에 새로운 패널들을 추가합니다\n   * 해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.\n   * @param {number} index Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>\n   * @param {any[]} elements An array of element or framework component with element in it<ko>엘리먼트의 배열 혹은 프레임워크에서 엘리먼트를 포함한 컴포넌트들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   */\n  public batchInsert(...items: Array<{\n    index: number;\n    elements: any[];\n  }>): Panel[] {\n    const panels = this._panels;\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    const { control } = flicking;\n    const align = this._getPanelAlign();\n\n    const allPanelsInserted = items.reduce((addedPanels, item) => {\n      const insertingIdx = getMinusCompensatedIndex(item.index, panels.length);\n      const panelsPushed = panels.slice(insertingIdx);\n      const panelsInserted = item.elements.map(el => this._createPanel(el, { index: insertingIdx, align, flicking }));\n\n      panels.splice(insertingIdx, 0, ...panelsInserted);\n\n      // Resize the newly added panels\n      panelsInserted.forEach(panel => panel.resize());\n\n      const insertedSize = this._getPanelSizeSum(panelsInserted);\n\n      // Update panel indexes & positions\n      panelsPushed.forEach(panel => {\n        panel.increaseIndex(panelsInserted.length);\n        panel.increasePosition(insertedSize);\n      });\n\n      // Insert the actual elements as camera element's children\n      this._insertPanelElements(panelsInserted, panelsPushed[0] ?? null);\n\n      return [...addedPanels, ...panelsInserted];\n    }, []);\n\n    if (allPanelsInserted.length <= 0) return [];\n\n    // Update camera & control\n    this._updateCameraAndControl();\n\n    void this.render();\n\n    // Move to the first panel added if no panels existed\n    // FIXME: fix for animating case\n    if (allPanelsInserted.length > 0 && !control.animating) {\n      void control.moveToPanel(control.activePanel || allPanelsInserted[0], {\n        duration: 0\n      }).catch(() => void 0);\n    }\n\n    flicking.camera.updateOffset();\n\n    flicking.trigger(new ComponentEvent(EVENTS.PANEL_CHANGE, {\n      added: allPanelsInserted,\n      removed: []\n    }));\n\n    return allPanelsInserted;\n  }\n\n  /**\n   * Remove the panel at the given index\n   * This will decrease index of panels after by the number of panels removed\n   * @ko 주어진 인덱스의 패널을 제거합니다\n   * 해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다\n   * @param {number} index Index of panel to remove<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>\n   * @return An array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public batchRemove(...items: Array<{ index: number; deleteCount: number }>): Panel[] {\n    const panels = this._panels;\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    const { camera, control } = flicking;\n    const activePanel = control.activePanel;\n    const activeIndex = control.activeIndex;\n\n    const allPanelsRemoved = items.reduce((removed, item) => {\n      const { index, deleteCount } = item;\n      const removingIdx = getMinusCompensatedIndex(index, panels.length);\n\n      const panelsPulled = panels.slice(removingIdx + deleteCount);\n      const panelsRemoved = panels.splice(removingIdx, deleteCount);\n\n      if (panelsRemoved.length <= 0) return [];\n\n      // Update panel indexes & positions\n      const removedSize = this._getPanelSizeSum(panelsRemoved);\n      panelsPulled.forEach(panel => {\n        panel.decreaseIndex(panelsRemoved.length);\n        panel.decreasePosition(removedSize);\n      });\n\n      this._removePanelElements(panelsRemoved);\n\n      // Remove panel elements\n      panelsRemoved.forEach(panel => panel.destroy());\n\n      // Update camera & control\n      this._updateCameraAndControl();\n\n      if (includes(panelsRemoved, activePanel)) {\n        control.resetActive();\n      }\n\n      return [...removed, ...panelsRemoved];\n    }, []);\n\n    void this.render();\n\n    // FIXME: fix for animating case\n    if (allPanelsRemoved.length > 0 && !control.animating) {\n      const targetPanel = includes(allPanelsRemoved, activePanel)\n        ? (panels[activeIndex] || panels[panels.length - 1])\n        : activePanel;\n\n      if (targetPanel) {\n        void control.moveToPanel(targetPanel, {\n          duration: 0\n        }).catch(() => void 0);\n      } else {\n        // All panels removed\n        void camera.lookAt(0);\n      }\n    }\n\n    flicking.camera.updateOffset();\n\n    flicking.trigger(new ComponentEvent(EVENTS.PANEL_CHANGE, {\n      added: [],\n      removed: allPanelsRemoved\n    }));\n\n    return allPanelsRemoved;\n  }\n\n  protected _getPanelAlign() {\n    const align = this._align;\n\n    return typeof align === \"object\"\n      ? (align as { panel: string | number }).panel\n      : align;\n  }\n\n  protected _getPanelSizeSum(panels: Panel[]): number {\n    const firstPanel = panels[0];\n    const lastPanel = panels[panels.length - 1];\n\n    const marginDiff = lastPanel.margin.next - firstPanel.margin.prev;\n\n    return (lastPanel.range.max - firstPanel.range.min) + marginDiff;\n  }\n\n  protected _updateCameraAndControl() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const { camera, control } = flicking;\n\n    camera.updateRange();\n    camera.updateAnchors();\n    camera.resetNeedPanelHistory();\n    control.updateInput();\n  }\n}\n\nexport default Renderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\nimport { getProgress, getStyle, parseAlign } from \"../../utils\";\nimport { ALIGN, DIRECTION } from \"../../const/external\";\nimport { LiteralUnion, ValueOf } from \"../../type/internal\";\n\nexport interface PanelOptions {\n  index: number;\n  align: LiteralUnion<ValueOf<typeof ALIGN>> | number;\n  flicking: Flicking;\n}\n\nabstract class Panel {\n  // Internal States\n  protected _flicking: Flicking;\n  protected _index: number;\n  protected _pos: number;\n  protected _size: number;\n  protected _height: number;\n  protected _margin: { prev: number; next: number };\n  protected _alignPos: number; // Actual align pos\n  protected _removed: boolean;\n  protected _toggleDirection: ValueOf<typeof DIRECTION>;\n  protected _toggled: boolean;\n  protected _togglePosition: number;\n\n  // Options\n  protected _align: PanelOptions[\"align\"];\n\n  // Internal States Getter\n  /**\n   * `HTMLElement` that panel's referencing\n   * @ko 패널이 참조하고 있는 `HTMLElement`\n   * @type {HTMLElement}\n   * @readonly\n   */\n  abstract get element(): HTMLElement;\n  /**\n   * Index of the panel\n   * @ko 패널의 인덱스\n   * @type {number}\n   * @readonly\n   */\n  public get index() { return this._index; }\n  /**\n   * Position of the panel, including {@link Panel#alignPosition alignPosition}\n   * @ko 패널의 현재 좌표, {@link Panel#alignPosition alignPosition}을 포함하고 있습니다\n   * @type {number}\n   * @readonly\n   */\n  public get position() { return this._pos + this._alignPos; }\n  /**\n   * Cached size of the panel element\n   * This is equal to {@link Panel#element element}'s `offsetWidth` if {@link Flicking#horizontal horizontal} is `true`, and `offsetHeight` else\n   * @ko 패널 엘리먼트의 캐시된 크기\n   * 이 값은 {@link Flicking#horizontal horizontal}이 `true`일 경우 {@link Panel#element element}의 `offsetWidth`와 동일하고, `false`일 경우 `offsetHeight`와 동일합니다\n   * @type {number}\n   * @readonly\n   */\n  public get size() { return this._size; }\n  /**\n   * Panel's size including CSS `margin`\n   * This value includes {@link Panel#element element}'s margin left/right if {@link Flicking#horizontal horizontal} is `true`, and margin top/bottom else\n   * @ko CSS `margin`을 포함한 패널의 크기\n   * 이 값은 {@link Flicking#horizontal horizontal}이 `true`일 경우 margin left/right을 포함하고, `false`일 경우 margin top/bottom을 포함합니다\n   * @type {number}\n   * @readonly\n   */\n  public get sizeIncludingMargin() { return this._size + this._margin.prev + this._margin.next; }\n  /**\n   * Height of the panel element\n   * @ko 패널 엘리먼트의 높이\n   * @type {number}\n   * @readonly\n   */\n  public get height() { return this._height; }\n  /**\n   * Cached CSS `margin` value of the panel element\n   * @ko 패널 엘리먼트의 CSS `margin` 값\n   * @type {object}\n   * @property {number} prev CSS `margin-left` when the {@link Flicking#horizontal horizontal} is `true`, and `margin-top` else\n   * <ko>{@link Flicking#horizontal horizontal}이 `true`일 경우 `margin-left`, `false`일 경우 `margin-top`에 해당하는 값</ko>\n   * @property {number} next CSS `margin-right` when the {@link Flicking#horizontal horizontal} is `true`, and `margin-bottom` else\n   * <ko>{@link Flicking#horizontal horizontal}이 `true`일 경우 `margin-right`, `false`일 경우 `margin-bottom`에 해당하는 값</ko>\n   * @readonly\n   */\n  public get margin() { return this._margin; }\n  /**\n   * Align position inside the panel where {@link Camera}'s {@link Camera#alignPosition alignPosition} inside viewport should be located at\n   * @ko 패널의 정렬 기준 위치. {@link Camera}의 뷰포트 내에서의 {@link Camera#alignPosition alignPosition}이 위치해야 하는 곳입니다\n   * @type {number}\n   * @readonly\n   */\n  public get alignPosition() { return this._alignPos; }\n  /**\n   * A value indicating whether the panel's {@link Flicking#remove remove}d\n   * @ko 패널이 {@link Flicking#remove remove}되었는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get removed() { return this._removed; }\n  /**\n   * A value indicating whether the panel's element is being rendered on the screen\n   * @ko 패널의 엘리먼트가 화면상에 렌더링되고있는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public abstract get rendered();\n  /**\n   * Panel element's range of the bounding box\n   * @ko 패널 엘리먼트의 Bounding box 범위\n   * @type {object}\n   * @property {number} [min] Bounding box's left({@link Flicking#horizontal horizontal}: true) / top({@link Flicking#horizontal horizontal}: false)\n   * @property {number} [max] Bounding box's right({@link Flicking#horizontal horizontal}: true) / bottom({@link Flicking#horizontal horizontal}: false)\n   * @readonly\n   */\n  public get range() { return { min: this._pos, max: this._pos + this._size }; }\n  /**\n   * A value indicating whether the panel's position is toggled by circular behavior\n   * @ko 패널의 위치가 circular 동작에 의해 토글되었는지 여부를 나타내는 값\n   * @type {boolean}\n   * @readonly\n   */\n  public get toggled() { return this._toggled; }\n  /**\n   * A direction where the panel's position is toggled\n   * @ko 패널의 위치가 circular 동작에 의해 토글되는 방향\n   * @type {DIRECTION}\n   * @readonly\n   */\n  public get toggleDirection() { return this._toggleDirection; }\n  /**\n   * Actual position offset determined by {@link Panel#order}\n   * @ko {@link Panel#order}에 의한 실제 위치 변경값\n   * @type {number}\n   * @readonly\n   */\n  public get offset() {\n    const toggleDirection = this._toggleDirection;\n    const cameraRangeDiff = this._flicking.camera.rangeDiff;\n\n    return toggleDirection === DIRECTION.NONE || !this._toggled\n      ? 0\n      : toggleDirection === DIRECTION.PREV\n        ? -cameraRangeDiff\n        : cameraRangeDiff;\n  }\n\n  /**\n   * Progress of movement between previous or next panel relative to current panel\n   * @ko 이 패널로부터 이전/다음 패널으로의 이동 진행률\n   * @type {number}\n   * @readonly\n   */\n  public get progress() {\n    const flicking = this._flicking;\n\n    return this.index - flicking.camera.progress;\n  }\n\n  /**\n   * Progress of movement between points that panel is completely invisible outside of viewport(prev direction: -1, selected point: 0, next direction: 1)\n   * @ko 현재 패널이 뷰포트 영역 밖으로 완전히 사라지는 지점을 기준으로 하는 진행도(prev방향: -1, 선택 지점: 0, next방향: 1)\n   * @type {number}\n   * @readonly\n   */\n  public get outsetProgress() {\n    const position = this.position + this.offset;\n    const alignPosition = this._alignPos;\n    const camera = this._flicking.camera;\n    const camPos = camera.position;\n\n    if (camPos === position) {\n      return 0;\n    }\n\n    if (camPos < position) {\n      const disappearPosNext = position + (camera.size - camera.alignPosition) + alignPosition;\n\n      return -getProgress(camPos, position, disappearPosNext);\n    } else {\n      const disappearPosPrev = position - (camera.alignPosition + this._size - alignPosition);\n\n      return 1 - getProgress(camPos, disappearPosPrev, position);\n    }\n  }\n\n  /**\n   * Percentage of area where panel is visible in the viewport\n   * @ko 뷰포트 안에서 패널이 보이는 영역의 비율\n   * @type {number}\n   * @readonly\n   */\n  public get visibleRatio() {\n    const range = this.range;\n    const size = this._size;\n    const offset = this.offset;\n    const visibleRange = this._flicking.camera.visibleRange;\n\n    const checkingRange = {\n      min: range.min + offset,\n      max: range.max + offset\n    };\n\n    if (checkingRange.max <= visibleRange.min || checkingRange.min >= visibleRange.max) {\n      return 0;\n    }\n\n    let visibleSize = size;\n\n    if (visibleRange.min > checkingRange.min) {\n      visibleSize -= visibleRange.min - checkingRange.min;\n    }\n    if (visibleRange.max < checkingRange.max) {\n      visibleSize -= checkingRange.max - visibleRange.max;\n    }\n\n    return visibleSize / size;\n  }\n\n  // Options Getter\n  /**\n   * A value indicating where the {@link Panel#alignPosition alignPosition} should be located at inside the panel element\n   * @ko {@link Panel#alignPosition alignPosition}이 패널 내의 어디에 위치해야 하는지를 나타내는 값\n   * @type {Constants.ALIGN | string | number}\n   */\n  public get align() { return this._align; }\n\n  // Options Getter\n  public set align(val: PanelOptions[\"align\"]) { this._align = val; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor({\n    index,\n    align,\n    flicking\n  }: PanelOptions) {\n    this._index = index;\n    this._flicking = flicking;\n\n    this._align = align;\n\n    this._removed = false;\n    this._resetInternalStates();\n  }\n\n  /**\n   * Mark panel element to be appended on the camera element\n   * @internal\n   */\n  public abstract markForShow();\n\n  /**\n   * Mark panel element to be removed from the camera element\n   * @internal\n   */\n  public abstract markForHide();\n\n  /**\n   * Update size of the panel\n   * @ko 패널의 크기를 갱신합니다\n   * @chainable\n   * @return {this}\n   */\n  public resize(): this {\n    const el = this.element;\n    const elStyle = getStyle(el);\n    const flicking = this._flicking;\n    const horizontal = flicking.horizontal;\n    const prevPanel = flicking.renderer.panels[this._index - 1];\n\n    this._size = horizontal ? el.offsetWidth : el.offsetHeight;\n\n    this._margin = horizontal\n      ? {\n        prev: parseFloat(elStyle.marginLeft || \"0\"),\n        next: parseFloat(elStyle.marginRight || \"0\")\n      } : {\n        prev: parseFloat(elStyle.marginTop || \"0\"),\n        next: parseFloat(elStyle.marginBottom || \"0\")\n      };\n\n    this._pos = prevPanel\n      ? prevPanel.range.max + prevPanel.margin.next + this._margin.prev\n      : this._margin.prev;\n\n    this._height = horizontal ? el.offsetHeight : this._size;\n\n    this._updateAlignPos();\n\n    return this;\n  }\n\n  /**\n   * Check whether the given element is inside of this panel's {@link Panel#element element}\n   * @ko 해당 엘리먼트가 이 패널의 {@link Panel#element element} 내에 포함되어 있는지를 반환합니다\n   * @param {HTMLElement} element The HTMLElement to check<ko>확인하고자 하는 HTMLElement</ko>\n   * @return {boolean} A Boolean value indicating the element is inside of this panel {@link Panel#element element}<ko>패널의 {@link Panel#element element}내에 해당 엘리먼트 포함 여부</ko>\n   */\n  public contains(element: HTMLElement): boolean {\n    return !!this.element?.contains(element);\n  }\n\n  /**\n   * Reset internal state and set {@link Panel#removed removed} to `true`\n   * @ko 내부 상태를 초기화하고 {@link Panel#removed removed}를 `true`로 설정합니다.\n   * @return {void}\n   */\n  public destroy(): void {\n    this._resetInternalStates();\n    this._removed = true;\n  }\n\n  /**\n   * Check whether the given position is inside of this panel's {@link Panel#range range}\n   * @ko 주어진 좌표가 현재 패널의 {@link Panel#range range}내에 속해있는지를 반환합니다.\n   * @param {number} pos A position to check<ko>확인하고자 하는 좌표</ko>\n   * @param {boolean} [includeMargin=false] Include {@link Panel#margin margin} to the range<ko>패널 영역에 {@link Panel#margin margin}값을 포함시킵니다</ko>\n   * @return {boolean} A Boolean value indicating whether the given position is included in the panel range<ko>해당 좌표가 패널 영역 내에 속해있는지 여부</ko>\n   */\n  public includePosition(pos: number, includeMargin: boolean = false): boolean {\n    return this.includeRange(pos, pos, includeMargin);\n  }\n\n  /**\n   * Check whether the given range is fully included in this panel's area\n   * @ko 주어진 범위가 이 패널 내부에 완전히 포함되는지를 반환합니다\n   * @param {number} min Minimum value of the range to check<ko>확인하고자 하는 최소 범위</ko>\n   * @param {number} max Maximum value of the range to check<ko>확인하고자 하는 최대 범위</ko>\n   * @param {boolean} [includeMargin=false] Include {@link Panel#margin margin} to the range<ko>패널 영역에 {@link Panel#margin margin}값을 포함시킵니다</ko>\n   * @returns {boolean} A Boolean value indicating whether the given range is fully included in the panel range<ko>해당 범위가 패널 영역 내에 완전히 속해있는지 여부</ko>\n   */\n  public includeRange(min: number, max: number, includeMargin: boolean = false): boolean {\n    const margin = this._margin;\n    const panelRange = this.range;\n\n    if (includeMargin) {\n      panelRange.min -= margin.prev;\n      panelRange.max += margin.next;\n    }\n\n    return max >= panelRange.min && min <= panelRange.max;\n  }\n\n  /**\n   * Move {@link Camera} to this panel\n   * @ko {@link Camera}를 이 패널로 이동합니다\n   * @param {number} [duration] Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @returns {Promise<void>} A Promise which will be resolved after reaching the panel<ko>패널 도달시에 resolve되는 Promise</ko>\n   */\n  public focus(duration?: number) {\n    return this._flicking.moveTo(this._index, duration);\n  }\n\n  /**\n   * Get previous(`index - 1`) panel. When the previous panel does not exist, this will return `null` instead\n   * If the {@link Flicking#circularEnabled circular} is enabled, this will return the last panel if called from the first panel\n   * @ko 이전(`index - 1`) 패널을 반환합니다. 이전 패널이 없을 경우 `null`을 반환합니다\n   * {@link Flicking#circularEnabled circular} 모드가 활성화되었을 때 첫번째 패널에서 이 메소드를 호출할 경우 마지막 패널을 반환합니다\n   * @returns {Panel | null} The previous panel<ko>이전 패널</ko>\n   */\n  public prev(): Panel | null {\n    const index = this._index;\n    const flicking = this._flicking;\n    const renderer = flicking.renderer;\n    const panelCount = renderer.panelCount;\n\n    if (panelCount === 1) return null;\n\n    return flicking.circularEnabled\n      ? renderer.getPanel(index === 0 ? panelCount - 1 : index - 1)\n      : renderer.getPanel(index - 1);\n  }\n\n  /**\n   * Get next(`index + 1`) panel. When the next panel does not exist, this will return `null` instead\n   * If the {@link Flicking#circularEnabled circular} is enabled, this will return the first panel if called from the last panel\n   * @ko 다음(`index + 1`) 패널을 반환합니다. 다음 패널이 없을 경우 `null`을 반환합니다\n   * {@link Flicking#circularEnabled circular} 모드가 활성화되었을 때 마지막 패널에서 이 메소드를 호출할 경우 첫번째 패널을 반환합니다\n   * @returns {Panel | null} The previous panel<ko>다음 패널</ko>\n   */\n  public next(): Panel | null {\n    const index = this._index;\n    const flicking = this._flicking;\n    const renderer = flicking.renderer;\n    const panelCount = renderer.panelCount;\n\n    if (panelCount === 1) return null;\n\n    return flicking.circularEnabled\n      ? renderer.getPanel(index === panelCount - 1 ? 0 : index + 1)\n      : renderer.getPanel(index + 1);\n  }\n\n  /**\n   * Increase panel's index by the given value\n   * @ko 패널의 인덱스를 주어진 값만큼 증가시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public increaseIndex(val: number): this {\n    this._index += Math.max(val, 0);\n    return this;\n  }\n\n  /**\n   * Decrease panel's index by the given value\n   * @ko 패널의 인덱스를 주어진 값만큼 감소시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public decreaseIndex(val: number): this {\n    this._index -= Math.max(val, 0);\n    return this;\n  }\n\n  /**\n   * Increase panel's position by the given value\n   * @ko 패널의 위치를 주어진 값만큼 증가시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public increasePosition(val: number): this {\n    this._moveBy(Math.max(val, 0));\n    return this;\n  }\n\n  /**\n   * Decrease panel's position by the given value\n   * @ko 패널의위치를 주어진 값만큼 감소시킵니다\n   * @internal\n   * @chainable\n   * @param val An integer greater than or equal to 0<ko>0보다 같거나 큰 정수</ko>\n   * @returns {this}\n   */\n  public decreasePosition(val: number): this {\n    this._moveBy(-Math.max(val, 0));\n    return this;\n  }\n\n  /**\n   * @internal\n   * @return {boolean} toggled\n   */\n  public toggle(prevPos: number, newPos: number): boolean {\n    const toggleDirection = this._toggleDirection;\n    const togglePosition = this._togglePosition;\n\n    if (toggleDirection === DIRECTION.NONE || newPos === prevPos) return false;\n\n    const prevToggled = this._toggled;\n\n    if (newPos > prevPos) {\n      if (togglePosition >= prevPos && togglePosition <= newPos) {\n        this._toggled = toggleDirection === DIRECTION.NEXT;\n      }\n    } else {\n      if (togglePosition <= prevPos && togglePosition >= newPos) {\n        this._toggled = toggleDirection !== DIRECTION.NEXT;\n      }\n    }\n\n    return prevToggled !== this._toggled;\n  }\n\n  /**\n   * @internal\n   */\n  public updateCircularToggleDirection(): this {\n    const flicking = this._flicking;\n\n    if (!flicking.circularEnabled) {\n      this._toggleDirection = DIRECTION.NONE;\n      this._toggled = false;\n      return this;\n    }\n\n    const camera = flicking.camera;\n    const camRange = camera.range;\n    const camAlignPosition = camera.alignPosition;\n    const camVisibleRange = camera.visibleRange;\n    const camVisibleSize = camVisibleRange.max - camVisibleRange.min;\n\n    const minimumVisible = camRange.min - camAlignPosition;\n    const maximumVisible = camRange.max - camAlignPosition + camVisibleSize;\n\n    const shouldBeVisibleAtMin = this.includeRange(maximumVisible - camVisibleSize, maximumVisible, false);\n    const shouldBeVisibleAtMax = this.includeRange(minimumVisible, minimumVisible + camVisibleSize, false);\n\n    this._toggled = false;\n    if (shouldBeVisibleAtMin) {\n      this._toggleDirection = DIRECTION.PREV;\n      this._togglePosition = this.range.max + camRange.min - camRange.max + camAlignPosition;\n      this.toggle(Infinity, camera.position);\n    } else if (shouldBeVisibleAtMax) {\n      this._toggleDirection = DIRECTION.NEXT;\n      this._togglePosition = this.range.min + camRange.max - camVisibleSize + camAlignPosition;\n      this.toggle(-Infinity, camera.position);\n    } else {\n      this._toggleDirection = DIRECTION.NONE;\n      this._togglePosition = 0;\n    }\n\n    return this;\n  }\n\n  private _moveBy(val: number): this {\n    this._pos += val;\n\n    return this;\n  }\n\n  private _updateAlignPos() {\n    this._alignPos = parseAlign(this._align, this._size);\n  }\n\n  private _resetInternalStates() {\n    this._size = 0;\n    this._pos = 0;\n    this._margin = { prev: 0, next: 0 };\n    this._height = 0;\n    this._alignPos = 0;\n    this._toggled = false;\n    this._togglePosition = 0;\n    this._toggleDirection = DIRECTION.NONE;\n  }\n}\n\nexport default Panel;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel, { PanelOptions } from \"./Panel\";\n\nexport interface ElementPanelOptions extends PanelOptions {\n  el: HTMLElement;\n}\n\n/**\n * An slide data component that holds information of a single HTMLElement\n * @ko 슬라이드 데이터 컴포넌트로, 단일 HTMLElement의 정보를 갖고 있습니다\n */\nclass ElementPanel extends Panel {\n  private _el: HTMLElement;\n  private _rendered: boolean;\n\n  /**\n   * `HTMLElement` that panel's referencing\n   * @ko 패널이 참조하고 있는 `HTMLElement`\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._el; }\n\n  public get rendered() { return this._rendered; }\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {HTMLElement} [options.el] A `HTMLElement` panel's referencing<ko>패널이 참조하는 `HTMLElement`</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor(options: ElementPanelOptions) {\n    super(options);\n\n    this._el = options.el;\n    this._rendered = true;\n  }\n\n  public markForShow() {\n    this._rendered = true;\n  }\n\n  public markForHide() {\n    this._rendered = false;\n  }\n}\n\nexport default ElementPanel;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { getFlickingAttached, toArray } from \"../utils\";\nimport Panel, { PanelOptions } from \"../core/panel/Panel\";\nimport ElementPanel from \"../core/panel/ElementPanel\";\n\nimport Renderer from \"./Renderer\";\n\n/**\n *\n */\nclass VanillaRenderer extends Renderer {\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async render() {\n    const strategy = this._renderingStrategy;\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraEl = flicking.camera.element;\n    const wasRenderedPanels = this._panels.filter(panel => panel.element.parentElement === cameraEl);\n\n    strategy.updateRenderingPanels(flicking);\n    const renderingPanels = this._getRenderingPanelsByOrder();\n\n    this._removePanelElements(wasRenderedPanels.filter(panel => !panel.rendered));\n    this._insertPanelElements(renderingPanels.filter(panel => panel.element.parentElement !== cameraEl), null);\n    this._resetPanelElementOrder(renderingPanels);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/require-await\n  public async forceRenderAllPanels() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const camera = flicking.camera;\n    const cameraElement = camera.element;\n    const fragment = document.createDocumentFragment();\n\n    this._panels.forEach(panel => fragment.appendChild(panel.element));\n\n    this._removeAllChildsFromCamera();\n\n    cameraElement.appendChild(fragment);\n  }\n\n  protected _collectPanels() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n\n    const cameraElement = flicking.camera.element;\n\n    // Remove all text nodes in the camera element\n    toArray(cameraElement.childNodes).forEach(node => {\n      if (node.nodeType === Node.TEXT_NODE) {\n        cameraElement.removeChild(node);\n      }\n    });\n\n    const align = this._getPanelAlign();\n    const cameraChilds = toArray(cameraElement.children);\n\n    this._panels = cameraChilds.map(\n      (el: HTMLElement, index: number) => new ElementPanel({ flicking, el, index, align })\n    );\n  }\n\n  protected _createPanel(el: HTMLElement, options: PanelOptions): ElementPanel {\n    return new ElementPanel({ el, ...options });\n  }\n\n  protected _insertPanelElements(panels: Panel[], nextSibling: Panel | null) {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const camera = flicking.camera;\n    const cameraElement = camera.element;\n    const nextSiblingElement = nextSibling?.element || null;\n    const fragment = document.createDocumentFragment();\n\n    panels.forEach(panel => fragment.appendChild(panel.element));\n    cameraElement.insertBefore(fragment, nextSiblingElement);\n\n    return this;\n  }\n\n  protected _removePanelElements(panels: Panel[]): this {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraElement = flicking.camera.element;\n\n    panels.forEach(panel => {\n      cameraElement.removeChild(panel.element);\n    });\n\n    return this;\n  }\n\n  private _resetPanelElementOrder(panels: Panel[]) {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraEl = flicking.camera.element;\n\n    // We're using reversed panels here as last panel should be the last element of camera element\n    const reversedPanels = [...panels].reverse();\n    reversedPanels.forEach((panel, idx) => {\n      const nextPanel = reversedPanels[idx - 1];\n      const nextPanelEl = nextPanel ? nextPanel.element : null;\n\n      if (panel.element.nextElementSibling !== nextPanelEl) {\n        cameraEl.insertBefore(panel.element, nextPanelEl);\n      }\n    });\n  }\n\n  private _removeAllChildsFromCamera() {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const cameraElement = flicking.camera.element;\n\n    // Remove other elements\n    while (cameraElement.firstChild) {\n      cameraElement.removeChild(cameraElement.firstChild);\n    }\n  }\n\n  private _getRenderingPanelsByOrder(): Panel[] {\n    const flicking = getFlickingAttached(this._flicking, \"Renderer\");\n    const panels = flicking.renderer.panels;\n\n    return panels.filter(panel => panel.rendered)\n      .sort((a, b) => (a.position + a.offset) - (b.position + b.offset));\n  }\n}\n\nexport default VanillaRenderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel from \"../core/panel/Panel\";\n\nimport Renderer from \"./Renderer\";\n\n/**\n *\n */\nabstract class ExternalRenderer extends Renderer {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _insertPanelElements(panels: Panel[], nextSibling: Panel | null): void {\n    // DO NOTHING\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  protected _removePanelElements(panels: Panel[]): void {\n    // DO NOTHING\n  }\n}\n\nexport default ExternalRenderer;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"../../Flicking\";\n\nimport RenderingStrategy from \"./RenderingStrategy\";\n\nclass VisibleRenderingStrategy implements RenderingStrategy {\n  public updateRenderingPanels(flicking: Flicking) {\n    const panels = flicking.renderer.panels;\n    const camera = flicking.camera;\n\n    const visibleIndexes = camera.visiblePanels.reduce((visibles, panel) => {\n      visibles[panel.index] = true;\n      return visibles;\n    }, {});\n\n    panels.forEach(panel => {\n      if (panel.index in visibleIndexes) {\n        panel.markForShow();\n      } else if (!flicking.holding) {\n        // During the input sequence,\n        // Do not remove panel elements as it won't trigger touchend event.\n        panel.markForHide();\n      }\n    });\n\n    camera.updateOffset();\n  }\n}\n\nexport default VisibleRenderingStrategy;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Renderer, { RendererOptions } from \"./Renderer\";\nimport VanillaRenderer from \"./VanillaRenderer\";\nimport ExternalRenderer from \"./ExternalRenderer\";\n\n\nexport {\n  Renderer,\n  VanillaRenderer,\n  ExternalRenderer\n};\n\nexport * from \"./RenderingStrategy\";\n\nexport type {\n  RendererOptions\n};\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component, { ComponentEvent } from \"@egjs/component\";\n\nimport FlickingError from \"./core/FlickingError\";\nimport Viewport from \"./core/Viewport\";\nimport { Panel } from \"./core/panel\";\nimport { Control, SnapControl, FreeControl, StrictControl, FreeControlOptions, StrictControlOptions } from \"./control\";\nimport { BoundCamera, Camera, CircularCamera, LinearCamera } from \"./camera\";\nimport { Renderer, VanillaRenderer, ExternalRenderer, RawRenderingStrategy, VisibleRenderingStrategy } from \"./renderer\";\nimport { EVENTS, ALIGN, MOVE_TYPE, DIRECTION } from \"./const/external\";\nimport * as ERROR from \"./const/error\";\nimport { findIndex, getElement, includes, parseElement } from \"./utils\";\nimport { HoldStartEvent, HoldEndEvent, MoveStartEvent, SelectEvent, MoveEvent, MoveEndEvent, WillChangeEvent, WillRestoreEvent, NeedPanelEvent, VisibleChangeEvent, ReachEdgeEvent, ReadyEvent, AfterResizeEvent, BeforeResizeEvent, ChangedEvent, RestoredEvent, PanelChangeEvent } from \"./type/event\";\nimport { LiteralUnion, ValueOf } from \"./type/internal\";\nimport { ElementLike, Plugin, Status, MoveTypeOptions } from \"./type/external\";\n\n/**\n * @interface\n */\nexport interface FlickingEvents {\n  [EVENTS.READY]: ReadyEvent;\n  [EVENTS.BEFORE_RESIZE]: BeforeResizeEvent;\n  [EVENTS.AFTER_RESIZE]: AfterResizeEvent;\n  [EVENTS.HOLD_START]: HoldStartEvent;\n  [EVENTS.HOLD_END]: HoldEndEvent;\n  [EVENTS.MOVE_START]: MoveStartEvent;\n  [EVENTS.MOVE]: MoveEvent;\n  [EVENTS.MOVE_END]: MoveEndEvent;\n  [EVENTS.WILL_CHANGE]: WillChangeEvent;\n  [EVENTS.CHANGED]: ChangedEvent;\n  [EVENTS.WILL_RESTORE]: WillRestoreEvent;\n  [EVENTS.RESTORED]: RestoredEvent;\n  [EVENTS.SELECT]: SelectEvent;\n  [EVENTS.NEED_PANEL]: NeedPanelEvent;\n  [EVENTS.VISIBLE_CHANGE]: VisibleChangeEvent;\n  [EVENTS.REACH_EDGE]: ReachEdgeEvent;\n  [EVENTS.PANEL_CHANGE]: PanelChangeEvent;\n}\n\n/**\n * @interface\n */\nexport interface FlickingOptions {\n  // UI / LAYOUT\n  align: LiteralUnion<ValueOf<typeof ALIGN>> | number | { panel: number | string; camera: number | string };\n  defaultIndex: number;\n  horizontal: boolean;\n  circular: boolean;\n  bound: boolean;\n  adaptive: boolean;\n  // EVENT\n  needPanelThreshold: number;\n  preventEventsBeforeInit: boolean;\n  // ANIMATION\n  deceleration: number;\n  duration: number;\n  easing: (x: number) => number;\n  // INPUT\n  inputType: string[];\n  moveType: ValueOf<typeof MOVE_TYPE> | MoveTypeOptions<ValueOf<typeof MOVE_TYPE>>;\n  threshold: number;\n  interruptable: boolean;\n  bounce: number | string | [number | string, number | string];\n  iOSEdgeSwipeThreshold: number;\n  preventClickOnDrag: boolean;\n  disableOnInit: boolean;\n  // PERFORMANCE\n  renderOnlyVisible: boolean;\n  // OTHERS\n  autoInit: boolean;\n  autoResize: boolean;\n  renderExternal: {\n    renderer: typeof ExternalRenderer;\n    rendererOptions: {[key: string]: any};\n  } | null;\n}\n\n/**\n * @extends Component\n * @support {\"ie\": \"9+(with polyfill)\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @requires {@link https://github.com/naver/egjs-component|@egjs/component}\n * @requires {@link https://github.com/naver/egjs-axes|@egjs/axes}\n */\nclass Flicking extends Component<FlickingEvents> {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @type {string}\n   * @readonly\n   * @example\n   * ```ts\n   * Flicking.VERSION;  // ex) 4.0.0\n   * ```\n   */\n  public static VERSION = \"#__VERSION__#\";\n\n  // Core components\n  private _viewport: Viewport;\n  private _camera: Camera;\n  private _control: Control;\n  private _renderer: Renderer;\n\n  // Options\n  private _align: FlickingOptions[\"align\"];\n  private _defaultIndex: FlickingOptions[\"defaultIndex\"];\n  private _horizontal: FlickingOptions[\"horizontal\"];\n  private _circular: FlickingOptions[\"circular\"];\n  private _bound: FlickingOptions[\"bound\"];\n  private _adaptive: FlickingOptions[\"adaptive\"];\n  private _needPanelThreshold: FlickingOptions[\"needPanelThreshold\"];\n  private _preventEventsBeforeInit: FlickingOptions[\"preventEventsBeforeInit\"];\n  private _deceleration: FlickingOptions[\"deceleration\"];\n  private _duration: FlickingOptions[\"duration\"];\n  private _easing: FlickingOptions[\"easing\"];\n  private _inputType: FlickingOptions[\"inputType\"];\n  private _moveType: FlickingOptions[\"moveType\"];\n  private _threshold: FlickingOptions[\"threshold\"];\n  private _interruptable: FlickingOptions[\"interruptable\"];\n  private _bounce: FlickingOptions[\"bounce\"];\n  private _iOSEdgeSwipeThreshold: FlickingOptions[\"iOSEdgeSwipeThreshold\"];\n  private _preventClickOnDrag: FlickingOptions[\"preventClickOnDrag\"];\n  private _disableOnInit: FlickingOptions[\"disableOnInit\"];\n  private _renderOnlyVisible: FlickingOptions[\"renderOnlyVisible\"];\n  private _autoResize: FlickingOptions[\"autoResize\"];\n  private _autoInit: FlickingOptions[\"autoInit\"];\n  private _renderExternal: FlickingOptions[\"renderExternal\"];\n\n  // Internal State\n  private _initialized: boolean;\n  private _plugins: Plugin[];\n\n  // Components\n  /**\n   * {@link Control} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Control} 인스턴스\n   * @type {Control}\n   * @default SnapControl\n   * @readonly\n   * @see Control\n   * @see SnapControl\n   * @see FreeControl\n   */\n  public get control() { return this._control; }\n  /**\n   * {@link Camera} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Camera} 인스턴스\n   * @type {Camera}\n   * @default LinearCamera\n   * @readonly\n   * @see Camera\n   * @see LinearCamera\n   * @see BoundCamera\n   * @see CircularCamera\n   */\n  public get camera() { return this._camera; }\n  /**\n   * {@link Renderer} instance of the Flicking\n   * @ko 현재 Flicking에 활성화된 {@link Renderer} 인스턴스\n   * @type {Renderer}\n   * @default VanillaRenderer\n   * @readonly\n   * @see Renderer\n   * @see VanillaRenderer\n   * @see ExternalRenderer\n   */\n  public get renderer() { return this._renderer; }\n  /**\n   * A component that manages viewport size\n   * @ko 뷰포트 크기 정보를 담당하는 컴포넌트\n   * @type {Viewport}\n   * @readonly\n   * @see Viewport\n   */\n  public get viewport() { return this._viewport; }\n  // Internal States\n  /**\n   * Whether Flicking's {@link Flicking#init init()} is called.\n   * This is `true` when {@link Flicking#init init()} is called, and is `false` after calling {@link Flicking#destroy destroy()}.\n   * @ko Flicking의 {@link Flicking#init init()}이 호출되었는지를 나타내는 멤버 변수.\n   * 이 값은 {@link Flicking#init init()}이 호출되었으면 `true`로 변하고, {@link Flicking#destroy destroy()}호출 이후에 다시 `false`로 변경됩니다.\n   * @type {boolean}\n   * @default false\n   * @readonly\n   */\n  public get initialized() { return this._initialized; }\n  /**\n   * Whether the `circular` option is enabled.\n   * The {@link Flicking#circular circular} option can't be enabled when sum of the panel sizes are too small.\n   * @ko {@link Flicking#circular circular} 옵션이 활성화되었는지 여부를 나타내는 멤버 변수.\n   * {@link Flicking#circular circular} 옵션은 패널의 크기의 합이 충분하지 않을 경우 비활성화됩니다.\n   * @type {boolean}\n   * @default false\n   * @readonly\n   */\n  public get circularEnabled() { return this._camera.controlParams.circular; }\n  /**\n   * Index number of the {@link Flicking#currentPanel currentPanel}\n   * @ko {@link Flicking#currentPanel currentPanel}의 인덱스 번호\n   * @type {number}\n   * @default 0\n   * @readonly\n   */\n  public get index() { return this._control.activeIndex; }\n  /**\n   * The root(`.flicking-viewport`) element\n   * @ko root(`.flicking-viewport`) 엘리먼트\n   * @type {HTMLElement}\n   * @readonly\n   */\n  public get element() { return this._viewport.element; }\n  /**\n   * Currently active panel\n   * @ko 현재 선택된 패널\n   * @type {Panel}\n   * @readonly\n   * @see Panel\n   */\n  public get currentPanel() { return this._control.activePanel; }\n  /**\n   * Array of panels\n   * @ko 전체 패널들의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get panels() { return this._renderer.panels; }\n  /**\n   * Count of panels\n   * @ko 전체 패널의 개수\n   * @type {number}\n   * @readonly\n   */\n  public get panelCount() { return this._renderer.panelCount; }\n  /**\n   * Array of panels that is visible at the current position\n   * @ko 현재 보이는 패널의 배열\n   * @type {Panel[]}\n   * @readonly\n   * @see Panel\n   */\n  public get visiblePanels() { return this._camera.visiblePanels; }\n  /**\n   * Whether Flicking's animating\n   * @ko 현재 애니메이션 동작 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get animating() { return this._control.animating; }\n  /**\n   * Whether user is clicking or touching\n   * @ko 현재 사용자가 클릭/터치중인지 여부\n   * @type {boolean}\n   * @readonly\n   */\n  public get holding() { return this._control.holding; }\n  /**\n   * A current list of activated plugins\n   * @ko 현재 활성화된 플러그인 목록\n   * @type {Plugin[]}\n   * @readonly\n   */\n  public get activePlugins() { return this._plugins; }\n\n  // Options Getter\n  // UI / LAYOUT\n  /**\n   * Align position of the panels within viewport. You can set different values each for the panel and camera\n   * @ko 뷰포트 내에서 패널 정렬방식을 설정하는 옵션. 카메라와 패널 개별로 옵션을 설정할 수도 있습니다\n   * @type {ALIGN | string | number | { panel: string | number, camera: string | number }}\n   * @property {ALIGN | string | number} panel The align value for each {@link Panel}s<ko>개개의 {@link Panel}에 적용할 값</ko>\n   * @property {ALIGN | string | number} camera The align value for {@link Camera}<ko>{@link Camera}에 적용할 값</ko>\n   * @default \"center\"\n   * @example\n   * ```ts\n   * const possibleOptions = [\n   *   // Literal strings\n   *   \"prev\", \"center\", \"next\",\n   *   // % values, applied to both panel & camera\n   *   \"0%\", \"25%\", \"42%\",\n   *   // px values, arithmetic calculation with (+/-) is also allowed.\n   *   \"0px\", \"100px\", \"50% - 25px\",\n   *   // numbers, same to number + px (\"0px\", \"100px\")\n   *   0, 100, 1000,\n   *   // Setting a different value for panel & camera\n   *   { panel: \"10%\", camera: \"25%\" }\n   * ];\n   *\n   * possibleOptions.forEach(align => {\n   *   new Flicking(\"#el\", { align });\n   * });\n   * ```\n   */\n  public get align() { return this._align; }\n  /**\n   * Index of the panel to move when Flicking's {@link Flicking#init init()} is called. A zero-based integer\n   * @ko Flicking의 {@link Flicking#init init()}이 호출될 때 이동할 디폴트 패널의 인덱스로, 0부터 시작하는 정수입니다\n   * @type {number}\n   * @default 0\n   */\n  public get defaultIndex() { return this._defaultIndex; }\n  /**\n   * Direction of panel movement (true: horizontal, false: vertical)\n   * @ko 패널 이동 방향 (true: 가로방향, false: 세로방향)\n   * @type {boolean}\n   * @default true\n   */\n  public get horizontal() { return this._horizontal; }\n  /**\n   * Enables circular(continuous loop) mode, which connects first/last panel for continuous scrolling.\n   * @ko 순환 모드를 활성화합니다. 순환 모드에서는 양 끝의 패널이 서로 연결되어 끊김없는 스크롤이 가능합니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get circular() { return this._circular; }\n  /**\n   * Prevent the view(camera element) from going out of the first/last panel, so it won't show empty spaces before/after the first/last panel\n   * Only can be enabled when `circular=false`\n   * @ko 뷰(카메라 엘리먼트)가 첫번째와 마지막 패널 밖으로 넘어가지 못하게 하여, 첫번째/마지막 패널 전/후의 빈 공간을 보이지 않도록 하는 옵션입니다\n   * `circular=false`인 경우에만 사용할 수 있습니다\n   * @type {boolean}\n   * @default false\n   */\n  public get bound() { return this._bound; }\n  /**\n   * Update height of the viewport element after movement same to the height of the panel below. This can be only enabled when `horizontal=true`\n   * @ko 이동한 후 뷰포트 엘리먼트의 크기를 현재 패널의 높이와 동일하게 설정합니다. `horizontal=true`인 경우에만 사용할 수 있습니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get adaptive() { return this._adaptive; }\n  // EVENTS\n  /**\n   * A Threshold from viewport edge before triggering `needPanel` event\n   * @ko `needPanel`이벤트가 발생하기 위한 뷰포트 끝으로부터의 최대 거리\n   * @type {number}\n   * @default 0\n   */\n  public get needPanelThreshold() { return this._needPanelThreshold; }\n  /**\n   * When enabled, events are not triggered before `ready` when initializing\n   * @ko 활성화할 경우 초기화시 `ready` 이벤트 이전의 이벤트가 발생하지 않습니다.\n   * @type {boolean}\n   * @default true\n   */\n  public get preventEventsBeforeInit() { return this._preventEventsBeforeInit; }\n  // ANIMATION\n  /**\n   * Deceleration value for panel movement animation which is triggered by user input. A higher value means a shorter animation time\n   * @ko 사용자의 동작으로 가속도가 적용된 패널 이동 애니메이션의 감속도. 값이 높을수록 애니메이션 실행 시간이 짧아집니다\n   * @type {number}\n   * @default 0.0075\n   */\n  public get deceleration() { return this._deceleration; }\n  /**\n   * An easing function applied to the panel movement animation. Default value is `easeOutCubic`\n   * @ko 패널 이동 애니메이션에 적용할 easing 함수. 기본값은 `easeOutCubic`이다\n   * @type {function}\n   * @default x => 1 - Math.pow(1 - x, 3)\n   * @see Easing Functions Cheat Sheet {@link http://easings.net/} <ko>이징 함수 Cheat Sheet {@link http://easings.net/}</ko>\n   */\n  public get easing() { return this._easing; }\n  /**\n   * Default duration of the animation (ms)\n   * @ko 디폴트 애니메이션 재생 시간 (ms)\n   * @type {number}\n   * @default 500\n   */\n  public get duration() { return this._duration; }\n  // INPUT\n  /**\n   * Types of input devices to enable\n   * @ko 활성화할 입력 장치 종류\n   * @type {string[]}\n   * @default [\"touch\", \"mouse\"]\n   * @see {@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption Possible values (PanInputOption#inputType)}\n   * <ko>{@link https://naver.github.io/egjs-axes/release/latest/doc/global.html#PanInputOption 가능한 값들 (PanInputOption#inputType)}</ko>\n   */\n  public get inputType() { return this._inputType; }\n  /**\n   * Movement style by user input. This will change instance type of {@link Flicking#control}\n   * You can use the values of the constant {@link MOVE_TYPE}\n   * @ko 사용자 입력에 의한 이동 방식. 이 값에 따라 {@link Flicking#control}의 인스턴스 타입이 결정됩니다\n   * 상수 {@link MOVE_TYPE}에 정의된 값들을 이용할 수 있습니다\n   * @type {MOVE_TYPE | Pair<string, object>}\n   * @default \"snap\"\n   * @example\n   * |moveType|control|options|\n   * |:---:|:---:|:---:|\n   * |\"snap\"|{@link SnapControl}||\n   * |\"freeScroll\"|{@link FreeControl}|{@link FreeControlOptions}|\n   *\n   * ```ts\n   * import Flicking, { MOVE_TYPE } from \"@egjs/flicking\";\n   *\n   * const flicking = new Flicking({\n   *   moveType: MOVE_TYPE.SNAP\n   * });\n   * ```\n   *\n   * ```ts\n   * const flicking = new Flicking({\n   *   // If you want more specific settings for the moveType\n   *   // [moveType, options for that moveType]\n   *   // In this case, it's [\"freeScroll\", FreeControlOptions]\n   *   moveType: [MOVE_TYPE.FREE_SCROLL, { stopAtEdge: true }]\n   * });\n   * ```\n   */\n  public get moveType() { return this._moveType; }\n  /**\n   * Movement threshold to change panel (unit: px). It should be dragged above the threshold to change the current panel.\n   * @ko 패널 변경을 위한 이동 임계값 (단위: px). 주어진 값 이상으로 스크롤해야만 패널 변경이 가능하다.\n   * @type {number}\n   * @default 40\n   */\n  public get threshold() { return this._threshold; }\n  /**\n   * Set animation to be interruptable by click/touch.\n   * @ko 사용자의 클릭/터치로 인해 애니메이션을 도중에 멈출 수 있도록 설정합니다.\n   * @type {boolean}\n   * @default true\n   */\n  public get interruptable() { return this._interruptable; }\n  /**\n   * The size value of the bounce area. Only can be enabled when `circular=false`.\n   * You can set different bounce value for prev/next direction by using array.\n   * `number` for px value, and `string` for px, and % value relative to viewport size.\n   * You have to call {@link Control#updateInput} after changing this to take effect.\n   * @ko Flicking이 최대 영역을 넘어서 갈 수 있는 최대 크기. `circular=false`인 경우에만 사용할 수 있습니다.\n   * 배열을 통해 prev/next 방향에 대해 서로 다른 바운스 값을 지정할 수 있습니다.\n   * `number`를 통해 px값을, `stirng`을 통해 px 혹은 뷰포트 크기 대비 %값을 사용할 수 있습니다.\n   * 이 값을 변경시 {@link Control#updateInput}를 호출해야 합니다.\n   * @type {string | number | Array<string | number>}\n   * @default \"20%\"\n   * @example\n   * ```ts\n   * const possibleOptions = [\n   *   // % values, relative to viewport element(\".flicking-viewport\")'s size\n   *   \"0%\", \"25%\", \"42%\",\n   *   // px values, arithmetic calculation with (+/-) is also allowed.\n   *   \"0px\", \"100px\", \"50% - 25px\",\n   *   // numbers, same to number + px (\"0px\", \"100px\")\n   *   0, 100, 1000\n   * ];\n   * ```\n   *\n   * @example\n   * ```ts\n   * const flicking = new Flicking(\"#el\", { bounce: \"20%\" });\n   *\n   * flicking.bounce = \"100%\";\n   * flicking.control.updateInput(); // Call this to update!\n   * ```\n   */\n  public get bounce() { return this._bounce; }\n  /**\n   * Size of the area from the right edge in iOS safari (in px) which enables swipe-back or swipe-forward\n   * @ko iOS Safari에서 swipe를 통한 뒤로가기/앞으로가기를 활성화하는 오른쪽 끝으로부터의 영역의 크기 (px)\n   * @type {number}\n   * @default 30\n   */\n  public get iOSEdgeSwipeThreshold() { return this._iOSEdgeSwipeThreshold; }\n  /**\n   * Automatically prevent `click` event if the user has dragged at least a single pixel on the viewport element\n   * @ko 사용자가 뷰포트 영역을 1픽셀이라도 드래그했을 경우 자동으로 {@link https://developer.mozilla.org/ko/docs/Web/API/Element/click_event click} 이벤트를 취소합니다\n   * @type {boolean}\n   * @default true\n   */\n  public get preventClickOnDrag() { return this._preventClickOnDrag; }\n  /**\n   * Automatically call {@link Flicking#disableInput disableInput()} on initialization\n   * @ko Flicking init시에 {@link Flicking#disableInput disableInput()}을 바로 호출합니다\n   * @type {boolean}\n   * @default false\n   */\n  public get disableOnInit() { return this._disableOnInit; }\n  // PERFORMANCE\n  /**\n   * Whether to render visible panels only. This can dramatically increase performance when there're many panels.\n   * @ko 보이는 패널만 렌더링할지 여부를 설정합니다. 패널이 많을 경우에 퍼포먼스를 크게 향상시킬 수 있습니다.\n   * @type {boolean}\n   * @default false\n   */\n  public get renderOnlyVisible() { return this._renderOnlyVisible; }\n  // OTHERS\n  /**\n   * Call {@link Flicking#init init()} automatically when creating Flicking's instance\n   * @ko Flicking 인스턴스를 생성할 때 자동으로 {@link Flicking#init init()}를 호출합니다\n   * @type {boolean}\n   * @default true\n   * @readonly\n   */\n  public get autoInit() { return this._autoInit; }\n  /**\n   * Attach Flicking's {@link Flicking#resize resize} method to window's resize event.\n   * Flicking will automatically call {@link Flicking#resize resize} window size and orientation change.\n   * @ko Flicking의 {@link Flicking#resize resize} 메소드를 window의 resize 이벤트 핸들러로 등록합니다.\n   * 설정시 window 창 크기 및 orientation 변경에 의해 자동으로 {@link Flicking#resize resize}를 호출합니다.\n   * @type {boolean}\n   * @default true\n   */\n  public get autoResize() { return this._autoResize; }\n  /**\n   * This is an option for the frameworks(React, Vue, Angular, ...). Don't set it as it's automatically managed by Flicking.\n   * @ko 프레임워크(React, Vue, Angular, ...)에서만 사용하는 옵션으로, 자동으로 설정되므로 따로 사용하실 필요 없습니다!\n   * @type {boolean}\n   * @default false\n   * @internal\n   * @readonly\n   */\n  public get renderExternal() { return this._renderExternal; }\n\n  // Options Setter\n  // UI / LAYOUT\n  public set align(val: FlickingOptions[\"align\"]) {\n    this._align = val;\n    this._renderer.align = val;\n    this._camera.align = val;\n  }\n\n  public set defaultIndex(val: FlickingOptions[\"defaultIndex\"]) { this._defaultIndex = val; }\n  public set horizontal(val: FlickingOptions[\"horizontal\"]) { this._horizontal = val; }\n  public set circular(val: FlickingOptions[\"circular\"]) { this._circular = val; }\n  public set bound(val: FlickingOptions[\"bound\"]) { this._bound = val; }\n  public set adaptive(val: FlickingOptions[\"adaptive\"]) { this._adaptive = val; }\n  // EVENTS\n  public set needPanelThreshold(val: FlickingOptions[\"needPanelThreshold\"]) { this._needPanelThreshold = val; }\n  public set preventEventsBeforeInit(val: FlickingOptions[\"preventEventsBeforeInit\"]) { this._preventEventsBeforeInit = val; }\n  // ANIMATION\n  public set deceleration(val: FlickingOptions[\"deceleration\"]) { this._deceleration = val; }\n  public set easing(val: FlickingOptions[\"easing\"]) { this._easing = val; }\n  public set duration(val: FlickingOptions[\"duration\"]) { this._duration = val; }\n  // INPUT\n  public set inputType(val: FlickingOptions[\"inputType\"]) { this._inputType = val; }\n  public set moveType(val: FlickingOptions[\"moveType\"]) { this._moveType = val; }\n  public set threshold(val: FlickingOptions[\"threshold\"]) { this._threshold = val; }\n  public set interruptable(val: FlickingOptions[\"interruptable\"]) { this._interruptable = val; }\n  public set bounce(val: FlickingOptions[\"bounce\"]) { this._bounce = val; }\n  public set iOSEdgeSwipeThreshold(val: FlickingOptions[\"iOSEdgeSwipeThreshold\"]) { this._iOSEdgeSwipeThreshold = val; }\n  public set preventClickOnDrag(val: FlickingOptions[\"preventClickOnDrag\"]) {\n    const prevVal = this._preventClickOnDrag;\n\n    if (val === prevVal) return;\n\n    const controller = this._control.controller;\n\n    if (val) {\n      controller.addPreventClickHandler();\n    } else {\n      controller.removePreventClickHandler();\n    }\n\n    this._preventClickOnDrag = val;\n  }\n\n  public set disableOnInit(val: FlickingOptions[\"disableOnInit\"]) { this._disableOnInit = val; }\n  // PERFORMANCE\n  public set renderOnlyVisible(val: FlickingOptions[\"renderOnlyVisible\"]) { this._renderOnlyVisible = val; }\n  // OTHERS\n  public set autoResize(val: FlickingOptions[\"autoResize\"]) { this._autoResize = val; }\n\n  /**\n   * @param root A root HTMLElement to initialize Flicking on it. When it's a typeof `string`, it should be a css selector string\n   * <ko>Flicking을 초기화할 HTMLElement로, `string` 타입으로 지정시 css 선택자 문자열을 지정해야 합니다.</ko>\n   * @param {object} [options={}] An options object for Flicking.<ko>Flicking에 적용할 옵션 오브젝트</ko>\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE WRONG_TYPE}|When the root is not either string or HTMLElement|\n   * |{@link ERROR_CODE ELEMENT_NOT_FOUND}|When the element with given CSS selector does not exist|\n   * <ko>\n   *\n   * |code|조건|\n   * |---|---|\n   * |{@link ERROR_CODE WRONG_TYPE}|루트 엘리먼트가 string이나 HTMLElement가 아닐 경우|\n   * |{@link ERROR_CODE ELEMENT_NOT_FOUND}|주어진 CSS selector로 엘리먼트를 찾지 못했을 경우|\n   *\n   * </ko>\n   * @example\n   * ```ts\n   * import Flicking from \"@egjs/flicking\";\n   *\n   * // Creating new instance of Flicking with HTMLElement\n   * const flicking = new Flicking(document.querySelector(\".flicking-viewport\"), { circular: true });\n   *\n   * // Creating new instance of Flicking with CSS selector\n   * const flicking2 = new Flicking(\".flicking-viewport\", { circular: true });\n   * ```\n   */\n  public constructor(root: HTMLElement | string, {\n    align = ALIGN.CENTER,\n    defaultIndex = 0,\n    horizontal = true,\n    circular = false,\n    bound = false,\n    adaptive = false,\n    needPanelThreshold = 0,\n    preventEventsBeforeInit = true,\n    deceleration = 0.0075,\n    duration = 500,\n    easing = x => 1 - Math.pow(1 - x, 3),\n    inputType = [\"mouse\", \"touch\"],\n    moveType = \"snap\",\n    threshold = 40,\n    interruptable = true,\n    bounce = \"20%\",\n    iOSEdgeSwipeThreshold = 30,\n    preventClickOnDrag = true,\n    disableOnInit = false,\n    renderOnlyVisible = false,\n    autoInit = true,\n    autoResize = true,\n    renderExternal = null\n  }: Partial<FlickingOptions> = {}) {\n    super();\n\n    // Internal states\n    this._initialized = false;\n    this._plugins = [];\n\n    // Bind options\n    this._align = align;\n    this._defaultIndex = defaultIndex;\n    this._horizontal = horizontal;\n    this._circular = circular;\n    this._bound = bound;\n    this._adaptive = adaptive;\n    this._needPanelThreshold = needPanelThreshold;\n    this._preventEventsBeforeInit = preventEventsBeforeInit;\n    this._deceleration = deceleration;\n    this._duration = duration;\n    this._easing = easing;\n    this._inputType = inputType;\n    this._moveType = moveType;\n    this._threshold = threshold;\n    this._interruptable = interruptable;\n    this._bounce = bounce;\n    this._iOSEdgeSwipeThreshold = iOSEdgeSwipeThreshold;\n    this._preventClickOnDrag = preventClickOnDrag;\n    this._disableOnInit = disableOnInit;\n    this._renderOnlyVisible = renderOnlyVisible;\n    this._autoResize = autoResize;\n    this._autoInit = autoInit;\n    this._renderExternal = renderExternal;\n\n    // Create core components\n    this._viewport = new Viewport(getElement(root));\n    this._renderer = this._createRenderer();\n    this._camera = this._createCamera();\n    this._control = this._createControl();\n\n    this.resize = this.resize.bind(this);\n\n    if (this._autoInit) {\n      void this.init();\n    }\n  }\n\n  /**\n   * Initialize Flicking and move to the default index\n   * This is automatically called on Flicking's constructor when `autoInit` is true(default)\n   * @ko Flicking을 초기화하고, 디폴트 인덱스로 이동합니다\n   * 이 메소드는 `autoInit` 옵션이 true(default)일 경우 Flicking이 생성될 때 자동으로 호출됩니다\n   * @fires Flicking#ready\n   * @return {this}\n   */\n  public async init(): Promise<void> {\n    if (this._initialized) return;\n\n    const camera = this._camera;\n    const renderer = this._renderer;\n    const control = this._control;\n    const originalTrigger = this.trigger;\n    const preventEventsBeforeInit = this._preventEventsBeforeInit;\n\n    camera.init(this);\n    renderer.init(this);\n    control.init(this);\n\n    if (preventEventsBeforeInit) {\n      this.trigger = () => this;\n    }\n\n    await this.resize();\n\n    // Look at initial panel\n    this._moveToInitialPanel();\n\n    if (this._autoResize) {\n      window.addEventListener(\"resize\", this.resize);\n    }\n    if (this._preventClickOnDrag) {\n      control.controller.addPreventClickHandler();\n    }\n    if (this._disableOnInit) {\n      this.disableInput();\n    }\n\n    this._plugins.forEach(plugin => plugin.init(this));\n\n    // Done initializing & emit ready event\n    this._initialized = true;\n    if (preventEventsBeforeInit) {\n      this.trigger = originalTrigger;\n    }\n    this.trigger(new ComponentEvent(EVENTS.READY));\n\n    return;\n  }\n\n  /**\n   * Destroy Flicking and remove all event handlers\n   * @ko Flicking과 하위 컴포넌트들을 초기 상태로 되돌리고, 부착된 모든 이벤트 핸들러를 제거합니다\n   * @return {void}\n   */\n  public destroy(): void {\n    if (!this._initialized) return;\n\n    this.off();\n    window.removeEventListener(\"resize\", this.resize);\n\n    this._control.destroy();\n    this._camera.destroy();\n    this._renderer.destroy();\n\n    this._plugins.forEach(plugin => plugin.destroy());\n\n    this._initialized = false;\n  }\n\n  /**\n   * Move to the previous panel (current index - 1)\n   * @ko 이전 패널로 이동합니다 (현재 인덱스 - 1)\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the panel movement animation (unit: ms)<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the previous panel does not exist|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|이전 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the previous panel<ko>이전 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public prev(duration: number = this._duration): Promise<void> {\n    return this.moveTo(this._control.activePanel?.prev()?.index ?? -1, duration, DIRECTION.PREV);\n  }\n\n  /**\n   * Move to the next panel (current index + 1)\n   * @ko 다음 패널로 이동합니다 (현재 인덱스 + 1)\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the panel movement animation (unit: ms).<ko>패널 이동 애니메이션 진행 시간 (단위: ms)</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the next panel does not exist|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|다음 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the next panel<ko>다음 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public next(duration: number = this._duration) {\n    return this.moveTo(this._control.activePanel?.next()?.index ?? this._renderer.panelCount, duration, DIRECTION.NEXT);\n  }\n\n  /**\n   * Move to the panel with given index\n   * @ko 주어진 인덱스에 해당하는 패널로 이동합니다\n   * @param {number} index The index of the panel to move<ko>이동할 패널의 인덱스</ko>\n   * @param {number} [duration={@link Flicking#duration options.duration}] Duration of the animation (unit: ms)<ko>애니메이션 진행 시간 (단위: ms)</ko>\n   * @param {DIRECTION} [direction=DIRECTION.NONE] Direction to move, only available in the {@link Flicking#circular circular} mode<ko>이동할 방향. {@link Flicking#circular circular} 옵션 활성화시에만 사용 가능합니다</ko>\n   * @async\n   * @fires Flicking#moveStart\n   * @fires Flicking#move\n   * @fires Flicking#moveEnd\n   * @fires Flicking#willChange\n   * @fires Flicking#changed\n   * @fires Flicking#willRestore\n   * @fires Flicking#restored\n   * @fires Flicking#needPanel\n   * @fires Flicking#visibleChange\n   * @fires Flicking#reachEdge\n   * @throws {FlickingError}\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|When the root is not either string or HTMLElement|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|When the animation is already playing|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|When the animation is interrupted by user input|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|When the any of the event's `stop()` is called|\n   * <ko>\n   *\n   * |code|condition|\n   * |---|---|\n   * |{@link ERROR_CODE INDEX_OUT_OF_RANGE}|해당 인덱스를 가진 패널이 존재하지 않을 경우|\n   * |{@link ERROR_CODE ANIMATION_ALREADY_PLAYING}|애니메이션이 이미 진행중인 경우|\n   * |{@link ERROR_CODE ANIMATION_INTERRUPTED}|사용자 입력에 의해 애니메이션이 중단된 경우|\n   * |{@link ERROR_CODE STOP_CALLED_BY_USER}|발생된 이벤트들 중 하나라도 `stop()`이 호출된 경우|\n   *\n   * </ko>\n   * @return {Promise<void>} A Promise which will be resolved after reaching the target panel<ko>해당 패널 도달시에 resolve되는 Promise</ko>\n   */\n  public moveTo(index: number, duration: number = this._duration, direction: ValueOf<typeof DIRECTION> = DIRECTION.NONE) {\n    const renderer = this._renderer;\n    const panelCount = renderer.panelCount;\n\n    const panel = renderer.getPanel(index);\n\n    if (!panel) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.INDEX_OUT_OF_RANGE(index, 0, panelCount - 1), ERROR.CODE.INDEX_OUT_OF_RANGE));\n    }\n\n    if (this._control.animating) {\n      return Promise.reject(new FlickingError(ERROR.MESSAGE.ANIMATION_ALREADY_PLAYING, ERROR.CODE.ANIMATION_ALREADY_PLAYING));\n    }\n\n    return this._control.moveToPanel(panel, {\n      duration,\n      direction\n    });\n  }\n\n  /**\n   * Return the {@link Panel} at the given index. `null` if it doesn't exists.\n   * @ko 주어진 인덱스에 해당하는 {@link Panel}을 반환합니다. 주어진 인덱스에 해당하는 패널이 존재하지 않을 경우 `null`을 반환합니다.\n   * @return {Panel | null} Panel at the given index<ko>주어진 인덱스에 해당하는 패널</ko>\n   * @see Panel\n   * @example\n   * ```ts\n   * const panel = flicking.getPanel(0);\n   * // Which is a shorthand to...\n   * const samePanel = flicking.panels[0];\n   * ```\n   */\n  public getPanel(index: number): Panel | null {\n    return this._renderer.getPanel(index);\n  }\n\n  /**\n   * Enable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 활성화합니다\n   * @return {this}\n   */\n  public enableInput(): this {\n    this._control.enable();\n    return this;\n  }\n\n  /**\n   * Disable input from the user (mouse/touch)\n   * @ko 사용자의 입력(마우스/터치)를 막습니다\n   * @return {this}\n   */\n  public disableInput(): this {\n    this._control.disable();\n    return this;\n  }\n\n  /**\n   * Get current flicking status. You can restore current state by giving returned value to {@link Flicking#setStatus setStatus()}\n   * @ko 현재 상태를 반환합니다. 반환받은 값을 {@link Flicking#setStatus setStatus()} 메소드의 인자로 지정하면 현재 상태를 복원할 수 있습니다\n   * @param {object} options Status retrieving options<ko>Status 반환 옵션</ko>\n   * @param {boolean} [options.index=true] Include current panel index to the returning status. Camera will automatically move to the given index when the {@link Flicking#setStatus setStatus} is called<ko>현재 패널 인덱스를 반환값에 포함시킵니다. {@link Flicking#setStatus setStatus} 호출시 자동으로 해당 인덱스로 카메라를 움직입니다</ko>\n   * @param {boolean} [options.position=true] Include camera position to the returning status. This works only when the {@link Flicking#moveType moveType} is `freeScroll`<ko>카메라의 현재 위치를 반환값에 포함시킵니다. 이 옵션은 {@link Flicking#moveType moveType}이 `freeScroll`일 경우에만 동작합니다</ko>\n   * @param {boolean} [options.includePanelHTML=false] Include panel's `outerHTML` to the returning status<ko>패널의 `outerHTML`을 반환값에 포함시킵니다</ko>\n   * @param {boolean} [options.visiblePanelsOnly=false] Include only {@link Flicking#visiblePanel visiblePanel}'s HTML. This option is available only when the `includePanelHTML` is true\n   * <ko>현재 보이는 패널({@link Flicking#visiblePanel visiblePanel})의 HTML만 반환합니다. `includePanelHTML`이 `true`일 경우에만 동작합니다.</ko>\n   * @return {Partial<Status>} An object with current status value information<ko>현재 상태값 정보를 가진 객체.</ko>\n   */\n  public getStatus({\n    index = true,\n    position = true,\n    includePanelHTML = false,\n    visiblePanelsOnly = false\n  }: Partial<{\n    index: boolean;\n    position: boolean;\n    includePanelHTML: boolean;\n    visiblePanelsOnly: boolean;\n  }> = {}): Status {\n    const camera = this._camera;\n    const panels = visiblePanelsOnly ? this.visiblePanels : this.panels;\n\n    const status: Status = {\n      panels: panels.map(panel => {\n        const panelInfo: Status[\"panels\"][0] = { index: panel.index };\n\n        if (includePanelHTML) {\n          panelInfo.html = panel.element.outerHTML;\n        }\n\n        return panelInfo;\n      })\n    };\n\n    if (index) {\n      status.index = this.index;\n    }\n    if (position) {\n      const nearestAnchor = camera.findNearestAnchor(camera.position);\n\n      if (nearestAnchor) {\n        status.position = {\n          panel: nearestAnchor.panel.index,\n          progressInPanel: camera.getProgressInPanel(nearestAnchor.panel)\n        };\n      }\n\n    }\n\n    if (visiblePanelsOnly) {\n      const visiblePanels = this.visiblePanels;\n\n      status.visibleOffset = visiblePanels[0]?.index ?? 0;\n    }\n\n    return status;\n  }\n\n  /**\n   * Restore to the state of the given {@link Status}\n   * @ko 주어진 {@link Status}의 상태로 복원합니다\n   * @param {Partial<Status>} status Status value to be restored. You should use the return value of the {@link Flicking#getStatus getStatus()} method<ko>복원할 상태 값. {@link Flicking#getStatus getStatus()} 메서드의 반환값을 지정하면 됩니다</ko>\n   * @return {void}\n   */\n  public setStatus(status: Status): void {\n    if (!this._initialized) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_INITIALIZED, ERROR.CODE.NOT_INITIALIZED);\n    }\n\n    const {\n      index,\n      position,\n      visibleOffset,\n      panels\n    } = status;\n\n    const renderer = this._renderer;\n    const control = this._control;\n\n    // Can't add/remove panels on external rendering\n    if (panels[0]?.html && !this._renderExternal) {\n      renderer.batchRemove({ index: 0, deleteCount: this.panels.length });\n      renderer.batchInsert({ index: 0, elements: parseElement(panels.map(panel => panel.html!)) });\n    }\n\n    if (index) {\n      const panelIndex = visibleOffset\n        ? index - visibleOffset\n        : index;\n\n      void this.moveTo(panelIndex, 0).catch(() => void 0);\n    }\n\n    if (position && this._moveType === MOVE_TYPE.FREE_SCROLL) {\n      const { panel, progressInPanel } = position;\n      const panelIndex = visibleOffset\n        ? panel - visibleOffset\n        : panel;\n      const panelRange = renderer.panels[panelIndex].range;\n      const newCameraPos = panelRange.min + (panelRange.max - panelRange.min) * progressInPanel;\n\n      void control.moveToPosition(newCameraPos, 0).catch(() => void 0);\n    }\n  }\n\n  /**\n   * Add plugins that can have different effects on Flicking\n   * @ko 플리킹에 다양한 효과를 부여할 수 있는 플러그인을 추가합니다\n   * @param {...Plugin} plugins The plugin(s) to add<ko>추가할 플러그인(들)</ko>\n   * @return {this}\n   * @see https://github.com/naver/egjs-flicking-plugins\n   */\n  public addPlugins(...plugins: Plugin[]) {\n    if (this._initialized) {\n      plugins.forEach(item => item.init(this));\n    }\n\n    this._plugins.push(...plugins);\n\n    return this;\n  }\n\n  /**\n   * Remove plugins from Flicking.\n   * @ko 플리킹으로부터 플러그인들을 제거합니다.\n   * @param {...Plugin} plugin The plugin(s) to remove.<ko>제거 플러그인(들).</ko>\n   * @return {this}\n   * @see https://github.com/naver/egjs-flicking-plugins\n   */\n  public removePlugins(...plugins: Plugin[]) {\n    plugins.forEach(item => {\n      const foundIndex = findIndex(this._plugins, val => val === item);\n\n      if (foundIndex >= 0) {\n        item.destroy();\n        this._plugins.splice(foundIndex, 1);\n      }\n    });\n\n    return this;\n  }\n\n  /**\n   * Update viewport/panel sizes\n   * @ko 패널 및 뷰포트의 크기를 갱신합니다\n   * @method\n   * @fires Flicking#beforeResize\n   * @fires Flicking#afterResize\n   * @return {this}\n   */\n  public async resize(): Promise<void> {\n    const viewport = this._viewport;\n    const renderer = this._renderer;\n    const camera = this._camera;\n    const control = this._control;\n\n    const activePanel = control.activePanel;\n    const prevWidth = viewport.width;\n    const prevHeight = viewport.height;\n    const prevProgressInPanel = activePanel\n      ? camera.getProgressInPanel(activePanel)\n      : 0;\n\n    this.trigger(new ComponentEvent(EVENTS.BEFORE_RESIZE, {\n      width: prevWidth,\n      height: prevHeight,\n      element: viewport.element\n    }));\n\n    viewport.resize();\n    await renderer.forceRenderAllPanels(); // Render all panel elements, to update sizes\n    renderer.updatePanelSize();\n    await renderer.render();\n    camera.updateAlignPos();\n    camera.updateRange();\n    camera.updateAnchors();\n\n    if (control.animating) {\n      // TODO:\n    } else {\n      await control.updatePosition(prevProgressInPanel);\n      control.updateInput();\n    }\n\n    const newWidth = viewport.width;\n    const newHeight = viewport.height;\n    const sizeChanged = newWidth !== prevWidth || newHeight !== prevHeight;\n\n    this.trigger(new ComponentEvent(EVENTS.AFTER_RESIZE, {\n      width: viewport.width,\n      height: viewport.height,\n      prev: {\n        width: prevWidth,\n        height: prevHeight\n      },\n      sizeChanged,\n      element: viewport.element\n    }));\n  }\n\n  /**\n   * Add new panels after the last panel\n   * @ko 패널 목록의 제일 끝에 새로운 패널들을 추가합니다\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of appended panels<ko>추가된 패널들의 배열</ko>\n   * @see Panel\n   * @see ElementLike\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new Flicking(\"#flick\");\n   * // These are possible parameters\n   * flicking.append(document.createElement(\"div\"));\n   * flicking.append(\"\\<div\\>Panel\\</div\\>\");\n   * flicking.append([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.append(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public append(element: ElementLike | ElementLike[]): Panel[] {\n    return this.insert(this._renderer.panelCount, element);\n  }\n\n  /**\n   * Add new panels before the first panel\n   * This will increase index of panels after by the number of panels added\n   * @ko 패널 목록의 제일 앞(index 0)에 새로운 패널들을 추가합니다\n   * 추가한 패널의 개수만큼 기존 패널들의 인덱스가 증가합니다.\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   * @see Panel\n   * @see ElementLike\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.prepend(document.createElement(\"div\"));\n   * flicking.prepend(\"\\<div\\>Panel\\</div\\>\");\n   * flicking.prepend([\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.prepend(\"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public prepend(element: ElementLike | ElementLike[]): Panel[] {\n    return this.insert(0, element);\n  }\n\n  /**\n   * Insert new panels at given index\n   * This will increase index of panels after by the number of panels added\n   * @ko 주어진 인덱스에 새로운 패널들을 추가합니다\n   * 해당 인덱스보다 같거나 큰 인덱스를 가진 기존 패널들은 추가한 패널의 개수만큼 인덱스가 증가합니다.\n   * @param {number} index Index to insert new panels at<ko>새로 패널들을 추가할 인덱스</ko>\n   * @param {ElementLike | ElementLike[]} element A new HTMLElement, a outerHTML of element, or an array of both\n   * <ko>새로운 HTMLElement, 혹은 엘리먼트의 outerHTML, 혹은 그것들의 배열</ko>\n   * @return {Panel[]} An array of prepended panels<ko>추가된 패널들의 배열</ko>\n   * @throws {FlickingError} {@link ERROR_CODE ERROR_CODE.NOT_ALLOWED_IN_FRAMEWORK} if called on frameworks (React, Angular, Vue...)\n   * @example\n   * ```ts\n   * const flicking = new eg.Flicking(\"#flick\");\n   * flicking.insert(0, document.createElement(\"div\"));\n   * flicking.insert(2, \"\\<div\\>Panel\\</div\\>\");\n   * flicking.insert(1, [\"\\<div\\>Panel\\</div\\>\", document.createElement(\"div\")]);\n   * // Even this is possible\n   * flicking.insert(3, \"\\<div\\>Panel 1\\</div\\>\\<div\\>Panel 2\\</div\\>\");\n   * ```\n   */\n  public insert(index: number, element: ElementLike | ElementLike[]): Panel[] {\n    if (this._renderExternal) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_ALLOWED_IN_FRAMEWORK, ERROR.CODE.NOT_ALLOWED_IN_FRAMEWORK);\n    }\n\n    return this._renderer.batchInsert({ index, elements: parseElement(element) });\n  }\n\n  /**\n   * Remove the panel at the given index\n   * This will decrease index of panels after by the number of panels removed\n   * @ko 주어진 인덱스의 패널을 제거합니다\n   * 해당 인덱스보다 큰 인덱스를 가진 기존 패널들은 제거한 패널의 개수만큼 인덱스가 감소합니다\n   * @param {number} index Index of panel to remove<ko>제거할 패널의 인덱스</ko>\n   * @param {number} [deleteCount=1] Number of panels to remove from index<ko>`index` 이후로 제거할 패널의 개수</ko>\n   * @return {Panel[]} An array of removed panels<ko>제거된 패널들의 배열</ko>\n   */\n  public remove(index: number, deleteCount: number = 1): Panel[] {\n    if (this._renderExternal) {\n      throw new FlickingError(ERROR.MESSAGE.NOT_ALLOWED_IN_FRAMEWORK, ERROR.CODE.NOT_ALLOWED_IN_FRAMEWORK);\n    }\n\n    return this._renderer.batchRemove({ index, deleteCount });\n  }\n\n  private _createControl(): Control {\n    const moveType = this._moveType;\n    const moveTypes = Object.keys(MOVE_TYPE).map(key => MOVE_TYPE[key] as ValueOf<typeof MOVE_TYPE>);\n\n    const moveTypeStr = Array.isArray(moveType)\n      ? moveType[0]\n      : moveType;\n\n    const moveTypeOptions = Array.isArray(moveType)\n      ? moveType[1] ?? {}\n      : {};\n\n    if (!includes(moveTypes, moveTypeStr)) {\n      throw new FlickingError(ERROR.MESSAGE.WRONG_OPTION(\"moveType\", JSON.stringify(moveType)), ERROR.CODE.WRONG_OPTION);\n    }\n\n    switch (moveTypeStr) {\n      case MOVE_TYPE.SNAP:\n        return new SnapControl();\n      case MOVE_TYPE.FREE_SCROLL:\n        return new FreeControl(moveTypeOptions as FreeControlOptions);\n      case MOVE_TYPE.STRICT:\n        return new StrictControl(moveTypeOptions as StrictControlOptions);\n    }\n  }\n\n  private _createCamera(): Camera {\n    const cameraOption = { align: this._align };\n\n    if (this._circular) {\n      if (this._bound) {\n        // eslint-disable-next-line no-console\n        console.warn(\"\\\"circular\\\" and \\\"bound\\\" option cannot be used together, ignoring bound.\");\n      }\n      return new CircularCamera(cameraOption);\n    } else if (this._bound) {\n      return new BoundCamera(cameraOption);\n    } else {\n      return new LinearCamera(cameraOption);\n    }\n  }\n\n  private _createRenderer(): Renderer {\n    const renderingStrategy = this._renderOnlyVisible\n      ? new VisibleRenderingStrategy()\n      : new RawRenderingStrategy();\n\n    const rendererOptions = {\n      align: this._align,\n      strategy: renderingStrategy\n    };\n\n    const renderExternal = this._renderExternal;\n\n    return renderExternal\n      ? new (renderExternal.renderer as any)({ ...rendererOptions, ...renderExternal.rendererOptions })\n      : new VanillaRenderer(rendererOptions);\n  }\n\n  private _moveToInitialPanel(): void {\n    const renderer = this._renderer;\n    const control = this._control;\n    const initialPanel = renderer.getPanel(this._defaultIndex) || renderer.getPanel(0);\n\n    if (!initialPanel) return;\n\n    void control.moveToPanel(initialPanel, {\n      duration: 0\n    });\n  }\n}\n\nexport default Flicking;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Panel, { PanelOptions } from \"./Panel\";\n\nexport interface ExternalPanelOptions<T> extends PanelOptions {\n  externalComponent: T;\n}\n\n/**\n * An slide data component that holds information of a single HTMLElement\n * @ko 슬라이드 데이터 컴포넌트로, 단일 HTMLElement의 정보를 갖고 있습니다\n */\nabstract class ExternalPanel<T = any> extends Panel {\n  protected _externalComponent: T;\n\n  /**\n   * @param {object} options An options object<ko>옵션 오브젝트</ko>\n   * @param {HTMLElement} [options.el] A `HTMLElement` panel's referencing<ko>패널이 참조하는 `HTMLElement`</ko>\n   * @param {number} [options.index] An initial index of the panel<ko>패널의 초기 인덱스</ko>\n   * @param {Constants.ALIGN | string | number} [options.align] An initial {@link Flicking#align align} value of the panel<ko>패널의 초기 {@link Flicking#align align}값</ko>\n   * @param {Flicking} [options.flicking] A Flicking instance panel's referencing<ko>패널이 참조하는 {@link Flicking} 인스턴스</ko>\n   */\n  public constructor(options: ExternalPanelOptions<T>) {\n    super(options);\n\n    this._externalComponent = options.externalComponent;\n  }\n}\n\nexport default ExternalPanel;\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Viewport from \"./Viewport\";\nimport FlickingError from \"./FlickingError\";\nimport AnchorPoint from \"./AnchorPoint\";\n\nexport {\n  Viewport,\n  FlickingError,\n  AnchorPoint\n};\n\nexport * from \"./panel\";\n","import Component from \"@egjs/component\";\n\nimport Flicking from \"../Flicking\";\n\n/**\n * Decorator that makes the method of flicking available in the framework.\n * @ko 프레임워크에서 플리킹의 메소드를 사용할 수 있게 하는 데코레이터.\n * @memberof eg.Flicking\n * @private\n * @example\n * ```js\n * import Flicking, { withFlickingMethods } from \"@egjs/flicking\";\n *\n * class Flicking extends React.Component<Partial<FlickingProps & FlickingOptions>> {\n *   &#64;withFlickingMethods\n *   private flicking: Flicking;\n * }\n * ```\n */\nconst withFlickingMethods = (prototype: any, flickingName: string) => {\n  [Component.prototype, Flicking.prototype].forEach(proto => {\n    Object.getOwnPropertyNames(proto).filter(name => !prototype[name] && !name.startsWith(\"_\") && name !== \"constructor\")\n      .forEach((name: string) => {\n        const descriptor = Object.getOwnPropertyDescriptor(proto, name)!;\n\n        if (descriptor.value) {\n          // Public Function\n          Object.defineProperty(prototype, name, {\n            value: function(...args) {\n              return descriptor.value.call(this[flickingName], ...args);\n            }\n          });\n        } else {\n          const getterDescriptor: { get?: () => any; set?: (val: any) => void } = {};\n          if (descriptor.get) {\n            getterDescriptor.get = function() {\n              return descriptor.get?.call(this[flickingName]);\n            };\n          }\n          if (descriptor.set) {\n            getterDescriptor.set = function(...args) {\n              return descriptor.set?.call(this[flickingName], ...args);\n            };\n          }\n\n          Object.defineProperty(prototype, name, getterDescriptor);\n        }\n      });\n  });\n};\n\nexport default withFlickingMethods;\n","import { DiffResult } from \"@egjs/list-differ\";\n\nimport Flicking from \"../Flicking\";\nimport Renderer from \"../renderer/Renderer\";\n\nexport default (flicking: Flicking, diffResult: DiffResult<any>, rendered: any[]) => {\n  const renderer = flicking.renderer;\n\n  if (diffResult.removed.length > 0) {\n    let startIdx = -1;\n    let prevIdx = -1;\n\n    diffResult.removed.forEach((removedIdx, idx) => {\n      if (startIdx < 0) {\n        startIdx = idx;\n      }\n\n      if (prevIdx >= 0 && removedIdx !== prevIdx + 1) {\n        batchRemove(renderer, diffResult, startIdx, idx + 1);\n\n        startIdx = -1;\n        prevIdx = -1;\n      } else {\n        prevIdx = removedIdx;\n      }\n    });\n\n    if (startIdx >= 0) {\n      batchRemove(renderer, diffResult, startIdx);\n    }\n  }\n\n  diffResult.ordered.forEach(([prevIdx, newIdx]) => {\n    const prevPanel = renderer.panels[prevIdx];\n    const indexDiff = newIdx - prevIdx;\n\n    if (indexDiff > 0) {\n      prevPanel.increaseIndex(indexDiff);\n    } else {\n      prevPanel.decreaseIndex(-indexDiff);\n    }\n    // Update position\n    prevPanel.resize();\n  });\n\n  if (diffResult.added.length > 0) {\n    let startIdx = -1;\n    let prevIdx = -1;\n\n    diffResult.added.forEach((addedIdx, idx) => {\n      if (startIdx < 0) {\n        startIdx = idx;\n      }\n\n      if (prevIdx >= 0 && addedIdx !== prevIdx + 1) {\n        batchInsert(renderer, diffResult, rendered, startIdx, idx + 1);\n\n        startIdx = -1;\n        prevIdx = -1;\n      } else {\n        prevIdx = addedIdx;\n      }\n    });\n\n    if (startIdx >= 0) {\n      batchInsert(renderer, diffResult, rendered, startIdx);\n    }\n  }\n};\n\nconst batchInsert = (renderer: Renderer, diffResult: DiffResult<any>, rendered: any[], startIdx: number, endIdx?: number) => {\n  renderer.batchInsert(\n    ...diffResult.added.slice(startIdx, endIdx).map((index, elIdx) => ({ index, elements: [rendered[elIdx + diffResult.prevList.length]] }))\n  );\n};\n\nconst batchRemove = (renderer: Renderer, diffResult: DiffResult<any>, startIdx: number, endIdx?: number) => {\n  const removed = diffResult.removed.slice(startIdx, endIdx);\n\n  renderer.batchRemove({ index: startIdx, deleteCount: removed.length });\n};\n\n","import { DiffResult } from \"@egjs/list-differ\";\n\nimport Flicking from \"../Flicking\";\n\nexport default <T>(flicking: Flicking, diffResult: DiffResult<T>) => {\n  const removedPanels = diffResult.removed.reduce((map, idx) => {\n    map[idx] = true;\n    return map;\n  }, {});\n\n  return [\n    ...flicking.panels\n      .filter(panel => !removedPanels[panel.index])\n      // Sort panels by position\n      .sort((panel1, panel2) => (panel1.position + panel1.offset) - (panel2.position + panel2.offset))\n      .map(panel => diffResult.prevList[panel.index]),\n    ...diffResult.added.map(idx => diffResult.list[idx])\n  ];\n};\n\n","import { FlickingOptions } from \"../Flicking\";\nimport { ALIGN } from \"../const/external\";\nimport { parseArithmeticExpression } from \"../utils\";\n\nexport default (align: FlickingOptions[\"align\"] = ALIGN.CENTER, horizontal: boolean = true, firstPanelSize?: string) => {\n  const cameraAlign = getCameraAlign(align);\n  const panelAlign = getPanelAlign(align);\n\n  if (panelAlign == null) return \"\";\n\n  const camPosition = `calc(${cameraAlign} - (${firstPanelSize || \"0px\"} * ${panelAlign.percentage}) - ${panelAlign.absolute}px)`;\n\n  return horizontal\n    ? `translate(${camPosition})`\n    : `translate(0, ${camPosition})`;\n};\n\nconst getCameraAlign = (align: FlickingOptions[\"align\"]) => {\n  const alignVal = typeof align === \"object\"\n    ? (align as { camera: string | number }).camera\n    : align;\n\n  return parseAlign(alignVal);\n};\n\nconst getPanelAlign = (align: FlickingOptions[\"align\"]) => {\n  const alignVal = typeof align === \"object\"\n    ? (align as { panel: string | number }).panel\n    : align;\n\n  return parseArithmeticExpression(parseAlign(alignVal));\n};\n\nconst parseAlign = (alignVal: number | string) => {\n  if (typeof alignVal === \"number\") {\n    return `${alignVal}px`;\n  }\n\n  switch (alignVal) {\n    case ALIGN.CENTER:\n      return \"50%\";\n    case ALIGN.NEXT:\n      return \"100%\";\n    case ALIGN.PREV:\n      return \"0%\";\n    default:\n      return alignVal;\n  }\n};\n","/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Flicking from \"./Flicking\";\nimport * as Core from \"./core\";\nimport * as Camera from \"./camera\";\nimport * as Control from \"./control\";\nimport * as Renderer from \"./renderer\";\nimport * as Constants from \"./const/external\";\nimport * as CFC from \"./cfc\";\nimport { merge } from \"./utils\";\n\nmerge(Flicking, Core);\nmerge(Flicking, Camera);\nmerge(Flicking, Control);\nmerge(Flicking, Renderer);\nmerge(Flicking, Constants);\nmerge(Flicking, CFC);\n\nexport default Flicking;\n"],"names":["__extends","message","code","_super","_this","Object","setPrototypeOf","FlickingError","prototype","name","Error","CODE","WRONG_TYPE","ELEMENT_NOT_FOUND","VAL_MUST_NOT_NULL","NOT_ATTACHED_TO_FLICKING","WRONG_OPTION","INDEX_OUT_OF_RANGE","POSITION_NOT_REACHABLE","TRANSFORM_NOT_SUPPORTED","STOP_CALLED_BY_USER","ANIMATION_INTERRUPTED","ANIMATION_ALREADY_PLAYING","NOT_ALLOWED_IN_FRAMEWORK","NOT_INITIALIZED","NO_ACTIVE","MESSAGE","wrongVal","correctTypes","map","type","join","selector","val","optionName","min","max","position","EVENTS","READY","BEFORE_RESIZE","AFTER_RESIZE","HOLD_START","HOLD_END","MOVE_START","MOVE","MOVE_END","WILL_CHANGE","CHANGED","WILL_RESTORE","RESTORED","SELECT","NEED_PANEL","VISIBLE_CHANGE","REACH_EDGE","PANEL_CHANGE","ALIGN","PREV","CENTER","NEXT","DIRECTION","NONE","MOVE_TYPE","SNAP","FREE_SCROLL","STRICT","merge","target","_i","sources","forEach","source","keys","key","getElement","el","parent","targetEl","isString","parentEl","document","queryResult","querySelector","ERROR","nodeType","Node","ELEMENT_NODE","checkExistence","value","nameOnErrMsg","clamp","x","Math","getFlickingAttached","nameToThrowOnError","toArray","iterable","slice","call","parseAlign","align","size","alignPoint","parseArithmeticSize","parseBounce","bounce","parsedBounce","Array","isArray","parsedVal","cssValue","base","parsed","parseArithmeticExpression","percentage","absolute","cssRegex","idx","matchResult","exec","sign","unit","parsedValue","parseFloat","signMultiplier","getDirection","start","end","parseElement","element","elements","tempDiv","createElement","innerHTML","push","children","firstChild","removeChild","getMinusCompensatedIndex","includes","array","array_1","__values","circulatePosition","pos","offset","findIndex","checker","length","getProgress","prev","next","getStyle","window","getComputedStyle","currentStyle","isBetween","_el","_width","_height","_padding","left","right","top","bottom","_isBorderBoxSizing","_a","width","height","padding","isBorderBoxSizing","style","newWidth","newHeight","resize","elStyle","clientWidth","clientHeight","paddingLeft","paddingRight","paddingTop","paddingBottom","boxSizing","EVENT","HOLD","CHANGE","RELEASE","ANIMATION_END","FINISH","POSITION_KEY","STATE_TYPE","ctx","flicking","axesEvent","transitTo","delta","AXES","camera","prevPosition","newPosition","circularEnabled","range","lookAt","moveEvent","ComponentEvent","isTrusted","holding","direction","trigger","isCanceled","DISABLED","renderer","panelCount","holdStartEvent","HOLDING","controller","control","animatingContext","moveStartEvent","ANIMATING","onChange","State","inputEvent","horizontal","offsetX","offsetY","DRAGGING","flick","setTo","IDLE","_releaseEvent","releaseEvent","srcEvent","clickedElement","touchEvent","touch","changedTouches","elementFromPoint","clientX","clientY","panels","clickedPanel","panels_1","panel","contains","cameraPosition","clickedPanelPosition","index","_moveToChangedPosition","destPos","duration","moveToPosition","updateInput","stop","nextStateType","nextState","IdleState","HoldingState","DraggingState","AnimatingState","DisabledState","_state","eventType","externalCtx","currentState","onHold","onRelease","onAnimationEnd","onFinish","_dragged","e","preventDefault","stopPropagation","_resetInternalValues","_stateMachine","StateMachine","_axes","state","_animatingContext","axes","circular","axis","_panInput","isEnable","get","_flicking","Axes","deceleration","interruptable","easing","PanInput","viewport","inputType","iOSEdgeSwipeThreshold","scale","releaseOnScroll","connect","on","fire","removePreventClickHandler","destroy","enable","disable","controlParams","axm","set","cameraEl","_onAxesHold","_onAxesChange","addEventListener","_preventClickWhenDragged","off","removeEventListener","Promise","reject","startPos","animate","resetContext","once","_b","resolve","animationFinishHandler","interruptionHandler","_controller","AxesController","_activePanel","animating","init","_progressInPanel","activePanel","clampToReachablePosition","update","nearestAnchor","findNearestAnchor","removed","canReach","camPos_1","camRangeDiff","rangeDiff","possiblePositions","filter","reduce","nearestPosition","abs","Infinity","_triggerIndexChangeEvent","_animateToPosition","newActivePanel","triggeringEvent","event","currentPanel","animateTo","animation","_setActive","then","render","catch","err","prevActivePanel","updateAdaptiveHeight","prevIndex","prevPanel","clampedPosition","anchorAtPosition","prevPos","isOverThreshold","threshold","adjacentAnchor","getNextAnchor","getPrevAnchor","targetPanel","targetPos","Control","_c","stopAtEdge","_stopAtEdge","progressInPanel","panelRange","findAnchorIncludePosition","count","_count","_resetIndexRange","cameraRange","currentPos","currentIndex","prevPanelIndex","nextPanelIndex","nextPanel","nextPos","_indexRange","axesRange","indexRange","anchors","anchorPoints","firstAnchor","lastAnchor","shouldBounceToFirst","shouldBounceToLast","targetAnchor","_index","_pos","_panel","transforms","supportedStyle","documentElement","transformName","transforms_1","prefixedTransform","_transform","_align","_position","_alignPos","_offset","_range","_visiblePanels","_anchors","NaN","nearestPanel","panelPos","bounceSize","prevRange","nextRange","nextPosition","viewportEl","firstElementChild","_checkTranslateSupport","_refreshVisiblePanels","_checkNeedPanel","_checkReachEnd","_applyTransform","anchor","anchorsIncludingPosition","includePosition","nearest","prevDist","anchorIdx","dist","visibleRange","includeRange","alignVal","AnchorPoint","adaptive","setSize","unRenderedPanels","rendered","sizeIncludingMargin","_needPanelTriggered","newVisiblePanels","canSee","prevVisiblePanels","added","visiblePanels","needPanelTriggered","cameraSize","needPanelThreshold","cameraPrev","cameraNext","firstPanel","lastPanel","firstPanelPrev","lastPanelNext","newPos","wasBetweenRange","isBetweenRange","actualPosition","getPanel","Camera","_circularOffset","_circularEnabled","positionInRange","anchorInRange","loopCount","floor","visibleInCurrentRange","margin","visibleSize","panelSizeSum","canSetCircularMode","every","updateCircularToggleDirection","_updateCircularOffset","toggled","toggle","some","isToggled","sum","toggledPrev","toggledNext","toggleDirection","_calcPanelAreaSum","alignPos","viewportSize","panelAreaSize","canSetBoundMode","reachablePanels","shouldPrependBoundAnchor","shouldAppendBoundAnchor","indexOffset_1","newAnchors","splice","nearestPanelAtMin","_findNearestPanel","panelAtMin","panelAtMax","panelIdx","markForShow","_d","strategy","RawRenderingStrategy","_renderingStrategy","_panels","panelAlign","_getPanelAlign","_collectPanels","items","allPanelsInserted","addedPanels","item","insertingIdx","panelsPushed","panelsInserted","_createPanel","insertedSize","_getPanelSizeSum","increaseIndex","increasePosition","_insertPanelElements","_updateCameraAndControl","moveToPanel","updateOffset","activeIndex","allPanelsRemoved","deleteCount","removingIdx","panelsPulled","panelsRemoved","removedSize","decreaseIndex","decreasePosition","_removePanelElements","resetActive","marginDiff","updateRange","updateAnchors","resetNeedPanelHistory","_removed","_resetInternalStates","_size","_margin","_toggled","_toggleDirection","cameraRangeDiff","progress","alignPosition","camPos","disappearPosNext","disappearPosPrev","checkingRange","offsetWidth","offsetHeight","marginLeft","marginRight","marginTop","marginBottom","_updateAlignPos","includeMargin","moveTo","_moveBy","togglePosition","_togglePosition","prevToggled","camRange","camAlignPosition","camVisibleRange","camVisibleSize","minimumVisible","maximumVisible","shouldBeVisibleAtMin","shouldBeVisibleAtMax","options","_rendered","Panel","wasRenderedPanels","parentElement","updateRenderingPanels","renderingPanels","_getRenderingPanelsByOrder","_resetPanelElementOrder","cameraElement","fragment","createDocumentFragment","appendChild","_removeAllChildsFromCamera","childNodes","node","TEXT_NODE","cameraChilds","ElementPanel","nextSibling","nextSiblingElement","insertBefore","reversedPanels","__spreadArray","reverse","nextPanelEl","nextElementSibling","sort","a","b","Renderer","visibleIndexes","visibles","markForHide","root","defaultIndex","_e","_f","_g","bound","_h","_j","_k","preventEventsBeforeInit","_l","_m","_o","pow","_p","_q","moveType","_r","_s","_t","_u","_v","preventClickOnDrag","_w","disableOnInit","_x","renderOnlyVisible","_y","autoInit","_z","autoResize","_0","renderExternal","_initialized","_plugins","_defaultIndex","_horizontal","_circular","_bound","_adaptive","_needPanelThreshold","_preventEventsBeforeInit","_deceleration","_duration","_easing","_inputType","_moveType","_threshold","_interruptable","_bounce","_iOSEdgeSwipeThreshold","_preventClickOnDrag","_disableOnInit","_renderOnlyVisible","_autoResize","_autoInit","_renderExternal","_viewport","Viewport","_renderer","_createRenderer","_camera","_createCamera","_control","_createControl","bind","prevVal","addPreventClickHandler","originalTrigger","_moveToInitialPanel","disableInput","plugin","includePanelHTML","visiblePanelsOnly","status","panelInfo","html","outerHTML","getProgressInPanel","visibleOffset","batchRemove","batchInsert","panelIndex","newCameraPos","plugins","foundIndex","prevWidth","prevHeight","prevProgressInPanel","forceRenderAllPanels","updatePanelSize","updateAlignPos","updatePosition","sizeChanged","insert","moveTypes","moveTypeStr","moveTypeOptions","JSON","stringify","SnapControl","FreeControl","StrictControl","cameraOption","console","warn","CircularCamera","BoundCamera","LinearCamera","renderingStrategy","VisibleRenderingStrategy","rendererOptions","VanillaRenderer","initialPanel","Flicking","Component","_externalComponent","externalComponent","withFlickingMethods","flickingName","proto","getOwnPropertyNames","startsWith","descriptor","getOwnPropertyDescriptor","defineProperty","args","getterDescriptor","diffResult","startIdx_1","prevIdx_1","removedIdx","ordered","__read","prevIdx","newIdx","indexDiff","startIdx_2","prevIdx_2","addedIdx","startIdx","endIdx","elIdx","prevList","removedPanels","panel1","panel2","list","firstPanelSize","cameraAlign","getCameraAlign","getPanelAlign","camPosition","Core","Constants","CFC"],"mappings":"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"}